<?xml version="1.0" encoding="utf-8"?>
<api>
  <package name="com.annimon.stream" jni-name="com/annimon/stream">
    <interface abstract="true" deprecated="not deprecated" final="false" name="Collector" static="false" visibility="public" jni-signature="Lcom/annimon/stream/Collector;">
      <typeParameters>
        <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        <typeParameter name="A" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        <typeParameter name="R" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
      </typeParameters>
      <method abstract="true" deprecated="not deprecated" final="false" name="accumulator" jni-signature="()Lcom/annimon/stream/function/BiConsumer;" bridge="false" native="false" return="com.annimon.stream.function.BiConsumer&lt;A, T&gt;" jni-return="Lcom/annimon/stream/function/BiConsumer&lt;TA;TT;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="true" deprecated="not deprecated" final="false" name="finisher" jni-signature="()Lcom/annimon/stream/function/Function;" bridge="false" native="false" return="com.annimon.stream.function.Function&lt;A, R&gt;" jni-return="Lcom/annimon/stream/function/Function&lt;TA;TR;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="true" deprecated="not deprecated" final="false" name="supplier" jni-signature="()Lcom/annimon/stream/function/Supplier;" bridge="false" native="false" return="com.annimon.stream.function.Supplier&lt;A&gt;" jni-return="Lcom/annimon/stream/function/Supplier&lt;TA;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </interface>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="true" name="Collectors" static="false" visibility="public" jni-signature="Lcom/annimon/stream/Collectors;">
      <method abstract="false" deprecated="deprecated" final="false" name="averaging" jni-signature="(Lcom/annimon/stream/function/Function;)Lcom/annimon/stream/Collector;" bridge="false" native="false" return="com.annimon.stream.Collector&lt;T, ?, java.lang.Double&gt;" jni-return="Lcom/annimon/stream/Collector&lt;TT;*Ljava/lang/Double;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="mapper" type="com.annimon.stream.function.Function&lt;? super T, java.lang.Double&gt;" jni-type="Lcom/annimon/stream/function/Function&lt;-TT;Ljava/lang/Double;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="averagingDouble" jni-signature="(Lcom/annimon/stream/function/ToDoubleFunction;)Lcom/annimon/stream/Collector;" bridge="false" native="false" return="com.annimon.stream.Collector&lt;T, ?, java.lang.Double&gt;" jni-return="Lcom/annimon/stream/Collector&lt;TT;*Ljava/lang/Double;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="mapper" type="com.annimon.stream.function.ToDoubleFunction&lt;? super T&gt;" jni-type="Lcom/annimon/stream/function/ToDoubleFunction&lt;-TT;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="averagingInt" jni-signature="(Lcom/annimon/stream/function/ToIntFunction;)Lcom/annimon/stream/Collector;" bridge="false" native="false" return="com.annimon.stream.Collector&lt;T, ?, java.lang.Double&gt;" jni-return="Lcom/annimon/stream/Collector&lt;TT;*Ljava/lang/Double;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="mapper" type="com.annimon.stream.function.ToIntFunction&lt;? super T&gt;" jni-type="Lcom/annimon/stream/function/ToIntFunction&lt;-TT;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="averagingLong" jni-signature="(Lcom/annimon/stream/function/ToLongFunction;)Lcom/annimon/stream/Collector;" bridge="false" native="false" return="com.annimon.stream.Collector&lt;T, ?, java.lang.Double&gt;" jni-return="Lcom/annimon/stream/Collector&lt;TT;*Ljava/lang/Double;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="mapper" type="com.annimon.stream.function.ToLongFunction&lt;? super T&gt;" jni-type="Lcom/annimon/stream/function/ToLongFunction&lt;-TT;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="collectingAndThen" jni-signature="(Lcom/annimon/stream/Collector;Lcom/annimon/stream/function/Function;)Lcom/annimon/stream/Collector;" bridge="false" native="false" return="com.annimon.stream.Collector&lt;T, A, OR&gt;" jni-return="Lcom/annimon/stream/Collector&lt;TT;TA;TOR;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
          <typeParameter name="A" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
          <typeParameter name="IR" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
          <typeParameter name="OR" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="c" type="com.annimon.stream.Collector&lt;T, A, IR&gt;" jni-type="Lcom/annimon/stream/Collector&lt;TT;TA;TIR;&gt;;"></parameter>
        <parameter name="finisher" type="com.annimon.stream.function.Function&lt;IR, OR&gt;" jni-type="Lcom/annimon/stream/function/Function&lt;TIR;TOR;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="counting" jni-signature="()Lcom/annimon/stream/Collector;" bridge="false" native="false" return="com.annimon.stream.Collector&lt;T, ?, java.lang.Long&gt;" jni-return="Lcom/annimon/stream/Collector&lt;TT;*Ljava/lang/Long;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="filtering" jni-signature="(Lcom/annimon/stream/function/Predicate;Lcom/annimon/stream/Collector;)Lcom/annimon/stream/Collector;" bridge="false" native="false" return="com.annimon.stream.Collector&lt;T, ?, R&gt;" jni-return="Lcom/annimon/stream/Collector&lt;TT;*TR;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
          <typeParameter name="A" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
          <typeParameter name="R" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="predicate" type="com.annimon.stream.function.Predicate&lt;? super T&gt;" jni-type="Lcom/annimon/stream/function/Predicate&lt;-TT;&gt;;"></parameter>
        <parameter name="downstream" type="com.annimon.stream.Collector&lt;? super T, A, R&gt;" jni-type="Lcom/annimon/stream/Collector&lt;-TT;TA;TR;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="flatMapping" jni-signature="(Lcom/annimon/stream/function/Function;Lcom/annimon/stream/Collector;)Lcom/annimon/stream/Collector;" bridge="false" native="false" return="com.annimon.stream.Collector&lt;T, ?, R&gt;" jni-return="Lcom/annimon/stream/Collector&lt;TT;*TR;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
          <typeParameter name="U" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
          <typeParameter name="A" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
          <typeParameter name="R" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="mapper" type="com.annimon.stream.function.Function&lt;? super T, ? extends com.annimon.stream.Stream&lt;? extends U&gt;&gt;" jni-type="Lcom/annimon/stream/function/Function&lt;-TT;+Lcom/annimon/stream/Stream&lt;+TU;&gt;;&gt;;"></parameter>
        <parameter name="downstream" type="com.annimon.stream.Collector&lt;? super U, A, R&gt;" jni-type="Lcom/annimon/stream/Collector&lt;-TU;TA;TR;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="groupingBy" jni-signature="(Lcom/annimon/stream/function/Function;)Lcom/annimon/stream/Collector;" bridge="false" native="false" return="com.annimon.stream.Collector&lt;T, ?, java.util.Map&lt;K, java.util.List&lt;T&gt;&gt;&gt;" jni-return="Lcom/annimon/stream/Collector&lt;TT;*Ljava/util/Map&lt;TK;Ljava/util/List&lt;TT;&gt;;&gt;;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
          <typeParameter name="K" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="classifier" type="com.annimon.stream.function.Function&lt;? super T, ? extends K&gt;" jni-type="Lcom/annimon/stream/function/Function&lt;-TT;+TK;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="groupingBy" jni-signature="(Lcom/annimon/stream/function/Function;Lcom/annimon/stream/Collector;)Lcom/annimon/stream/Collector;" bridge="false" native="false" return="com.annimon.stream.Collector&lt;T, ?, java.util.Map&lt;K, D&gt;&gt;" jni-return="Lcom/annimon/stream/Collector&lt;TT;*Ljava/util/Map&lt;TK;TD;&gt;;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
          <typeParameter name="K" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
          <typeParameter name="A" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
          <typeParameter name="D" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="classifier" type="com.annimon.stream.function.Function&lt;? super T, ? extends K&gt;" jni-type="Lcom/annimon/stream/function/Function&lt;-TT;+TK;&gt;;"></parameter>
        <parameter name="downstream" type="com.annimon.stream.Collector&lt;? super T, A, D&gt;" jni-type="Lcom/annimon/stream/Collector&lt;-TT;TA;TD;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="groupingBy" jni-signature="(Lcom/annimon/stream/function/Function;Lcom/annimon/stream/function/Supplier;Lcom/annimon/stream/Collector;)Lcom/annimon/stream/Collector;" bridge="false" native="false" return="com.annimon.stream.Collector&lt;T, ?, M&gt;" jni-return="Lcom/annimon/stream/Collector&lt;TT;*TM;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
          <typeParameter name="K" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
          <typeParameter name="D" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
          <typeParameter name="A" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
          <typeParameter name="M" interfaceBounds="java.util.Map&lt;K, D&gt;" jni-interfaceBounds="Ljava/util/Map&lt;TK;TD;&gt;;">
            <genericConstraints>
              <genericConstraint type="java.util.Map&lt;K, D&gt;"></genericConstraint>
            </genericConstraints>
          </typeParameter>
        </typeParameters>
        <parameter name="classifier" type="com.annimon.stream.function.Function&lt;? super T, ? extends K&gt;" jni-type="Lcom/annimon/stream/function/Function&lt;-TT;+TK;&gt;;"></parameter>
        <parameter name="mapFactory" type="com.annimon.stream.function.Supplier&lt;M&gt;" jni-type="Lcom/annimon/stream/function/Supplier&lt;TM;&gt;;"></parameter>
        <parameter name="downstream" type="com.annimon.stream.Collector&lt;? super T, A, D&gt;" jni-type="Lcom/annimon/stream/Collector&lt;-TT;TA;TD;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="joining" jni-signature="()Lcom/annimon/stream/Collector;" bridge="false" native="false" return="com.annimon.stream.Collector&lt;java.lang.CharSequence, ?, java.lang.String&gt;" jni-return="Lcom/annimon/stream/Collector&lt;Ljava/lang/CharSequence;*Ljava/lang/String;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="joining" jni-signature="(Ljava/lang/CharSequence;)Lcom/annimon/stream/Collector;" bridge="false" native="false" return="com.annimon.stream.Collector&lt;java.lang.CharSequence, ?, java.lang.String&gt;" jni-return="Lcom/annimon/stream/Collector&lt;Ljava/lang/CharSequence;*Ljava/lang/String;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="delimiter" type="java.lang.CharSequence" jni-type="Ljava/lang/CharSequence;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="joining" jni-signature="(Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Lcom/annimon/stream/Collector;" bridge="false" native="false" return="com.annimon.stream.Collector&lt;java.lang.CharSequence, ?, java.lang.String&gt;" jni-return="Lcom/annimon/stream/Collector&lt;Ljava/lang/CharSequence;*Ljava/lang/String;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="delimiter" type="java.lang.CharSequence" jni-type="Ljava/lang/CharSequence;"></parameter>
        <parameter name="prefix" type="java.lang.CharSequence" jni-type="Ljava/lang/CharSequence;"></parameter>
        <parameter name="suffix" type="java.lang.CharSequence" jni-type="Ljava/lang/CharSequence;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="joining" jni-signature="(Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/String;)Lcom/annimon/stream/Collector;" bridge="false" native="false" return="com.annimon.stream.Collector&lt;java.lang.CharSequence, ?, java.lang.String&gt;" jni-return="Lcom/annimon/stream/Collector&lt;Ljava/lang/CharSequence;*Ljava/lang/String;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="delimiter" type="java.lang.CharSequence" jni-type="Ljava/lang/CharSequence;"></parameter>
        <parameter name="prefix" type="java.lang.CharSequence" jni-type="Ljava/lang/CharSequence;"></parameter>
        <parameter name="suffix" type="java.lang.CharSequence" jni-type="Ljava/lang/CharSequence;"></parameter>
        <parameter name="emptyValue" type="java.lang.String" jni-type="Ljava/lang/String;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="mapping" jni-signature="(Lcom/annimon/stream/function/Function;Lcom/annimon/stream/Collector;)Lcom/annimon/stream/Collector;" bridge="false" native="false" return="com.annimon.stream.Collector&lt;T, ?, R&gt;" jni-return="Lcom/annimon/stream/Collector&lt;TT;*TR;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
          <typeParameter name="U" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
          <typeParameter name="A" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
          <typeParameter name="R" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="mapper" type="com.annimon.stream.function.Function&lt;? super T, ? extends U&gt;" jni-type="Lcom/annimon/stream/function/Function&lt;-TT;+TU;&gt;;"></parameter>
        <parameter name="downstream" type="com.annimon.stream.Collector&lt;? super U, A, R&gt;" jni-type="Lcom/annimon/stream/Collector&lt;-TU;TA;TR;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="partitioningBy" jni-signature="(Lcom/annimon/stream/function/Predicate;)Lcom/annimon/stream/Collector;" bridge="false" native="false" return="com.annimon.stream.Collector&lt;T, ?, java.util.Map&lt;java.lang.Boolean, java.util.List&lt;T&gt;&gt;&gt;" jni-return="Lcom/annimon/stream/Collector&lt;TT;*Ljava/util/Map&lt;Ljava/lang/Boolean;Ljava/util/List&lt;TT;&gt;;&gt;;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="predicate" type="com.annimon.stream.function.Predicate&lt;? super T&gt;" jni-type="Lcom/annimon/stream/function/Predicate&lt;-TT;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="partitioningBy" jni-signature="(Lcom/annimon/stream/function/Predicate;Lcom/annimon/stream/Collector;)Lcom/annimon/stream/Collector;" bridge="false" native="false" return="com.annimon.stream.Collector&lt;T, ?, java.util.Map&lt;java.lang.Boolean, D&gt;&gt;" jni-return="Lcom/annimon/stream/Collector&lt;TT;*Ljava/util/Map&lt;Ljava/lang/Boolean;TD;&gt;;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
          <typeParameter name="D" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
          <typeParameter name="A" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="predicate" type="com.annimon.stream.function.Predicate&lt;? super T&gt;" jni-type="Lcom/annimon/stream/function/Predicate&lt;-TT;&gt;;"></parameter>
        <parameter name="downstream" type="com.annimon.stream.Collector&lt;? super T, A, D&gt;" jni-type="Lcom/annimon/stream/Collector&lt;-TT;TA;TD;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="reducing" jni-signature="(Ljava/lang/Object;Lcom/annimon/stream/function/Function;Lcom/annimon/stream/function/BinaryOperator;)Lcom/annimon/stream/Collector;" bridge="false" native="false" return="com.annimon.stream.Collector&lt;T, ?, R&gt;" jni-return="Lcom/annimon/stream/Collector&lt;TT;*TR;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
          <typeParameter name="R" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="identity" type="R" jni-type="TR;"></parameter>
        <parameter name="mapper" type="com.annimon.stream.function.Function&lt;? super T, ? extends R&gt;" jni-type="Lcom/annimon/stream/function/Function&lt;-TT;+TR;&gt;;"></parameter>
        <parameter name="op" type="com.annimon.stream.function.BinaryOperator&lt;R&gt;" jni-type="Lcom/annimon/stream/function/BinaryOperator&lt;TR;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="reducing" jni-signature="(Ljava/lang/Object;Lcom/annimon/stream/function/BinaryOperator;)Lcom/annimon/stream/Collector;" bridge="false" native="false" return="com.annimon.stream.Collector&lt;T, ?, T&gt;" jni-return="Lcom/annimon/stream/Collector&lt;TT;*TT;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="identity" type="T" jni-type="TT;"></parameter>
        <parameter name="op" type="com.annimon.stream.function.BinaryOperator&lt;T&gt;" jni-type="Lcom/annimon/stream/function/BinaryOperator&lt;TT;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="summingDouble" jni-signature="(Lcom/annimon/stream/function/ToDoubleFunction;)Lcom/annimon/stream/Collector;" bridge="false" native="false" return="com.annimon.stream.Collector&lt;T, ?, java.lang.Double&gt;" jni-return="Lcom/annimon/stream/Collector&lt;TT;*Ljava/lang/Double;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="mapper" type="com.annimon.stream.function.ToDoubleFunction&lt;? super T&gt;" jni-type="Lcom/annimon/stream/function/ToDoubleFunction&lt;-TT;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="summingInt" jni-signature="(Lcom/annimon/stream/function/ToIntFunction;)Lcom/annimon/stream/Collector;" bridge="false" native="false" return="com.annimon.stream.Collector&lt;T, ?, java.lang.Integer&gt;" jni-return="Lcom/annimon/stream/Collector&lt;TT;*Ljava/lang/Integer;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="mapper" type="com.annimon.stream.function.ToIntFunction&lt;? super T&gt;" jni-type="Lcom/annimon/stream/function/ToIntFunction&lt;-TT;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="summingLong" jni-signature="(Lcom/annimon/stream/function/ToLongFunction;)Lcom/annimon/stream/Collector;" bridge="false" native="false" return="com.annimon.stream.Collector&lt;T, ?, java.lang.Long&gt;" jni-return="Lcom/annimon/stream/Collector&lt;TT;*Ljava/lang/Long;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="mapper" type="com.annimon.stream.function.ToLongFunction&lt;? super T&gt;" jni-type="Lcom/annimon/stream/function/ToLongFunction&lt;-TT;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="toCollection" jni-signature="(Lcom/annimon/stream/function/Supplier;)Lcom/annimon/stream/Collector;" bridge="false" native="false" return="com.annimon.stream.Collector&lt;T, ?, R&gt;" jni-return="Lcom/annimon/stream/Collector&lt;TT;*TR;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
          <typeParameter name="R" interfaceBounds="java.util.Collection&lt;T&gt;" jni-interfaceBounds="Ljava/util/Collection&lt;TT;&gt;;">
            <genericConstraints>
              <genericConstraint type="java.util.Collection&lt;T&gt;"></genericConstraint>
            </genericConstraints>
          </typeParameter>
        </typeParameters>
        <parameter name="collectionSupplier" type="com.annimon.stream.function.Supplier&lt;R&gt;" jni-type="Lcom/annimon/stream/function/Supplier&lt;TR;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="toList" jni-signature="()Lcom/annimon/stream/Collector;" bridge="false" native="false" return="com.annimon.stream.Collector&lt;T, ?, java.util.List&lt;T&gt;&gt;" jni-return="Lcom/annimon/stream/Collector&lt;TT;*Ljava/util/List&lt;TT;&gt;;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="toMap" jni-signature="(Lcom/annimon/stream/function/Function;)Lcom/annimon/stream/Collector;" bridge="false" native="false" return="com.annimon.stream.Collector&lt;T, ?, java.util.Map&lt;K, T&gt;&gt;" jni-return="Lcom/annimon/stream/Collector&lt;TT;*Ljava/util/Map&lt;TK;TT;&gt;;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
          <typeParameter name="K" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="keyMapper" type="com.annimon.stream.function.Function&lt;? super T, ? extends K&gt;" jni-type="Lcom/annimon/stream/function/Function&lt;-TT;+TK;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="toMap" jni-signature="(Lcom/annimon/stream/function/Function;Lcom/annimon/stream/function/Function;)Lcom/annimon/stream/Collector;" bridge="false" native="false" return="com.annimon.stream.Collector&lt;T, ?, java.util.Map&lt;K, V&gt;&gt;" jni-return="Lcom/annimon/stream/Collector&lt;TT;*Ljava/util/Map&lt;TK;TV;&gt;;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
          <typeParameter name="K" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
          <typeParameter name="V" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="keyMapper" type="com.annimon.stream.function.Function&lt;? super T, ? extends K&gt;" jni-type="Lcom/annimon/stream/function/Function&lt;-TT;+TK;&gt;;"></parameter>
        <parameter name="valueMapper" type="com.annimon.stream.function.Function&lt;? super T, ? extends V&gt;" jni-type="Lcom/annimon/stream/function/Function&lt;-TT;+TV;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="toMap" jni-signature="(Lcom/annimon/stream/function/Function;Lcom/annimon/stream/function/Function;Lcom/annimon/stream/function/BinaryOperator;)Lcom/annimon/stream/Collector;" bridge="false" native="false" return="com.annimon.stream.Collector&lt;T, ?, java.util.Map&lt;K, V&gt;&gt;" jni-return="Lcom/annimon/stream/Collector&lt;TT;*Ljava/util/Map&lt;TK;TV;&gt;;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
          <typeParameter name="K" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
          <typeParameter name="V" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="keyMapper" type="com.annimon.stream.function.Function&lt;? super T, ? extends K&gt;" jni-type="Lcom/annimon/stream/function/Function&lt;-TT;+TK;&gt;;"></parameter>
        <parameter name="valueMapper" type="com.annimon.stream.function.Function&lt;? super T, ? extends V&gt;" jni-type="Lcom/annimon/stream/function/Function&lt;-TT;+TV;&gt;;"></parameter>
        <parameter name="mergeFunction" type="com.annimon.stream.function.BinaryOperator&lt;V&gt;" jni-type="Lcom/annimon/stream/function/BinaryOperator&lt;TV;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="toMap" jni-signature="(Lcom/annimon/stream/function/Function;Lcom/annimon/stream/function/Function;Lcom/annimon/stream/function/BinaryOperator;Lcom/annimon/stream/function/Supplier;)Lcom/annimon/stream/Collector;" bridge="false" native="false" return="com.annimon.stream.Collector&lt;T, ?, M&gt;" jni-return="Lcom/annimon/stream/Collector&lt;TT;*TM;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
          <typeParameter name="K" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
          <typeParameter name="V" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
          <typeParameter name="M" interfaceBounds="java.util.Map&lt;K, V&gt;" jni-interfaceBounds="Ljava/util/Map&lt;TK;TV;&gt;;">
            <genericConstraints>
              <genericConstraint type="java.util.Map&lt;K, V&gt;"></genericConstraint>
            </genericConstraints>
          </typeParameter>
        </typeParameters>
        <parameter name="keyMapper" type="com.annimon.stream.function.Function&lt;? super T, ? extends K&gt;" jni-type="Lcom/annimon/stream/function/Function&lt;-TT;+TK;&gt;;"></parameter>
        <parameter name="valueMapper" type="com.annimon.stream.function.Function&lt;? super T, ? extends V&gt;" jni-type="Lcom/annimon/stream/function/Function&lt;-TT;+TV;&gt;;"></parameter>
        <parameter name="mergeFunction" type="com.annimon.stream.function.BinaryOperator&lt;V&gt;" jni-type="Lcom/annimon/stream/function/BinaryOperator&lt;TV;&gt;;"></parameter>
        <parameter name="mapFactory" type="com.annimon.stream.function.Supplier&lt;M&gt;" jni-type="Lcom/annimon/stream/function/Supplier&lt;TM;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="toMap" jni-signature="(Lcom/annimon/stream/function/Function;Lcom/annimon/stream/function/Function;Lcom/annimon/stream/function/Supplier;)Lcom/annimon/stream/Collector;" bridge="false" native="false" return="com.annimon.stream.Collector&lt;T, ?, M&gt;" jni-return="Lcom/annimon/stream/Collector&lt;TT;*TM;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
          <typeParameter name="K" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
          <typeParameter name="V" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
          <typeParameter name="M" interfaceBounds="java.util.Map&lt;K, V&gt;" jni-interfaceBounds="Ljava/util/Map&lt;TK;TV;&gt;;">
            <genericConstraints>
              <genericConstraint type="java.util.Map&lt;K, V&gt;"></genericConstraint>
            </genericConstraints>
          </typeParameter>
        </typeParameters>
        <parameter name="keyMapper" type="com.annimon.stream.function.Function&lt;? super T, ? extends K&gt;" jni-type="Lcom/annimon/stream/function/Function&lt;-TT;+TK;&gt;;"></parameter>
        <parameter name="valueMapper" type="com.annimon.stream.function.Function&lt;? super T, ? extends V&gt;" jni-type="Lcom/annimon/stream/function/Function&lt;-TT;+TV;&gt;;"></parameter>
        <parameter name="mapFactory" type="com.annimon.stream.function.Supplier&lt;M&gt;" jni-type="Lcom/annimon/stream/function/Supplier&lt;TM;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="toSet" jni-signature="()Lcom/annimon/stream/Collector;" bridge="false" native="false" return="com.annimon.stream.Collector&lt;T, ?, java.util.Set&lt;T&gt;&gt;" jni-return="Lcom/annimon/stream/Collector&lt;TT;*Ljava/util/Set&lt;TT;&gt;;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="toUnmodifiableList" jni-signature="()Lcom/annimon/stream/Collector;" bridge="false" native="false" return="com.annimon.stream.Collector&lt;T, ?, java.util.List&lt;T&gt;&gt;" jni-return="Lcom/annimon/stream/Collector&lt;TT;*Ljava/util/List&lt;TT;&gt;;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="toUnmodifiableMap" jni-signature="(Lcom/annimon/stream/function/Function;Lcom/annimon/stream/function/Function;)Lcom/annimon/stream/Collector;" bridge="false" native="false" return="com.annimon.stream.Collector&lt;T, ?, java.util.Map&lt;K, V&gt;&gt;" jni-return="Lcom/annimon/stream/Collector&lt;TT;*Ljava/util/Map&lt;TK;TV;&gt;;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
          <typeParameter name="K" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
          <typeParameter name="V" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="keyMapper" type="com.annimon.stream.function.Function&lt;? super T, ? extends K&gt;" jni-type="Lcom/annimon/stream/function/Function&lt;-TT;+TK;&gt;;"></parameter>
        <parameter name="valueMapper" type="com.annimon.stream.function.Function&lt;? super T, ? extends V&gt;" jni-type="Lcom/annimon/stream/function/Function&lt;-TT;+TV;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="toUnmodifiableMap" jni-signature="(Lcom/annimon/stream/function/Function;Lcom/annimon/stream/function/Function;Lcom/annimon/stream/function/BinaryOperator;)Lcom/annimon/stream/Collector;" bridge="false" native="false" return="com.annimon.stream.Collector&lt;T, ?, java.util.Map&lt;K, V&gt;&gt;" jni-return="Lcom/annimon/stream/Collector&lt;TT;*Ljava/util/Map&lt;TK;TV;&gt;;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
          <typeParameter name="K" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
          <typeParameter name="V" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="keyMapper" type="com.annimon.stream.function.Function&lt;? super T, ? extends K&gt;" jni-type="Lcom/annimon/stream/function/Function&lt;-TT;+TK;&gt;;"></parameter>
        <parameter name="valueMapper" type="com.annimon.stream.function.Function&lt;? super T, ? extends V&gt;" jni-type="Lcom/annimon/stream/function/Function&lt;-TT;+TV;&gt;;"></parameter>
        <parameter name="mergeFunction" type="com.annimon.stream.function.BinaryOperator&lt;V&gt;" jni-type="Lcom/annimon/stream/function/BinaryOperator&lt;TV;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="toUnmodifiableSet" jni-signature="()Lcom/annimon/stream/Collector;" bridge="false" native="false" return="com.annimon.stream.Collector&lt;T, ?, java.util.Set&lt;T&gt;&gt;" jni-return="Lcom/annimon/stream/Collector&lt;TT;*Ljava/util/Set&lt;TT;&gt;;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="true" name="Collectors.1" static="true" visibility="" jni-signature="Lcom/annimon/stream/Collectors$1;">
      <implements name="com.annimon.stream.function.Supplier" name-generic-aware="com.annimon.stream.function.Supplier&lt;long[]&gt;" jni-type="Lcom/annimon/stream/function/Supplier&lt;[J&gt;;"></implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="get" jni-signature="()[J" bridge="false" native="false" return="long[]" jni-return="[J" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="true" name="Collectors.12" static="true" visibility="" jni-signature="Lcom/annimon/stream/Collectors$12;">
      <implements name="com.annimon.stream.function.Supplier" name-generic-aware="com.annimon.stream.function.Supplier&lt;java.lang.StringBuilder&gt;" jni-type="Lcom/annimon/stream/function/Supplier&lt;Ljava/lang/StringBuilder;&gt;;"></implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="get" jni-signature="()Ljava/lang/StringBuilder;" bridge="false" native="false" return="java.lang.StringBuilder" jni-return="Ljava/lang/StringBuilder;" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="true" name="Collectors.13" static="true" visibility="" jni-signature="Lcom/annimon/stream/Collectors$13;">
      <implements name="com.annimon.stream.function.BiConsumer" name-generic-aware="com.annimon.stream.function.BiConsumer&lt;java.lang.StringBuilder, java.lang.CharSequence&gt;" jni-type="Lcom/annimon/stream/function/BiConsumer&lt;Ljava/lang/StringBuilder;Ljava/lang/CharSequence;&gt;;"></implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="accept" jni-signature="(Ljava/lang/StringBuilder;Ljava/lang/CharSequence;)V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="t" type="java.lang.StringBuilder" jni-type="Ljava/lang/StringBuilder;"></parameter>
        <parameter name="u" type="java.lang.CharSequence" jni-type="Ljava/lang/CharSequence;"></parameter>
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="true" name="Collectors.14" static="true" visibility="" jni-signature="Lcom/annimon/stream/Collectors$14;">
      <implements name="com.annimon.stream.function.Function" name-generic-aware="com.annimon.stream.function.Function&lt;java.lang.StringBuilder, java.lang.String&gt;" jni-type="Lcom/annimon/stream/function/Function&lt;Ljava/lang/StringBuilder;Ljava/lang/String;&gt;;"></implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="apply" jni-signature="(Ljava/lang/StringBuilder;)Ljava/lang/String;" bridge="false" native="false" return="java.lang.String" jni-return="Ljava/lang/String;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="value" type="java.lang.StringBuilder" jni-type="Ljava/lang/StringBuilder;"></parameter>
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="true" name="Collectors.18" static="true" visibility="" jni-signature="Lcom/annimon/stream/Collectors$18;">
      <implements name="com.annimon.stream.function.Function" name-generic-aware="com.annimon.stream.function.Function&lt;long[], java.lang.Double&gt;" jni-type="Lcom/annimon/stream/function/Function&lt;[JLjava/lang/Double;&gt;;"></implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="apply" jni-signature="([J)Ljava/lang/Double;" bridge="false" native="false" return="java.lang.Double" jni-return="Ljava/lang/Double;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="t" type="long[]" jni-type="[J"></parameter>
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="true" name="Collectors.2" static="true" visibility="" jni-signature="Lcom/annimon/stream/Collectors$2;">
      <implements name="com.annimon.stream.function.Supplier" name-generic-aware="com.annimon.stream.function.Supplier&lt;double[]&gt;" jni-type="Lcom/annimon/stream/function/Supplier&lt;[D&gt;;"></implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="get" jni-signature="()[D" bridge="false" native="false" return="double[]" jni-return="[D" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="true" name="Collectors.20" static="true" visibility="" jni-signature="Lcom/annimon/stream/Collectors$20;">
      <implements name="com.annimon.stream.function.Function" name-generic-aware="com.annimon.stream.function.Function&lt;double[], java.lang.Double&gt;" jni-type="Lcom/annimon/stream/function/Function&lt;[DLjava/lang/Double;&gt;;"></implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="apply" jni-signature="([D)Ljava/lang/Double;" bridge="false" native="false" return="java.lang.Double" jni-return="Ljava/lang/Double;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="t" type="double[]" jni-type="[D"></parameter>
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="true" name="Collectors.21" static="true" visibility="" jni-signature="Lcom/annimon/stream/Collectors$21;">
      <implements name="com.annimon.stream.function.Supplier" name-generic-aware="com.annimon.stream.function.Supplier&lt;int[]&gt;" jni-type="Lcom/annimon/stream/function/Supplier&lt;[I&gt;;"></implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="get" jni-signature="()[I" bridge="false" native="false" return="int[]" jni-return="[I" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="true" name="Collectors.23" static="true" visibility="" jni-signature="Lcom/annimon/stream/Collectors$23;">
      <implements name="com.annimon.stream.function.Function" name-generic-aware="com.annimon.stream.function.Function&lt;int[], java.lang.Integer&gt;" jni-type="Lcom/annimon/stream/function/Function&lt;[ILjava/lang/Integer;&gt;;"></implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="apply" jni-signature="([I)Ljava/lang/Integer;" bridge="false" native="false" return="java.lang.Integer" jni-return="Ljava/lang/Integer;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="value" type="int[]" jni-type="[I"></parameter>
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="true" name="Collectors.25" static="true" visibility="" jni-signature="Lcom/annimon/stream/Collectors$25;">
      <implements name="com.annimon.stream.function.Function" name-generic-aware="com.annimon.stream.function.Function&lt;long[], java.lang.Long&gt;" jni-type="Lcom/annimon/stream/function/Function&lt;[JLjava/lang/Long;&gt;;"></implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="apply" jni-signature="([J)Ljava/lang/Long;" bridge="false" native="false" return="java.lang.Long" jni-return="Ljava/lang/Long;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="value" type="long[]" jni-type="[J"></parameter>
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="true" name="Collectors.27" static="true" visibility="" jni-signature="Lcom/annimon/stream/Collectors$27;">
      <implements name="com.annimon.stream.function.Function" name-generic-aware="com.annimon.stream.function.Function&lt;double[], java.lang.Double&gt;" jni-type="Lcom/annimon/stream/function/Function&lt;[DLjava/lang/Double;&gt;;"></implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="apply" jni-signature="([D)Ljava/lang/Double;" bridge="false" native="false" return="java.lang.Double" jni-return="Ljava/lang/Double;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="value" type="double[]" jni-type="[D"></parameter>
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="true" name="Collectors.CollectorsImpl" static="true" visibility="private" jni-signature="Lcom/annimon/stream/Collectors$CollectorsImpl;">
      <implements name="com.annimon.stream.Collector" name-generic-aware="com.annimon.stream.Collector&lt;T, A, R&gt;" jni-type="Lcom/annimon/stream/Collector&lt;TT;TA;TR;&gt;;"></implements>
      <typeParameters>
        <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        <typeParameter name="A" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        <typeParameter name="R" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
      </typeParameters>
      <constructor deprecated="not deprecated" final="false" name="Collectors.CollectorsImpl" jni-signature="(Lcom/annimon/stream/function/Supplier;Lcom/annimon/stream/function/BiConsumer;)V" bridge="false" static="false" type="com.annimon.stream.Collectors.CollectorsImpl" synthetic="false" visibility="public">
        <parameter name="supplier" type="com.annimon.stream.function.Supplier&lt;A&gt;" jni-type="Lcom/annimon/stream/function/Supplier&lt;TA;&gt;;"></parameter>
        <parameter name="accumulator" type="com.annimon.stream.function.BiConsumer&lt;A, T&gt;" jni-type="Lcom/annimon/stream/function/BiConsumer&lt;TA;TT;&gt;;"></parameter>
      </constructor>
      <constructor deprecated="not deprecated" final="false" name="Collectors.CollectorsImpl" jni-signature="(Lcom/annimon/stream/function/Supplier;Lcom/annimon/stream/function/BiConsumer;Lcom/annimon/stream/function/Function;)V" bridge="false" static="false" type="com.annimon.stream.Collectors.CollectorsImpl" synthetic="false" visibility="public">
        <parameter name="supplier" type="com.annimon.stream.function.Supplier&lt;A&gt;" jni-type="Lcom/annimon/stream/function/Supplier&lt;TA;&gt;;"></parameter>
        <parameter name="accumulator" type="com.annimon.stream.function.BiConsumer&lt;A, T&gt;" jni-type="Lcom/annimon/stream/function/BiConsumer&lt;TA;TT;&gt;;"></parameter>
        <parameter name="finisher" type="com.annimon.stream.function.Function&lt;A, R&gt;" jni-type="Lcom/annimon/stream/function/Function&lt;TA;TR;&gt;;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="accumulator" jni-signature="()Lcom/annimon/stream/function/BiConsumer;" bridge="false" native="false" return="com.annimon.stream.function.BiConsumer&lt;A, T&gt;" jni-return="Lcom/annimon/stream/function/BiConsumer&lt;TA;TT;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="finisher" jni-signature="()Lcom/annimon/stream/function/Function;" bridge="false" native="false" return="com.annimon.stream.function.Function&lt;A, R&gt;" jni-return="Lcom/annimon/stream/function/Function&lt;TA;TR;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="supplier" jni-signature="()Lcom/annimon/stream/function/Supplier;" bridge="false" native="false" return="com.annimon.stream.function.Supplier&lt;A&gt;" jni-return="Lcom/annimon/stream/function/Supplier&lt;TA;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="true" name="Collectors.Tuple1" static="true" visibility="private" jni-signature="Lcom/annimon/stream/Collectors$Tuple1;">
      <typeParameters>
        <typeParameter name="A" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
      </typeParameters>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="true" name="Collectors.Tuple2" static="true" visibility="private" jni-signature="Lcom/annimon/stream/Collectors$Tuple2;">
      <typeParameters>
        <typeParameter name="A" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
      </typeParameters>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="true" name="ComparatorCompat" static="false" visibility="public" jni-signature="Lcom/annimon/stream/ComparatorCompat;">
      <implements name="java.util.Comparator" name-generic-aware="java.util.Comparator&lt;T&gt;" jni-type="Ljava/util/Comparator&lt;TT;&gt;;"></implements>
      <typeParameters>
        <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
      </typeParameters>
      <constructor deprecated="not deprecated" final="false" name="ComparatorCompat" jni-signature="(Ljava/util/Comparator;)V" bridge="false" static="false" type="com.annimon.stream.ComparatorCompat" synthetic="false" visibility="public">
        <parameter name="comparator" type="java.util.Comparator&lt;? super T&gt;" jni-type="Ljava/util/Comparator&lt;-TT;&gt;;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="chain" jni-signature="(Ljava/util/Comparator;)Lcom/annimon/stream/ComparatorCompat;" bridge="false" native="false" return="com.annimon.stream.ComparatorCompat&lt;T&gt;" jni-return="Lcom/annimon/stream/ComparatorCompat&lt;TT;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="comparator" type="java.util.Comparator&lt;T&gt;" jni-type="Ljava/util/Comparator&lt;TT;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="deprecated" final="false" name="comparator" jni-signature="()Ljava/util/Comparator;" bridge="false" native="false" return="java.util.Comparator&lt;T&gt;" jni-return="Ljava/util/Comparator&lt;TT;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="compare" jni-signature="(Ljava/lang/Object;Ljava/lang/Object;)I" bridge="false" native="false" return="int" jni-return="I" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="o1" type="T" jni-type="TT;"></parameter>
        <parameter name="o2" type="T" jni-type="TT;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="comparing" jni-signature="(Lcom/annimon/stream/function/Function;)Lcom/annimon/stream/ComparatorCompat;" bridge="false" native="false" return="com.annimon.stream.ComparatorCompat&lt;T&gt;" jni-return="Lcom/annimon/stream/ComparatorCompat&lt;TT;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
          <typeParameter name="U" interfaceBounds="java.lang.Comparable&lt;? super U&gt;" jni-interfaceBounds="Ljava/lang/Comparable&lt;-TU;&gt;;">
            <genericConstraints>
              <genericConstraint type="java.lang.Comparable&lt;? super U&gt;"></genericConstraint>
            </genericConstraints>
          </typeParameter>
        </typeParameters>
        <parameter name="keyExtractor" type="com.annimon.stream.function.Function&lt;? super T, ? extends U&gt;" jni-type="Lcom/annimon/stream/function/Function&lt;-TT;+TU;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="comparing" jni-signature="(Lcom/annimon/stream/function/Function;Ljava/util/Comparator;)Lcom/annimon/stream/ComparatorCompat;" bridge="false" native="false" return="com.annimon.stream.ComparatorCompat&lt;T&gt;" jni-return="Lcom/annimon/stream/ComparatorCompat&lt;TT;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
          <typeParameter name="U" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="keyExtractor" type="com.annimon.stream.function.Function&lt;? super T, ? extends U&gt;" jni-type="Lcom/annimon/stream/function/Function&lt;-TT;+TU;&gt;;"></parameter>
        <parameter name="keyComparator" type="java.util.Comparator&lt;? super U&gt;" jni-type="Ljava/util/Comparator&lt;-TU;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="comparingDouble" jni-signature="(Lcom/annimon/stream/function/ToDoubleFunction;)Lcom/annimon/stream/ComparatorCompat;" bridge="false" native="false" return="com.annimon.stream.ComparatorCompat&lt;T&gt;" jni-return="Lcom/annimon/stream/ComparatorCompat&lt;TT;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="keyExtractor" type="com.annimon.stream.function.ToDoubleFunction&lt;? super T&gt;" jni-type="Lcom/annimon/stream/function/ToDoubleFunction&lt;-TT;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="comparingInt" jni-signature="(Lcom/annimon/stream/function/ToIntFunction;)Lcom/annimon/stream/ComparatorCompat;" bridge="false" native="false" return="com.annimon.stream.ComparatorCompat&lt;T&gt;" jni-return="Lcom/annimon/stream/ComparatorCompat&lt;TT;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="keyExtractor" type="com.annimon.stream.function.ToIntFunction&lt;? super T&gt;" jni-type="Lcom/annimon/stream/function/ToIntFunction&lt;-TT;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="comparingLong" jni-signature="(Lcom/annimon/stream/function/ToLongFunction;)Lcom/annimon/stream/ComparatorCompat;" bridge="false" native="false" return="com.annimon.stream.ComparatorCompat&lt;T&gt;" jni-return="Lcom/annimon/stream/ComparatorCompat&lt;TT;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="keyExtractor" type="com.annimon.stream.function.ToLongFunction&lt;? super T&gt;" jni-type="Lcom/annimon/stream/function/ToLongFunction&lt;-TT;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="naturalOrder" jni-signature="()Lcom/annimon/stream/ComparatorCompat;" bridge="false" native="false" return="com.annimon.stream.ComparatorCompat&lt;T&gt;" jni-return="Lcom/annimon/stream/ComparatorCompat&lt;TT;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" interfaceBounds="java.lang.Comparable&lt;? super T&gt;" jni-interfaceBounds="Ljava/lang/Comparable&lt;-TT;&gt;;">
            <genericConstraints>
              <genericConstraint type="java.lang.Comparable&lt;? super T&gt;"></genericConstraint>
            </genericConstraints>
          </typeParameter>
        </typeParameters>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="nullsFirst" jni-signature="()Lcom/annimon/stream/ComparatorCompat;" bridge="false" native="false" return="com.annimon.stream.ComparatorCompat&lt;T&gt;" jni-return="Lcom/annimon/stream/ComparatorCompat&lt;TT;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="nullsFirst" jni-signature="(Ljava/util/Comparator;)Lcom/annimon/stream/ComparatorCompat;" bridge="false" native="false" return="com.annimon.stream.ComparatorCompat&lt;T&gt;" jni-return="Lcom/annimon/stream/ComparatorCompat&lt;TT;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="comparator" type="java.util.Comparator&lt;? super T&gt;" jni-type="Ljava/util/Comparator&lt;-TT;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="nullsLast" jni-signature="()Lcom/annimon/stream/ComparatorCompat;" bridge="false" native="false" return="com.annimon.stream.ComparatorCompat&lt;T&gt;" jni-return="Lcom/annimon/stream/ComparatorCompat&lt;TT;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="nullsLast" jni-signature="(Ljava/util/Comparator;)Lcom/annimon/stream/ComparatorCompat;" bridge="false" native="false" return="com.annimon.stream.ComparatorCompat&lt;T&gt;" jni-return="Lcom/annimon/stream/ComparatorCompat&lt;TT;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="comparator" type="java.util.Comparator&lt;? super T&gt;" jni-type="Ljava/util/Comparator&lt;-TT;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="reverseOrder" jni-signature="()Lcom/annimon/stream/ComparatorCompat;" bridge="false" native="false" return="com.annimon.stream.ComparatorCompat&lt;T&gt;" jni-return="Lcom/annimon/stream/ComparatorCompat&lt;TT;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" interfaceBounds="java.lang.Comparable&lt;? super T&gt;" jni-interfaceBounds="Ljava/lang/Comparable&lt;-TT;&gt;;">
            <genericConstraints>
              <genericConstraint type="java.lang.Comparable&lt;? super T&gt;"></genericConstraint>
            </genericConstraints>
          </typeParameter>
        </typeParameters>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="reversed" jni-signature="()Lcom/annimon/stream/ComparatorCompat;" bridge="false" native="false" return="com.annimon.stream.ComparatorCompat&lt;T&gt;" jni-return="Lcom/annimon/stream/ComparatorCompat&lt;TT;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="reversed" jni-signature="(Ljava/util/Comparator;)Ljava/util/Comparator;" bridge="false" native="false" return="java.util.Comparator&lt;T&gt;" jni-return="Ljava/util/Comparator&lt;TT;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="comparator" type="java.util.Comparator&lt;T&gt;" jni-type="Ljava/util/Comparator&lt;TT;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="thenComparing" jni-signature="(Lcom/annimon/stream/function/Function;)Lcom/annimon/stream/ComparatorCompat;" bridge="false" native="false" return="com.annimon.stream.ComparatorCompat&lt;T&gt;" jni-return="Lcom/annimon/stream/ComparatorCompat&lt;TT;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="U" interfaceBounds="java.lang.Comparable&lt;? super U&gt;" jni-interfaceBounds="Ljava/lang/Comparable&lt;-TU;&gt;;">
            <genericConstraints>
              <genericConstraint type="java.lang.Comparable&lt;? super U&gt;"></genericConstraint>
            </genericConstraints>
          </typeParameter>
        </typeParameters>
        <parameter name="keyExtractor" type="com.annimon.stream.function.Function&lt;? super T, ? extends U&gt;" jni-type="Lcom/annimon/stream/function/Function&lt;-TT;+TU;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="thenComparing" jni-signature="(Lcom/annimon/stream/function/Function;Ljava/util/Comparator;)Lcom/annimon/stream/ComparatorCompat;" bridge="false" native="false" return="com.annimon.stream.ComparatorCompat&lt;T&gt;" jni-return="Lcom/annimon/stream/ComparatorCompat&lt;TT;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="U" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="keyExtractor" type="com.annimon.stream.function.Function&lt;? super T, ? extends U&gt;" jni-type="Lcom/annimon/stream/function/Function&lt;-TT;+TU;&gt;;"></parameter>
        <parameter name="keyComparator" type="java.util.Comparator&lt;? super U&gt;" jni-type="Ljava/util/Comparator&lt;-TU;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="thenComparing" jni-signature="(Ljava/util/Comparator;)Lcom/annimon/stream/ComparatorCompat;" bridge="false" native="false" return="com.annimon.stream.ComparatorCompat&lt;T&gt;" jni-return="Lcom/annimon/stream/ComparatorCompat&lt;TT;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="other" type="java.util.Comparator&lt;? super T&gt;" jni-type="Ljava/util/Comparator&lt;-TT;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="thenComparing" jni-signature="(Ljava/util/Comparator;Ljava/util/Comparator;)Ljava/util/Comparator;" bridge="false" native="false" return="java.util.Comparator&lt;T&gt;" jni-return="Ljava/util/Comparator&lt;TT;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="c1" type="java.util.Comparator&lt;? super T&gt;" jni-type="Ljava/util/Comparator&lt;-TT;&gt;;"></parameter>
        <parameter name="c2" type="java.util.Comparator&lt;? super T&gt;" jni-type="Ljava/util/Comparator&lt;-TT;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="thenComparingDouble" jni-signature="(Lcom/annimon/stream/function/ToDoubleFunction;)Lcom/annimon/stream/ComparatorCompat;" bridge="false" native="false" return="com.annimon.stream.ComparatorCompat&lt;T&gt;" jni-return="Lcom/annimon/stream/ComparatorCompat&lt;TT;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="keyExtractor" type="com.annimon.stream.function.ToDoubleFunction&lt;? super T&gt;" jni-type="Lcom/annimon/stream/function/ToDoubleFunction&lt;-TT;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="thenComparingInt" jni-signature="(Lcom/annimon/stream/function/ToIntFunction;)Lcom/annimon/stream/ComparatorCompat;" bridge="false" native="false" return="com.annimon.stream.ComparatorCompat&lt;T&gt;" jni-return="Lcom/annimon/stream/ComparatorCompat&lt;TT;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="keyExtractor" type="com.annimon.stream.function.ToIntFunction&lt;? super T&gt;" jni-type="Lcom/annimon/stream/function/ToIntFunction&lt;-TT;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="thenComparingLong" jni-signature="(Lcom/annimon/stream/function/ToLongFunction;)Lcom/annimon/stream/ComparatorCompat;" bridge="false" native="false" return="com.annimon.stream.ComparatorCompat&lt;T&gt;" jni-return="Lcom/annimon/stream/ComparatorCompat&lt;TT;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="keyExtractor" type="com.annimon.stream.function.ToLongFunction&lt;? super T&gt;" jni-type="Lcom/annimon/stream/function/ToLongFunction&lt;-TT;&gt;;"></parameter>
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="true" name="ComparatorCompat.1" static="true" visibility="" jni-signature="Lcom/annimon/stream/ComparatorCompat$1;">
      <implements name="java.util.Comparator" name-generic-aware="java.util.Comparator&lt;java.lang.Comparable&lt;java.lang.Object&gt;&gt;" jni-type="Ljava/util/Comparator&lt;Ljava/lang/Comparable&lt;Ljava/lang/Object;&gt;;&gt;;"></implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="compare" jni-signature="(Ljava/lang/Comparable;Ljava/lang/Comparable;)I" bridge="false" native="false" return="int" jni-return="I" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="o1" type="java.lang.Comparable&lt;java.lang.Object&gt;" jni-type="Ljava/lang/Comparable&lt;Ljava/lang/Object;&gt;;"></parameter>
        <parameter name="o2" type="java.lang.Comparable&lt;java.lang.Object&gt;" jni-type="Ljava/lang/Comparable&lt;Ljava/lang/Object;&gt;;"></parameter>
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="true" name="DoubleStream" static="false" visibility="public" jni-signature="Lcom/annimon/stream/DoubleStream;">
      <implements name="java.io.Closeable" name-generic-aware="java.io.Closeable" jni-type="Ljava/io/Closeable;"></implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="allMatch" jni-signature="(Lcom/annimon/stream/function/DoublePredicate;)Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="predicate" type="com.annimon.stream.function.DoublePredicate" jni-type="Lcom/annimon/stream/function/DoublePredicate;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="anyMatch" jni-signature="(Lcom/annimon/stream/function/DoublePredicate;)Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="predicate" type="com.annimon.stream.function.DoublePredicate" jni-type="Lcom/annimon/stream/function/DoublePredicate;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="average" jni-signature="()Lcom/annimon/stream/OptionalDouble;" bridge="false" native="false" return="com.annimon.stream.OptionalDouble" jni-return="Lcom/annimon/stream/OptionalDouble;" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="boxed" jni-signature="()Lcom/annimon/stream/Stream;" bridge="false" native="false" return="com.annimon.stream.Stream&lt;java.lang.Double&gt;" jni-return="Lcom/annimon/stream/Stream&lt;Ljava/lang/Double;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="close" jni-signature="()V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="collect" jni-signature="(Lcom/annimon/stream/function/Supplier;Lcom/annimon/stream/function/ObjDoubleConsumer;)Ljava/lang/Object;" bridge="false" native="false" return="R" jni-return="TR;" static="false" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="R" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="supplier" type="com.annimon.stream.function.Supplier&lt;R&gt;" jni-type="Lcom/annimon/stream/function/Supplier&lt;TR;&gt;;"></parameter>
        <parameter name="accumulator" type="com.annimon.stream.function.ObjDoubleConsumer&lt;R&gt;" jni-type="Lcom/annimon/stream/function/ObjDoubleConsumer&lt;TR;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="concat" jni-signature="(Lcom/annimon/stream/DoubleStream;Lcom/annimon/stream/DoubleStream;)Lcom/annimon/stream/DoubleStream;" bridge="false" native="false" return="com.annimon.stream.DoubleStream" jni-return="Lcom/annimon/stream/DoubleStream;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="a" type="com.annimon.stream.DoubleStream" jni-type="Lcom/annimon/stream/DoubleStream;"></parameter>
        <parameter name="b" type="com.annimon.stream.DoubleStream" jni-type="Lcom/annimon/stream/DoubleStream;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="count" jni-signature="()J" bridge="false" native="false" return="long" jni-return="J" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="custom" jni-signature="(Lcom/annimon/stream/function/Function;)Ljava/lang/Object;" bridge="false" native="false" return="R" jni-return="TR;" static="false" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="R" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="function" type="com.annimon.stream.function.Function&lt;com.annimon.stream.DoubleStream, R&gt;" jni-type="Lcom/annimon/stream/function/Function&lt;Lcom/annimon/stream/DoubleStream;TR;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="distinct" jni-signature="()Lcom/annimon/stream/DoubleStream;" bridge="false" native="false" return="com.annimon.stream.DoubleStream" jni-return="Lcom/annimon/stream/DoubleStream;" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="dropWhile" jni-signature="(Lcom/annimon/stream/function/DoublePredicate;)Lcom/annimon/stream/DoubleStream;" bridge="false" native="false" return="com.annimon.stream.DoubleStream" jni-return="Lcom/annimon/stream/DoubleStream;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="predicate" type="com.annimon.stream.function.DoublePredicate" jni-type="Lcom/annimon/stream/function/DoublePredicate;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="empty" jni-signature="()Lcom/annimon/stream/DoubleStream;" bridge="false" native="false" return="com.annimon.stream.DoubleStream" jni-return="Lcom/annimon/stream/DoubleStream;" static="true" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="filter" jni-signature="(Lcom/annimon/stream/function/DoublePredicate;)Lcom/annimon/stream/DoubleStream;" bridge="false" native="false" return="com.annimon.stream.DoubleStream" jni-return="Lcom/annimon/stream/DoubleStream;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="predicate" type="com.annimon.stream.function.DoublePredicate" jni-type="Lcom/annimon/stream/function/DoublePredicate;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="filterIndexed" jni-signature="(Lcom/annimon/stream/function/IndexedDoublePredicate;)Lcom/annimon/stream/DoubleStream;" bridge="false" native="false" return="com.annimon.stream.DoubleStream" jni-return="Lcom/annimon/stream/DoubleStream;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="predicate" type="com.annimon.stream.function.IndexedDoublePredicate" jni-type="Lcom/annimon/stream/function/IndexedDoublePredicate;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="filterIndexed" jni-signature="(IILcom/annimon/stream/function/IndexedDoublePredicate;)Lcom/annimon/stream/DoubleStream;" bridge="false" native="false" return="com.annimon.stream.DoubleStream" jni-return="Lcom/annimon/stream/DoubleStream;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="from" type="int" jni-type="I"></parameter>
        <parameter name="step" type="int" jni-type="I"></parameter>
        <parameter name="predicate" type="com.annimon.stream.function.IndexedDoublePredicate" jni-type="Lcom/annimon/stream/function/IndexedDoublePredicate;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="filterNot" jni-signature="(Lcom/annimon/stream/function/DoublePredicate;)Lcom/annimon/stream/DoubleStream;" bridge="false" native="false" return="com.annimon.stream.DoubleStream" jni-return="Lcom/annimon/stream/DoubleStream;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="predicate" type="com.annimon.stream.function.DoublePredicate" jni-type="Lcom/annimon/stream/function/DoublePredicate;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="findFirst" jni-signature="()Lcom/annimon/stream/OptionalDouble;" bridge="false" native="false" return="com.annimon.stream.OptionalDouble" jni-return="Lcom/annimon/stream/OptionalDouble;" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="findLast" jni-signature="()Lcom/annimon/stream/OptionalDouble;" bridge="false" native="false" return="com.annimon.stream.OptionalDouble" jni-return="Lcom/annimon/stream/OptionalDouble;" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="findSingle" jni-signature="()Lcom/annimon/stream/OptionalDouble;" bridge="false" native="false" return="com.annimon.stream.OptionalDouble" jni-return="Lcom/annimon/stream/OptionalDouble;" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="flatMap" jni-signature="(Lcom/annimon/stream/function/DoubleFunction;)Lcom/annimon/stream/DoubleStream;" bridge="false" native="false" return="com.annimon.stream.DoubleStream" jni-return="Lcom/annimon/stream/DoubleStream;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="mapper" type="com.annimon.stream.function.DoubleFunction&lt;? extends com.annimon.stream.DoubleStream&gt;" jni-type="Lcom/annimon/stream/function/DoubleFunction&lt;+Lcom/annimon/stream/DoubleStream;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="forEach" jni-signature="(Lcom/annimon/stream/function/DoubleConsumer;)V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="action" type="com.annimon.stream.function.DoubleConsumer" jni-type="Lcom/annimon/stream/function/DoubleConsumer;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="forEachIndexed" jni-signature="(Lcom/annimon/stream/function/IndexedDoubleConsumer;)V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="action" type="com.annimon.stream.function.IndexedDoubleConsumer" jni-type="Lcom/annimon/stream/function/IndexedDoubleConsumer;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="forEachIndexed" jni-signature="(IILcom/annimon/stream/function/IndexedDoubleConsumer;)V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="from" type="int" jni-type="I"></parameter>
        <parameter name="step" type="int" jni-type="I"></parameter>
        <parameter name="action" type="com.annimon.stream.function.IndexedDoubleConsumer" jni-type="Lcom/annimon/stream/function/IndexedDoubleConsumer;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="generate" jni-signature="(Lcom/annimon/stream/function/DoubleSupplier;)Lcom/annimon/stream/DoubleStream;" bridge="false" native="false" return="com.annimon.stream.DoubleStream" jni-return="Lcom/annimon/stream/DoubleStream;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="s" type="com.annimon.stream.function.DoubleSupplier" jni-type="Lcom/annimon/stream/function/DoubleSupplier;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="iterate" jni-signature="(DLcom/annimon/stream/function/DoublePredicate;Lcom/annimon/stream/function/DoubleUnaryOperator;)Lcom/annimon/stream/DoubleStream;" bridge="false" native="false" return="com.annimon.stream.DoubleStream" jni-return="Lcom/annimon/stream/DoubleStream;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="seed" type="double" jni-type="D"></parameter>
        <parameter name="predicate" type="com.annimon.stream.function.DoublePredicate" jni-type="Lcom/annimon/stream/function/DoublePredicate;"></parameter>
        <parameter name="op" type="com.annimon.stream.function.DoubleUnaryOperator" jni-type="Lcom/annimon/stream/function/DoubleUnaryOperator;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="iterate" jni-signature="(DLcom/annimon/stream/function/DoubleUnaryOperator;)Lcom/annimon/stream/DoubleStream;" bridge="false" native="false" return="com.annimon.stream.DoubleStream" jni-return="Lcom/annimon/stream/DoubleStream;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="seed" type="double" jni-type="D"></parameter>
        <parameter name="f" type="com.annimon.stream.function.DoubleUnaryOperator" jni-type="Lcom/annimon/stream/function/DoubleUnaryOperator;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="iterator" jni-signature="()Lcom/annimon/stream/iterator/PrimitiveIterator$OfDouble;" bridge="false" native="false" return="com.annimon.stream.iterator.PrimitiveIterator.OfDouble" jni-return="Lcom/annimon/stream/iterator/PrimitiveIterator$OfDouble;" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="limit" jni-signature="(J)Lcom/annimon/stream/DoubleStream;" bridge="false" native="false" return="com.annimon.stream.DoubleStream" jni-return="Lcom/annimon/stream/DoubleStream;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="maxSize" type="long" jni-type="J"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="map" jni-signature="(Lcom/annimon/stream/function/DoubleUnaryOperator;)Lcom/annimon/stream/DoubleStream;" bridge="false" native="false" return="com.annimon.stream.DoubleStream" jni-return="Lcom/annimon/stream/DoubleStream;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="mapper" type="com.annimon.stream.function.DoubleUnaryOperator" jni-type="Lcom/annimon/stream/function/DoubleUnaryOperator;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="mapIndexed" jni-signature="(Lcom/annimon/stream/function/IndexedDoubleUnaryOperator;)Lcom/annimon/stream/DoubleStream;" bridge="false" native="false" return="com.annimon.stream.DoubleStream" jni-return="Lcom/annimon/stream/DoubleStream;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="mapper" type="com.annimon.stream.function.IndexedDoubleUnaryOperator" jni-type="Lcom/annimon/stream/function/IndexedDoubleUnaryOperator;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="mapIndexed" jni-signature="(IILcom/annimon/stream/function/IndexedDoubleUnaryOperator;)Lcom/annimon/stream/DoubleStream;" bridge="false" native="false" return="com.annimon.stream.DoubleStream" jni-return="Lcom/annimon/stream/DoubleStream;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="from" type="int" jni-type="I"></parameter>
        <parameter name="step" type="int" jni-type="I"></parameter>
        <parameter name="mapper" type="com.annimon.stream.function.IndexedDoubleUnaryOperator" jni-type="Lcom/annimon/stream/function/IndexedDoubleUnaryOperator;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="mapToInt" jni-signature="(Lcom/annimon/stream/function/DoubleToIntFunction;)Lcom/annimon/stream/IntStream;" bridge="false" native="false" return="com.annimon.stream.IntStream" jni-return="Lcom/annimon/stream/IntStream;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="mapper" type="com.annimon.stream.function.DoubleToIntFunction" jni-type="Lcom/annimon/stream/function/DoubleToIntFunction;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="mapToLong" jni-signature="(Lcom/annimon/stream/function/DoubleToLongFunction;)Lcom/annimon/stream/LongStream;" bridge="false" native="false" return="com.annimon.stream.LongStream" jni-return="Lcom/annimon/stream/LongStream;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="mapper" type="com.annimon.stream.function.DoubleToLongFunction" jni-type="Lcom/annimon/stream/function/DoubleToLongFunction;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="mapToObj" jni-signature="(Lcom/annimon/stream/function/DoubleFunction;)Lcom/annimon/stream/Stream;" bridge="false" native="false" return="com.annimon.stream.Stream&lt;R&gt;" jni-return="Lcom/annimon/stream/Stream&lt;TR;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="R" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="mapper" type="com.annimon.stream.function.DoubleFunction&lt;? extends R&gt;" jni-type="Lcom/annimon/stream/function/DoubleFunction&lt;+TR;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="max" jni-signature="()Lcom/annimon/stream/OptionalDouble;" bridge="false" native="false" return="com.annimon.stream.OptionalDouble" jni-return="Lcom/annimon/stream/OptionalDouble;" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="min" jni-signature="()Lcom/annimon/stream/OptionalDouble;" bridge="false" native="false" return="com.annimon.stream.OptionalDouble" jni-return="Lcom/annimon/stream/OptionalDouble;" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="noneMatch" jni-signature="(Lcom/annimon/stream/function/DoublePredicate;)Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="predicate" type="com.annimon.stream.function.DoublePredicate" jni-type="Lcom/annimon/stream/function/DoublePredicate;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="of" jni-signature="(Lcom/annimon/stream/iterator/PrimitiveIterator$OfDouble;)Lcom/annimon/stream/DoubleStream;" bridge="false" native="false" return="com.annimon.stream.DoubleStream" jni-return="Lcom/annimon/stream/DoubleStream;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="iterator" type="com.annimon.stream.iterator.PrimitiveIterator.OfDouble" jni-type="Lcom/annimon/stream/iterator/PrimitiveIterator$OfDouble;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="of" jni-signature="(D)Lcom/annimon/stream/DoubleStream;" bridge="false" native="false" return="com.annimon.stream.DoubleStream" jni-return="Lcom/annimon/stream/DoubleStream;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="t" type="double" jni-type="D"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="of" jni-signature="([D)Lcom/annimon/stream/DoubleStream;" bridge="false" native="false" return="com.annimon.stream.DoubleStream" jni-return="Lcom/annimon/stream/DoubleStream;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="values" type="double..." jni-type="[D"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="onClose" jni-signature="(Ljava/lang/Runnable;)Lcom/annimon/stream/DoubleStream;" bridge="false" native="false" return="com.annimon.stream.DoubleStream" jni-return="Lcom/annimon/stream/DoubleStream;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="closeHandler" type="java.lang.Runnable" jni-type="Ljava/lang/Runnable;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="peek" jni-signature="(Lcom/annimon/stream/function/DoubleConsumer;)Lcom/annimon/stream/DoubleStream;" bridge="false" native="false" return="com.annimon.stream.DoubleStream" jni-return="Lcom/annimon/stream/DoubleStream;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="action" type="com.annimon.stream.function.DoubleConsumer" jni-type="Lcom/annimon/stream/function/DoubleConsumer;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="reduce" jni-signature="(Lcom/annimon/stream/function/DoubleBinaryOperator;)Lcom/annimon/stream/OptionalDouble;" bridge="false" native="false" return="com.annimon.stream.OptionalDouble" jni-return="Lcom/annimon/stream/OptionalDouble;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="accumulator" type="com.annimon.stream.function.DoubleBinaryOperator" jni-type="Lcom/annimon/stream/function/DoubleBinaryOperator;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="reduce" jni-signature="(DLcom/annimon/stream/function/DoubleBinaryOperator;)D" bridge="false" native="false" return="double" jni-return="D" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="identity" type="double" jni-type="D"></parameter>
        <parameter name="accumulator" type="com.annimon.stream.function.DoubleBinaryOperator" jni-type="Lcom/annimon/stream/function/DoubleBinaryOperator;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="sample" jni-signature="(I)Lcom/annimon/stream/DoubleStream;" bridge="false" native="false" return="com.annimon.stream.DoubleStream" jni-return="Lcom/annimon/stream/DoubleStream;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="stepWidth" type="int" jni-type="I"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="scan" jni-signature="(Lcom/annimon/stream/function/DoubleBinaryOperator;)Lcom/annimon/stream/DoubleStream;" bridge="false" native="false" return="com.annimon.stream.DoubleStream" jni-return="Lcom/annimon/stream/DoubleStream;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="accumulator" type="com.annimon.stream.function.DoubleBinaryOperator" jni-type="Lcom/annimon/stream/function/DoubleBinaryOperator;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="scan" jni-signature="(DLcom/annimon/stream/function/DoubleBinaryOperator;)Lcom/annimon/stream/DoubleStream;" bridge="false" native="false" return="com.annimon.stream.DoubleStream" jni-return="Lcom/annimon/stream/DoubleStream;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="identity" type="double" jni-type="D"></parameter>
        <parameter name="accumulator" type="com.annimon.stream.function.DoubleBinaryOperator" jni-type="Lcom/annimon/stream/function/DoubleBinaryOperator;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="single" jni-signature="()D" bridge="false" native="false" return="double" jni-return="D" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="skip" jni-signature="(J)Lcom/annimon/stream/DoubleStream;" bridge="false" native="false" return="com.annimon.stream.DoubleStream" jni-return="Lcom/annimon/stream/DoubleStream;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="n" type="long" jni-type="J"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="sorted" jni-signature="()Lcom/annimon/stream/DoubleStream;" bridge="false" native="false" return="com.annimon.stream.DoubleStream" jni-return="Lcom/annimon/stream/DoubleStream;" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="sorted" jni-signature="(Ljava/util/Comparator;)Lcom/annimon/stream/DoubleStream;" bridge="false" native="false" return="com.annimon.stream.DoubleStream" jni-return="Lcom/annimon/stream/DoubleStream;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="comparator" type="java.util.Comparator&lt;java.lang.Double&gt;" jni-type="Ljava/util/Comparator&lt;Ljava/lang/Double;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="sum" jni-signature="()D" bridge="false" native="false" return="double" jni-return="D" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="takeUntil" jni-signature="(Lcom/annimon/stream/function/DoublePredicate;)Lcom/annimon/stream/DoubleStream;" bridge="false" native="false" return="com.annimon.stream.DoubleStream" jni-return="Lcom/annimon/stream/DoubleStream;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="stopPredicate" type="com.annimon.stream.function.DoublePredicate" jni-type="Lcom/annimon/stream/function/DoublePredicate;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="takeWhile" jni-signature="(Lcom/annimon/stream/function/DoublePredicate;)Lcom/annimon/stream/DoubleStream;" bridge="false" native="false" return="com.annimon.stream.DoubleStream" jni-return="Lcom/annimon/stream/DoubleStream;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="predicate" type="com.annimon.stream.function.DoublePredicate" jni-type="Lcom/annimon/stream/function/DoublePredicate;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="toArray" jni-signature="()[D" bridge="false" native="false" return="double[]" jni-return="[D" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.PrimitiveIterator.OfDouble" extends-generic-aware="com.annimon.stream.iterator.PrimitiveIterator.OfDouble" jni-extends="Lcom/annimon/stream/iterator/PrimitiveIterator$OfDouble;" final="true" name="DoubleStream.1" static="true" visibility="" jni-signature="Lcom/annimon/stream/DoubleStream$1;">
      <method abstract="false" deprecated="not deprecated" final="false" name="hasNext" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextDouble" jni-signature="()D" bridge="false" native="false" return="double" jni-return="D" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="false" name="DoubleStream.2" static="false" visibility="" jni-signature="Lcom/annimon/stream/DoubleStream$2;">
      <implements name="com.annimon.stream.function.DoubleBinaryOperator" name-generic-aware="com.annimon.stream.function.DoubleBinaryOperator" jni-type="Lcom/annimon/stream/function/DoubleBinaryOperator;"></implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="applyAsDouble" jni-signature="(DD)D" bridge="false" native="false" return="double" jni-return="D" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="left" type="double" jni-type="D"></parameter>
        <parameter name="right" type="double" jni-type="D"></parameter>
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="false" name="DoubleStream.3" static="false" visibility="" jni-signature="Lcom/annimon/stream/DoubleStream$3;">
      <implements name="com.annimon.stream.function.DoubleBinaryOperator" name-generic-aware="com.annimon.stream.function.DoubleBinaryOperator" jni-type="Lcom/annimon/stream/function/DoubleBinaryOperator;"></implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="applyAsDouble" jni-signature="(DD)D" bridge="false" native="false" return="double" jni-return="D" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="left" type="double" jni-type="D"></parameter>
        <parameter name="right" type="double" jni-type="D"></parameter>
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="false" name="DoubleStream.4" static="false" visibility="" jni-signature="Lcom/annimon/stream/DoubleStream$4;">
      <implements name="com.annimon.stream.function.DoubleBinaryOperator" name-generic-aware="com.annimon.stream.function.DoubleBinaryOperator" jni-type="Lcom/annimon/stream/function/DoubleBinaryOperator;"></implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="applyAsDouble" jni-signature="(DD)D" bridge="false" native="false" return="double" jni-return="D" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="left" type="double" jni-type="D"></parameter>
        <parameter name="right" type="double" jni-type="D"></parameter>
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="true" name="DoubleStream.5" static="true" visibility="" jni-signature="Lcom/annimon/stream/DoubleStream$5;">
      <implements name="com.annimon.stream.function.ToDoubleFunction" name-generic-aware="com.annimon.stream.function.ToDoubleFunction&lt;java.lang.Double&gt;" jni-type="Lcom/annimon/stream/function/ToDoubleFunction&lt;Ljava/lang/Double;&gt;;"></implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="applyAsDouble" jni-signature="(Ljava/lang/Double;)D" bridge="false" native="false" return="double" jni-return="D" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="t" type="java.lang.Double" jni-type="Ljava/lang/Double;"></parameter>
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="false" name="Exceptional" static="false" visibility="public" jni-signature="Lcom/annimon/stream/Exceptional;">
      <typeParameters>
        <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
      </typeParameters>
      <method abstract="false" deprecated="not deprecated" final="false" name="custom" jni-signature="(Lcom/annimon/stream/function/Function;)Ljava/lang/Object;" bridge="false" native="false" return="R" jni-return="TR;" static="false" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="R" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="function" type="com.annimon.stream.function.Function&lt;com.annimon.stream.Exceptional&lt;T&gt;, R&gt;" jni-type="Lcom/annimon/stream/function/Function&lt;Lcom/annimon/stream/Exceptional&lt;TT;&gt;;TR;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="get" jni-signature="()Ljava/lang/Object;" bridge="false" native="false" return="T" jni-return="TT;" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="getException" jni-signature="()Ljava/lang/Throwable;" bridge="false" native="false" return="java.lang.Throwable" jni-return="Ljava/lang/Throwable;" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="getOptional" jni-signature="()Lcom/annimon/stream/Optional;" bridge="false" native="false" return="com.annimon.stream.Optional&lt;T&gt;" jni-return="Lcom/annimon/stream/Optional&lt;TT;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="getOrElse" jni-signature="(Lcom/annimon/stream/function/Supplier;)Ljava/lang/Object;" bridge="false" native="false" return="T" jni-return="TT;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="other" type="com.annimon.stream.function.Supplier&lt;? extends T&gt;" jni-type="Lcom/annimon/stream/function/Supplier&lt;+TT;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="getOrElse" jni-signature="(Ljava/lang/Object;)Ljava/lang/Object;" bridge="false" native="false" return="T" jni-return="TT;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="other" type="T" jni-type="TT;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="getOrThrow" jni-signature="()Ljava/lang/Object;" bridge="false" native="false" return="T" jni-return="TT;" static="false" synchronized="false" synthetic="false" visibility="public">
        <exception name="Throwable" type="java.lang.Throwable"></exception>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="getOrThrow" jni-signature="(Ljava/lang/Throwable;)Ljava/lang/Object;" bridge="false" native="false" return="T" jni-return="TT;" static="false" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="E" classBound="java.lang.Throwable" jni-classBound="Ljava/lang/Throwable;">
            <genericConstraints>
              <genericConstraint type="java.lang.Throwable"></genericConstraint>
            </genericConstraints>
          </typeParameter>
        </typeParameters>
        <parameter name="exception" type="E" jni-type="TE;"></parameter>
        <exception name="Throwable" type="E"></exception>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="getOrThrowRuntimeException" jni-signature="()Ljava/lang/Object;" bridge="false" native="false" return="T" jni-return="TT;" static="false" synchronized="false" synthetic="false" visibility="public">
        <exception name="RuntimeException" type="java.lang.RuntimeException"></exception>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="ifException" jni-signature="(Lcom/annimon/stream/function/Consumer;)Lcom/annimon/stream/Exceptional;" bridge="false" native="false" return="com.annimon.stream.Exceptional&lt;T&gt;" jni-return="Lcom/annimon/stream/Exceptional&lt;TT;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="consumer" type="com.annimon.stream.function.Consumer&lt;java.lang.Throwable&gt;" jni-type="Lcom/annimon/stream/function/Consumer&lt;Ljava/lang/Throwable;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="ifExceptionIs" jni-signature="(Ljava/lang/Class;Lcom/annimon/stream/function/Consumer;)Lcom/annimon/stream/Exceptional;" bridge="false" native="false" return="com.annimon.stream.Exceptional&lt;T&gt;" jni-return="Lcom/annimon/stream/Exceptional&lt;TT;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="E" classBound="java.lang.Throwable" jni-classBound="Ljava/lang/Throwable;">
            <genericConstraints>
              <genericConstraint type="java.lang.Throwable"></genericConstraint>
            </genericConstraints>
          </typeParameter>
        </typeParameters>
        <parameter name="throwableClass" type="java.lang.Class&lt;E&gt;" jni-type="Ljava/lang/Class&lt;TE;&gt;;"></parameter>
        <parameter name="consumer" type="com.annimon.stream.function.Consumer&lt;? super E&gt;" jni-type="Lcom/annimon/stream/function/Consumer&lt;-TE;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="ifPresent" jni-signature="(Lcom/annimon/stream/function/Consumer;)Lcom/annimon/stream/Exceptional;" bridge="false" native="false" return="com.annimon.stream.Exceptional&lt;T&gt;" jni-return="Lcom/annimon/stream/Exceptional&lt;TT;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="consumer" type="com.annimon.stream.function.Consumer&lt;? super T&gt;" jni-type="Lcom/annimon/stream/function/Consumer&lt;-TT;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="isPresent" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="map" jni-signature="(Lcom/annimon/stream/function/ThrowableFunction;)Lcom/annimon/stream/Exceptional;" bridge="false" native="false" return="com.annimon.stream.Exceptional&lt;U&gt;" jni-return="Lcom/annimon/stream/Exceptional&lt;TU;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="U" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="mapper" type="com.annimon.stream.function.ThrowableFunction&lt;? super T, ? extends U, java.lang.Throwable&gt;" jni-type="Lcom/annimon/stream/function/ThrowableFunction&lt;-TT;+TU;Ljava/lang/Throwable;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="of" jni-signature="(Lcom/annimon/stream/function/ThrowableSupplier;)Lcom/annimon/stream/Exceptional;" bridge="false" native="false" return="com.annimon.stream.Exceptional&lt;T&gt;" jni-return="Lcom/annimon/stream/Exceptional&lt;TT;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="supplier" type="com.annimon.stream.function.ThrowableSupplier&lt;T, java.lang.Throwable&gt;" jni-type="Lcom/annimon/stream/function/ThrowableSupplier&lt;TT;Ljava/lang/Throwable;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="of" jni-signature="(Ljava/lang/Throwable;)Lcom/annimon/stream/Exceptional;" bridge="false" native="false" return="com.annimon.stream.Exceptional&lt;T&gt;" jni-return="Lcom/annimon/stream/Exceptional&lt;TT;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="throwable" type="java.lang.Throwable" jni-type="Ljava/lang/Throwable;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="or" jni-signature="(Lcom/annimon/stream/function/Supplier;)Lcom/annimon/stream/Exceptional;" bridge="false" native="false" return="com.annimon.stream.Exceptional&lt;T&gt;" jni-return="Lcom/annimon/stream/Exceptional&lt;TT;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="supplier" type="com.annimon.stream.function.Supplier&lt;com.annimon.stream.Exceptional&lt;T&gt;&gt;" jni-type="Lcom/annimon/stream/function/Supplier&lt;Lcom/annimon/stream/Exceptional&lt;TT;&gt;;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="recover" jni-signature="(Lcom/annimon/stream/function/ThrowableFunction;)Lcom/annimon/stream/Exceptional;" bridge="false" native="false" return="com.annimon.stream.Exceptional&lt;T&gt;" jni-return="Lcom/annimon/stream/Exceptional&lt;TT;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="function" type="com.annimon.stream.function.ThrowableFunction&lt;java.lang.Throwable, ? extends T, java.lang.Throwable&gt;" jni-type="Lcom/annimon/stream/function/ThrowableFunction&lt;Ljava/lang/Throwable;+TT;Ljava/lang/Throwable;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="recoverWith" jni-signature="(Lcom/annimon/stream/function/Function;)Lcom/annimon/stream/Exceptional;" bridge="false" native="false" return="com.annimon.stream.Exceptional&lt;T&gt;" jni-return="Lcom/annimon/stream/Exceptional&lt;TT;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="function" type="com.annimon.stream.function.Function&lt;java.lang.Throwable, ? extends com.annimon.stream.Exceptional&lt;T&gt;&gt;" jni-type="Lcom/annimon/stream/function/Function&lt;Ljava/lang/Throwable;+Lcom/annimon/stream/Exceptional&lt;TT;&gt;;&gt;;"></parameter>
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="true" name="IntPair" static="false" visibility="public" jni-signature="Lcom/annimon/stream/IntPair;">
      <typeParameters>
        <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
      </typeParameters>
      <constructor deprecated="not deprecated" final="false" name="IntPair" jni-signature="(ILjava/lang/Object;)V" bridge="false" static="false" type="com.annimon.stream.IntPair" synthetic="false" visibility="public">
        <parameter name="first" type="int" jni-type="I"></parameter>
        <parameter name="second" type="T" jni-type="TT;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="getFirst" jni-signature="()I" bridge="false" native="false" return="int" jni-return="I" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="getSecond" jni-signature="()Ljava/lang/Object;" bridge="false" native="false" return="T" jni-return="TT;" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="true" name="IntStream" static="false" visibility="public" jni-signature="Lcom/annimon/stream/IntStream;">
      <implements name="java.io.Closeable" name-generic-aware="java.io.Closeable" jni-type="Ljava/io/Closeable;"></implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="allMatch" jni-signature="(Lcom/annimon/stream/function/IntPredicate;)Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="predicate" type="com.annimon.stream.function.IntPredicate" jni-type="Lcom/annimon/stream/function/IntPredicate;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="anyMatch" jni-signature="(Lcom/annimon/stream/function/IntPredicate;)Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="predicate" type="com.annimon.stream.function.IntPredicate" jni-type="Lcom/annimon/stream/function/IntPredicate;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="boxed" jni-signature="()Lcom/annimon/stream/Stream;" bridge="false" native="false" return="com.annimon.stream.Stream&lt;java.lang.Integer&gt;" jni-return="Lcom/annimon/stream/Stream&lt;Ljava/lang/Integer;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="close" jni-signature="()V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="collect" jni-signature="(Lcom/annimon/stream/function/Supplier;Lcom/annimon/stream/function/ObjIntConsumer;)Ljava/lang/Object;" bridge="false" native="false" return="R" jni-return="TR;" static="false" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="R" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="supplier" type="com.annimon.stream.function.Supplier&lt;R&gt;" jni-type="Lcom/annimon/stream/function/Supplier&lt;TR;&gt;;"></parameter>
        <parameter name="accumulator" type="com.annimon.stream.function.ObjIntConsumer&lt;R&gt;" jni-type="Lcom/annimon/stream/function/ObjIntConsumer&lt;TR;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="concat" jni-signature="(Lcom/annimon/stream/IntStream;Lcom/annimon/stream/IntStream;)Lcom/annimon/stream/IntStream;" bridge="false" native="false" return="com.annimon.stream.IntStream" jni-return="Lcom/annimon/stream/IntStream;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="a" type="com.annimon.stream.IntStream" jni-type="Lcom/annimon/stream/IntStream;"></parameter>
        <parameter name="b" type="com.annimon.stream.IntStream" jni-type="Lcom/annimon/stream/IntStream;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="count" jni-signature="()J" bridge="false" native="false" return="long" jni-return="J" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="custom" jni-signature="(Lcom/annimon/stream/function/Function;)Ljava/lang/Object;" bridge="false" native="false" return="R" jni-return="TR;" static="false" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="R" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="function" type="com.annimon.stream.function.Function&lt;com.annimon.stream.IntStream, R&gt;" jni-type="Lcom/annimon/stream/function/Function&lt;Lcom/annimon/stream/IntStream;TR;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="distinct" jni-signature="()Lcom/annimon/stream/IntStream;" bridge="false" native="false" return="com.annimon.stream.IntStream" jni-return="Lcom/annimon/stream/IntStream;" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="dropWhile" jni-signature="(Lcom/annimon/stream/function/IntPredicate;)Lcom/annimon/stream/IntStream;" bridge="false" native="false" return="com.annimon.stream.IntStream" jni-return="Lcom/annimon/stream/IntStream;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="predicate" type="com.annimon.stream.function.IntPredicate" jni-type="Lcom/annimon/stream/function/IntPredicate;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="empty" jni-signature="()Lcom/annimon/stream/IntStream;" bridge="false" native="false" return="com.annimon.stream.IntStream" jni-return="Lcom/annimon/stream/IntStream;" static="true" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="filter" jni-signature="(Lcom/annimon/stream/function/IntPredicate;)Lcom/annimon/stream/IntStream;" bridge="false" native="false" return="com.annimon.stream.IntStream" jni-return="Lcom/annimon/stream/IntStream;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="predicate" type="com.annimon.stream.function.IntPredicate" jni-type="Lcom/annimon/stream/function/IntPredicate;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="filterIndexed" jni-signature="(Lcom/annimon/stream/function/IndexedIntPredicate;)Lcom/annimon/stream/IntStream;" bridge="false" native="false" return="com.annimon.stream.IntStream" jni-return="Lcom/annimon/stream/IntStream;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="predicate" type="com.annimon.stream.function.IndexedIntPredicate" jni-type="Lcom/annimon/stream/function/IndexedIntPredicate;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="filterIndexed" jni-signature="(IILcom/annimon/stream/function/IndexedIntPredicate;)Lcom/annimon/stream/IntStream;" bridge="false" native="false" return="com.annimon.stream.IntStream" jni-return="Lcom/annimon/stream/IntStream;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="from" type="int" jni-type="I"></parameter>
        <parameter name="step" type="int" jni-type="I"></parameter>
        <parameter name="predicate" type="com.annimon.stream.function.IndexedIntPredicate" jni-type="Lcom/annimon/stream/function/IndexedIntPredicate;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="filterNot" jni-signature="(Lcom/annimon/stream/function/IntPredicate;)Lcom/annimon/stream/IntStream;" bridge="false" native="false" return="com.annimon.stream.IntStream" jni-return="Lcom/annimon/stream/IntStream;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="predicate" type="com.annimon.stream.function.IntPredicate" jni-type="Lcom/annimon/stream/function/IntPredicate;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="findFirst" jni-signature="()Lcom/annimon/stream/OptionalInt;" bridge="false" native="false" return="com.annimon.stream.OptionalInt" jni-return="Lcom/annimon/stream/OptionalInt;" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="findLast" jni-signature="()Lcom/annimon/stream/OptionalInt;" bridge="false" native="false" return="com.annimon.stream.OptionalInt" jni-return="Lcom/annimon/stream/OptionalInt;" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="findSingle" jni-signature="()Lcom/annimon/stream/OptionalInt;" bridge="false" native="false" return="com.annimon.stream.OptionalInt" jni-return="Lcom/annimon/stream/OptionalInt;" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="flatMap" jni-signature="(Lcom/annimon/stream/function/IntFunction;)Lcom/annimon/stream/IntStream;" bridge="false" native="false" return="com.annimon.stream.IntStream" jni-return="Lcom/annimon/stream/IntStream;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="mapper" type="com.annimon.stream.function.IntFunction&lt;? extends com.annimon.stream.IntStream&gt;" jni-type="Lcom/annimon/stream/function/IntFunction&lt;+Lcom/annimon/stream/IntStream;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="forEach" jni-signature="(Lcom/annimon/stream/function/IntConsumer;)V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="action" type="com.annimon.stream.function.IntConsumer" jni-type="Lcom/annimon/stream/function/IntConsumer;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="forEachIndexed" jni-signature="(Lcom/annimon/stream/function/IndexedIntConsumer;)V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="action" type="com.annimon.stream.function.IndexedIntConsumer" jni-type="Lcom/annimon/stream/function/IndexedIntConsumer;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="forEachIndexed" jni-signature="(IILcom/annimon/stream/function/IndexedIntConsumer;)V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="from" type="int" jni-type="I"></parameter>
        <parameter name="step" type="int" jni-type="I"></parameter>
        <parameter name="action" type="com.annimon.stream.function.IndexedIntConsumer" jni-type="Lcom/annimon/stream/function/IndexedIntConsumer;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="generate" jni-signature="(Lcom/annimon/stream/function/IntSupplier;)Lcom/annimon/stream/IntStream;" bridge="false" native="false" return="com.annimon.stream.IntStream" jni-return="Lcom/annimon/stream/IntStream;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="s" type="com.annimon.stream.function.IntSupplier" jni-type="Lcom/annimon/stream/function/IntSupplier;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="iterate" jni-signature="(ILcom/annimon/stream/function/IntPredicate;Lcom/annimon/stream/function/IntUnaryOperator;)Lcom/annimon/stream/IntStream;" bridge="false" native="false" return="com.annimon.stream.IntStream" jni-return="Lcom/annimon/stream/IntStream;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="seed" type="int" jni-type="I"></parameter>
        <parameter name="predicate" type="com.annimon.stream.function.IntPredicate" jni-type="Lcom/annimon/stream/function/IntPredicate;"></parameter>
        <parameter name="op" type="com.annimon.stream.function.IntUnaryOperator" jni-type="Lcom/annimon/stream/function/IntUnaryOperator;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="iterate" jni-signature="(ILcom/annimon/stream/function/IntUnaryOperator;)Lcom/annimon/stream/IntStream;" bridge="false" native="false" return="com.annimon.stream.IntStream" jni-return="Lcom/annimon/stream/IntStream;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="seed" type="int" jni-type="I"></parameter>
        <parameter name="f" type="com.annimon.stream.function.IntUnaryOperator" jni-type="Lcom/annimon/stream/function/IntUnaryOperator;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="iterator" jni-signature="()Lcom/annimon/stream/iterator/PrimitiveIterator$OfInt;" bridge="false" native="false" return="com.annimon.stream.iterator.PrimitiveIterator.OfInt" jni-return="Lcom/annimon/stream/iterator/PrimitiveIterator$OfInt;" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="limit" jni-signature="(J)Lcom/annimon/stream/IntStream;" bridge="false" native="false" return="com.annimon.stream.IntStream" jni-return="Lcom/annimon/stream/IntStream;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="maxSize" type="long" jni-type="J"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="map" jni-signature="(Lcom/annimon/stream/function/IntUnaryOperator;)Lcom/annimon/stream/IntStream;" bridge="false" native="false" return="com.annimon.stream.IntStream" jni-return="Lcom/annimon/stream/IntStream;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="mapper" type="com.annimon.stream.function.IntUnaryOperator" jni-type="Lcom/annimon/stream/function/IntUnaryOperator;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="mapIndexed" jni-signature="(Lcom/annimon/stream/function/IntBinaryOperator;)Lcom/annimon/stream/IntStream;" bridge="false" native="false" return="com.annimon.stream.IntStream" jni-return="Lcom/annimon/stream/IntStream;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="mapper" type="com.annimon.stream.function.IntBinaryOperator" jni-type="Lcom/annimon/stream/function/IntBinaryOperator;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="mapIndexed" jni-signature="(IILcom/annimon/stream/function/IntBinaryOperator;)Lcom/annimon/stream/IntStream;" bridge="false" native="false" return="com.annimon.stream.IntStream" jni-return="Lcom/annimon/stream/IntStream;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="from" type="int" jni-type="I"></parameter>
        <parameter name="step" type="int" jni-type="I"></parameter>
        <parameter name="mapper" type="com.annimon.stream.function.IntBinaryOperator" jni-type="Lcom/annimon/stream/function/IntBinaryOperator;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="mapToDouble" jni-signature="(Lcom/annimon/stream/function/IntToDoubleFunction;)Lcom/annimon/stream/DoubleStream;" bridge="false" native="false" return="com.annimon.stream.DoubleStream" jni-return="Lcom/annimon/stream/DoubleStream;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="mapper" type="com.annimon.stream.function.IntToDoubleFunction" jni-type="Lcom/annimon/stream/function/IntToDoubleFunction;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="mapToLong" jni-signature="(Lcom/annimon/stream/function/IntToLongFunction;)Lcom/annimon/stream/LongStream;" bridge="false" native="false" return="com.annimon.stream.LongStream" jni-return="Lcom/annimon/stream/LongStream;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="mapper" type="com.annimon.stream.function.IntToLongFunction" jni-type="Lcom/annimon/stream/function/IntToLongFunction;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="mapToObj" jni-signature="(Lcom/annimon/stream/function/IntFunction;)Lcom/annimon/stream/Stream;" bridge="false" native="false" return="com.annimon.stream.Stream&lt;R&gt;" jni-return="Lcom/annimon/stream/Stream&lt;TR;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="R" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="mapper" type="com.annimon.stream.function.IntFunction&lt;? extends R&gt;" jni-type="Lcom/annimon/stream/function/IntFunction&lt;+TR;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="max" jni-signature="()Lcom/annimon/stream/OptionalInt;" bridge="false" native="false" return="com.annimon.stream.OptionalInt" jni-return="Lcom/annimon/stream/OptionalInt;" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="min" jni-signature="()Lcom/annimon/stream/OptionalInt;" bridge="false" native="false" return="com.annimon.stream.OptionalInt" jni-return="Lcom/annimon/stream/OptionalInt;" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="noneMatch" jni-signature="(Lcom/annimon/stream/function/IntPredicate;)Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="predicate" type="com.annimon.stream.function.IntPredicate" jni-type="Lcom/annimon/stream/function/IntPredicate;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="of" jni-signature="(Lcom/annimon/stream/iterator/PrimitiveIterator$OfInt;)Lcom/annimon/stream/IntStream;" bridge="false" native="false" return="com.annimon.stream.IntStream" jni-return="Lcom/annimon/stream/IntStream;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="iterator" type="com.annimon.stream.iterator.PrimitiveIterator.OfInt" jni-type="Lcom/annimon/stream/iterator/PrimitiveIterator$OfInt;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="of" jni-signature="(I)Lcom/annimon/stream/IntStream;" bridge="false" native="false" return="com.annimon.stream.IntStream" jni-return="Lcom/annimon/stream/IntStream;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="t" type="int" jni-type="I"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="of" jni-signature="([I)Lcom/annimon/stream/IntStream;" bridge="false" native="false" return="com.annimon.stream.IntStream" jni-return="Lcom/annimon/stream/IntStream;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="values" type="int..." jni-type="[I"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="ofCodePoints" jni-signature="(Ljava/lang/CharSequence;)Lcom/annimon/stream/IntStream;" bridge="false" native="false" return="com.annimon.stream.IntStream" jni-return="Lcom/annimon/stream/IntStream;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="charSequence" type="java.lang.CharSequence" jni-type="Ljava/lang/CharSequence;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="onClose" jni-signature="(Ljava/lang/Runnable;)Lcom/annimon/stream/IntStream;" bridge="false" native="false" return="com.annimon.stream.IntStream" jni-return="Lcom/annimon/stream/IntStream;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="closeHandler" type="java.lang.Runnable" jni-type="Ljava/lang/Runnable;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="peek" jni-signature="(Lcom/annimon/stream/function/IntConsumer;)Lcom/annimon/stream/IntStream;" bridge="false" native="false" return="com.annimon.stream.IntStream" jni-return="Lcom/annimon/stream/IntStream;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="action" type="com.annimon.stream.function.IntConsumer" jni-type="Lcom/annimon/stream/function/IntConsumer;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="range" jni-signature="(II)Lcom/annimon/stream/IntStream;" bridge="false" native="false" return="com.annimon.stream.IntStream" jni-return="Lcom/annimon/stream/IntStream;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="startInclusive" type="int" jni-type="I"></parameter>
        <parameter name="endExclusive" type="int" jni-type="I"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="rangeClosed" jni-signature="(II)Lcom/annimon/stream/IntStream;" bridge="false" native="false" return="com.annimon.stream.IntStream" jni-return="Lcom/annimon/stream/IntStream;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="startInclusive" type="int" jni-type="I"></parameter>
        <parameter name="endInclusive" type="int" jni-type="I"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="reduce" jni-signature="(Lcom/annimon/stream/function/IntBinaryOperator;)Lcom/annimon/stream/OptionalInt;" bridge="false" native="false" return="com.annimon.stream.OptionalInt" jni-return="Lcom/annimon/stream/OptionalInt;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="op" type="com.annimon.stream.function.IntBinaryOperator" jni-type="Lcom/annimon/stream/function/IntBinaryOperator;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="reduce" jni-signature="(ILcom/annimon/stream/function/IntBinaryOperator;)I" bridge="false" native="false" return="int" jni-return="I" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="identity" type="int" jni-type="I"></parameter>
        <parameter name="op" type="com.annimon.stream.function.IntBinaryOperator" jni-type="Lcom/annimon/stream/function/IntBinaryOperator;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="sample" jni-signature="(I)Lcom/annimon/stream/IntStream;" bridge="false" native="false" return="com.annimon.stream.IntStream" jni-return="Lcom/annimon/stream/IntStream;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="stepWidth" type="int" jni-type="I"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="scan" jni-signature="(Lcom/annimon/stream/function/IntBinaryOperator;)Lcom/annimon/stream/IntStream;" bridge="false" native="false" return="com.annimon.stream.IntStream" jni-return="Lcom/annimon/stream/IntStream;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="accumulator" type="com.annimon.stream.function.IntBinaryOperator" jni-type="Lcom/annimon/stream/function/IntBinaryOperator;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="scan" jni-signature="(ILcom/annimon/stream/function/IntBinaryOperator;)Lcom/annimon/stream/IntStream;" bridge="false" native="false" return="com.annimon.stream.IntStream" jni-return="Lcom/annimon/stream/IntStream;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="identity" type="int" jni-type="I"></parameter>
        <parameter name="accumulator" type="com.annimon.stream.function.IntBinaryOperator" jni-type="Lcom/annimon/stream/function/IntBinaryOperator;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="single" jni-signature="()I" bridge="false" native="false" return="int" jni-return="I" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="skip" jni-signature="(J)Lcom/annimon/stream/IntStream;" bridge="false" native="false" return="com.annimon.stream.IntStream" jni-return="Lcom/annimon/stream/IntStream;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="n" type="long" jni-type="J"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="sorted" jni-signature="()Lcom/annimon/stream/IntStream;" bridge="false" native="false" return="com.annimon.stream.IntStream" jni-return="Lcom/annimon/stream/IntStream;" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="sorted" jni-signature="(Ljava/util/Comparator;)Lcom/annimon/stream/IntStream;" bridge="false" native="false" return="com.annimon.stream.IntStream" jni-return="Lcom/annimon/stream/IntStream;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="comparator" type="java.util.Comparator&lt;java.lang.Integer&gt;" jni-type="Ljava/util/Comparator&lt;Ljava/lang/Integer;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="sum" jni-signature="()I" bridge="false" native="false" return="int" jni-return="I" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="takeUntil" jni-signature="(Lcom/annimon/stream/function/IntPredicate;)Lcom/annimon/stream/IntStream;" bridge="false" native="false" return="com.annimon.stream.IntStream" jni-return="Lcom/annimon/stream/IntStream;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="stopPredicate" type="com.annimon.stream.function.IntPredicate" jni-type="Lcom/annimon/stream/function/IntPredicate;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="takeWhile" jni-signature="(Lcom/annimon/stream/function/IntPredicate;)Lcom/annimon/stream/IntStream;" bridge="false" native="false" return="com.annimon.stream.IntStream" jni-return="Lcom/annimon/stream/IntStream;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="predicate" type="com.annimon.stream.function.IntPredicate" jni-type="Lcom/annimon/stream/function/IntPredicate;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="toArray" jni-signature="()[I" bridge="false" native="false" return="int[]" jni-return="[I" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.PrimitiveIterator.OfInt" extends-generic-aware="com.annimon.stream.iterator.PrimitiveIterator.OfInt" jni-extends="Lcom/annimon/stream/iterator/PrimitiveIterator$OfInt;" final="true" name="IntStream.1" static="true" visibility="" jni-signature="Lcom/annimon/stream/IntStream$1;">
      <method abstract="false" deprecated="not deprecated" final="false" name="hasNext" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextInt" jni-signature="()I" bridge="false" native="false" return="int" jni-return="I" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="false" name="IntStream.2" static="false" visibility="" jni-signature="Lcom/annimon/stream/IntStream$2;">
      <implements name="com.annimon.stream.function.IntBinaryOperator" name-generic-aware="com.annimon.stream.function.IntBinaryOperator" jni-type="Lcom/annimon/stream/function/IntBinaryOperator;"></implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="applyAsInt" jni-signature="(II)I" bridge="false" native="false" return="int" jni-return="I" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="left" type="int" jni-type="I"></parameter>
        <parameter name="right" type="int" jni-type="I"></parameter>
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="false" name="IntStream.3" static="false" visibility="" jni-signature="Lcom/annimon/stream/IntStream$3;">
      <implements name="com.annimon.stream.function.IntBinaryOperator" name-generic-aware="com.annimon.stream.function.IntBinaryOperator" jni-type="Lcom/annimon/stream/function/IntBinaryOperator;"></implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="applyAsInt" jni-signature="(II)I" bridge="false" native="false" return="int" jni-return="I" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="left" type="int" jni-type="I"></parameter>
        <parameter name="right" type="int" jni-type="I"></parameter>
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="false" name="IntStream.4" static="false" visibility="" jni-signature="Lcom/annimon/stream/IntStream$4;">
      <implements name="com.annimon.stream.function.IntBinaryOperator" name-generic-aware="com.annimon.stream.function.IntBinaryOperator" jni-type="Lcom/annimon/stream/function/IntBinaryOperator;"></implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="applyAsInt" jni-signature="(II)I" bridge="false" native="false" return="int" jni-return="I" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="left" type="int" jni-type="I"></parameter>
        <parameter name="right" type="int" jni-type="I"></parameter>
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="true" name="IntStream.5" static="true" visibility="" jni-signature="Lcom/annimon/stream/IntStream$5;">
      <implements name="com.annimon.stream.function.ToIntFunction" name-generic-aware="com.annimon.stream.function.ToIntFunction&lt;java.lang.Integer&gt;" jni-type="Lcom/annimon/stream/function/ToIntFunction&lt;Ljava/lang/Integer;&gt;;"></implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="applyAsInt" jni-signature="(Ljava/lang/Integer;)I" bridge="false" native="false" return="int" jni-return="I" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="t" type="java.lang.Integer" jni-type="Ljava/lang/Integer;"></parameter>
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="true" name="LongStream" static="false" visibility="public" jni-signature="Lcom/annimon/stream/LongStream;">
      <implements name="java.io.Closeable" name-generic-aware="java.io.Closeable" jni-type="Ljava/io/Closeable;"></implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="allMatch" jni-signature="(Lcom/annimon/stream/function/LongPredicate;)Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="predicate" type="com.annimon.stream.function.LongPredicate" jni-type="Lcom/annimon/stream/function/LongPredicate;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="anyMatch" jni-signature="(Lcom/annimon/stream/function/LongPredicate;)Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="predicate" type="com.annimon.stream.function.LongPredicate" jni-type="Lcom/annimon/stream/function/LongPredicate;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="boxed" jni-signature="()Lcom/annimon/stream/Stream;" bridge="false" native="false" return="com.annimon.stream.Stream&lt;java.lang.Long&gt;" jni-return="Lcom/annimon/stream/Stream&lt;Ljava/lang/Long;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="close" jni-signature="()V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="collect" jni-signature="(Lcom/annimon/stream/function/Supplier;Lcom/annimon/stream/function/ObjLongConsumer;)Ljava/lang/Object;" bridge="false" native="false" return="R" jni-return="TR;" static="false" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="R" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="supplier" type="com.annimon.stream.function.Supplier&lt;R&gt;" jni-type="Lcom/annimon/stream/function/Supplier&lt;TR;&gt;;"></parameter>
        <parameter name="accumulator" type="com.annimon.stream.function.ObjLongConsumer&lt;R&gt;" jni-type="Lcom/annimon/stream/function/ObjLongConsumer&lt;TR;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="concat" jni-signature="(Lcom/annimon/stream/LongStream;Lcom/annimon/stream/LongStream;)Lcom/annimon/stream/LongStream;" bridge="false" native="false" return="com.annimon.stream.LongStream" jni-return="Lcom/annimon/stream/LongStream;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="a" type="com.annimon.stream.LongStream" jni-type="Lcom/annimon/stream/LongStream;"></parameter>
        <parameter name="b" type="com.annimon.stream.LongStream" jni-type="Lcom/annimon/stream/LongStream;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="count" jni-signature="()J" bridge="false" native="false" return="long" jni-return="J" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="custom" jni-signature="(Lcom/annimon/stream/function/Function;)Ljava/lang/Object;" bridge="false" native="false" return="R" jni-return="TR;" static="false" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="R" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="function" type="com.annimon.stream.function.Function&lt;com.annimon.stream.LongStream, R&gt;" jni-type="Lcom/annimon/stream/function/Function&lt;Lcom/annimon/stream/LongStream;TR;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="distinct" jni-signature="()Lcom/annimon/stream/LongStream;" bridge="false" native="false" return="com.annimon.stream.LongStream" jni-return="Lcom/annimon/stream/LongStream;" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="dropWhile" jni-signature="(Lcom/annimon/stream/function/LongPredicate;)Lcom/annimon/stream/LongStream;" bridge="false" native="false" return="com.annimon.stream.LongStream" jni-return="Lcom/annimon/stream/LongStream;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="predicate" type="com.annimon.stream.function.LongPredicate" jni-type="Lcom/annimon/stream/function/LongPredicate;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="empty" jni-signature="()Lcom/annimon/stream/LongStream;" bridge="false" native="false" return="com.annimon.stream.LongStream" jni-return="Lcom/annimon/stream/LongStream;" static="true" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="filter" jni-signature="(Lcom/annimon/stream/function/LongPredicate;)Lcom/annimon/stream/LongStream;" bridge="false" native="false" return="com.annimon.stream.LongStream" jni-return="Lcom/annimon/stream/LongStream;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="predicate" type="com.annimon.stream.function.LongPredicate" jni-type="Lcom/annimon/stream/function/LongPredicate;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="filterIndexed" jni-signature="(Lcom/annimon/stream/function/IndexedLongPredicate;)Lcom/annimon/stream/LongStream;" bridge="false" native="false" return="com.annimon.stream.LongStream" jni-return="Lcom/annimon/stream/LongStream;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="predicate" type="com.annimon.stream.function.IndexedLongPredicate" jni-type="Lcom/annimon/stream/function/IndexedLongPredicate;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="filterIndexed" jni-signature="(IILcom/annimon/stream/function/IndexedLongPredicate;)Lcom/annimon/stream/LongStream;" bridge="false" native="false" return="com.annimon.stream.LongStream" jni-return="Lcom/annimon/stream/LongStream;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="from" type="int" jni-type="I"></parameter>
        <parameter name="step" type="int" jni-type="I"></parameter>
        <parameter name="predicate" type="com.annimon.stream.function.IndexedLongPredicate" jni-type="Lcom/annimon/stream/function/IndexedLongPredicate;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="filterNot" jni-signature="(Lcom/annimon/stream/function/LongPredicate;)Lcom/annimon/stream/LongStream;" bridge="false" native="false" return="com.annimon.stream.LongStream" jni-return="Lcom/annimon/stream/LongStream;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="predicate" type="com.annimon.stream.function.LongPredicate" jni-type="Lcom/annimon/stream/function/LongPredicate;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="findFirst" jni-signature="()Lcom/annimon/stream/OptionalLong;" bridge="false" native="false" return="com.annimon.stream.OptionalLong" jni-return="Lcom/annimon/stream/OptionalLong;" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="findLast" jni-signature="()Lcom/annimon/stream/OptionalLong;" bridge="false" native="false" return="com.annimon.stream.OptionalLong" jni-return="Lcom/annimon/stream/OptionalLong;" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="findSingle" jni-signature="()Lcom/annimon/stream/OptionalLong;" bridge="false" native="false" return="com.annimon.stream.OptionalLong" jni-return="Lcom/annimon/stream/OptionalLong;" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="flatMap" jni-signature="(Lcom/annimon/stream/function/LongFunction;)Lcom/annimon/stream/LongStream;" bridge="false" native="false" return="com.annimon.stream.LongStream" jni-return="Lcom/annimon/stream/LongStream;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="mapper" type="com.annimon.stream.function.LongFunction&lt;? extends com.annimon.stream.LongStream&gt;" jni-type="Lcom/annimon/stream/function/LongFunction&lt;+Lcom/annimon/stream/LongStream;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="forEach" jni-signature="(Lcom/annimon/stream/function/LongConsumer;)V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="action" type="com.annimon.stream.function.LongConsumer" jni-type="Lcom/annimon/stream/function/LongConsumer;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="forEachIndexed" jni-signature="(Lcom/annimon/stream/function/IndexedLongConsumer;)V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="action" type="com.annimon.stream.function.IndexedLongConsumer" jni-type="Lcom/annimon/stream/function/IndexedLongConsumer;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="forEachIndexed" jni-signature="(IILcom/annimon/stream/function/IndexedLongConsumer;)V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="from" type="int" jni-type="I"></parameter>
        <parameter name="step" type="int" jni-type="I"></parameter>
        <parameter name="action" type="com.annimon.stream.function.IndexedLongConsumer" jni-type="Lcom/annimon/stream/function/IndexedLongConsumer;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="generate" jni-signature="(Lcom/annimon/stream/function/LongSupplier;)Lcom/annimon/stream/LongStream;" bridge="false" native="false" return="com.annimon.stream.LongStream" jni-return="Lcom/annimon/stream/LongStream;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="s" type="com.annimon.stream.function.LongSupplier" jni-type="Lcom/annimon/stream/function/LongSupplier;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="iterate" jni-signature="(JLcom/annimon/stream/function/LongPredicate;Lcom/annimon/stream/function/LongUnaryOperator;)Lcom/annimon/stream/LongStream;" bridge="false" native="false" return="com.annimon.stream.LongStream" jni-return="Lcom/annimon/stream/LongStream;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="seed" type="long" jni-type="J"></parameter>
        <parameter name="predicate" type="com.annimon.stream.function.LongPredicate" jni-type="Lcom/annimon/stream/function/LongPredicate;"></parameter>
        <parameter name="op" type="com.annimon.stream.function.LongUnaryOperator" jni-type="Lcom/annimon/stream/function/LongUnaryOperator;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="iterate" jni-signature="(JLcom/annimon/stream/function/LongUnaryOperator;)Lcom/annimon/stream/LongStream;" bridge="false" native="false" return="com.annimon.stream.LongStream" jni-return="Lcom/annimon/stream/LongStream;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="seed" type="long" jni-type="J"></parameter>
        <parameter name="f" type="com.annimon.stream.function.LongUnaryOperator" jni-type="Lcom/annimon/stream/function/LongUnaryOperator;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="iterator" jni-signature="()Lcom/annimon/stream/iterator/PrimitiveIterator$OfLong;" bridge="false" native="false" return="com.annimon.stream.iterator.PrimitiveIterator.OfLong" jni-return="Lcom/annimon/stream/iterator/PrimitiveIterator$OfLong;" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="limit" jni-signature="(J)Lcom/annimon/stream/LongStream;" bridge="false" native="false" return="com.annimon.stream.LongStream" jni-return="Lcom/annimon/stream/LongStream;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="maxSize" type="long" jni-type="J"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="map" jni-signature="(Lcom/annimon/stream/function/LongUnaryOperator;)Lcom/annimon/stream/LongStream;" bridge="false" native="false" return="com.annimon.stream.LongStream" jni-return="Lcom/annimon/stream/LongStream;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="mapper" type="com.annimon.stream.function.LongUnaryOperator" jni-type="Lcom/annimon/stream/function/LongUnaryOperator;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="mapIndexed" jni-signature="(Lcom/annimon/stream/function/IndexedLongUnaryOperator;)Lcom/annimon/stream/LongStream;" bridge="false" native="false" return="com.annimon.stream.LongStream" jni-return="Lcom/annimon/stream/LongStream;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="mapper" type="com.annimon.stream.function.IndexedLongUnaryOperator" jni-type="Lcom/annimon/stream/function/IndexedLongUnaryOperator;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="mapIndexed" jni-signature="(IILcom/annimon/stream/function/IndexedLongUnaryOperator;)Lcom/annimon/stream/LongStream;" bridge="false" native="false" return="com.annimon.stream.LongStream" jni-return="Lcom/annimon/stream/LongStream;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="from" type="int" jni-type="I"></parameter>
        <parameter name="step" type="int" jni-type="I"></parameter>
        <parameter name="mapper" type="com.annimon.stream.function.IndexedLongUnaryOperator" jni-type="Lcom/annimon/stream/function/IndexedLongUnaryOperator;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="mapToDouble" jni-signature="(Lcom/annimon/stream/function/LongToDoubleFunction;)Lcom/annimon/stream/DoubleStream;" bridge="false" native="false" return="com.annimon.stream.DoubleStream" jni-return="Lcom/annimon/stream/DoubleStream;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="mapper" type="com.annimon.stream.function.LongToDoubleFunction" jni-type="Lcom/annimon/stream/function/LongToDoubleFunction;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="mapToInt" jni-signature="(Lcom/annimon/stream/function/LongToIntFunction;)Lcom/annimon/stream/IntStream;" bridge="false" native="false" return="com.annimon.stream.IntStream" jni-return="Lcom/annimon/stream/IntStream;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="mapper" type="com.annimon.stream.function.LongToIntFunction" jni-type="Lcom/annimon/stream/function/LongToIntFunction;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="mapToObj" jni-signature="(Lcom/annimon/stream/function/LongFunction;)Lcom/annimon/stream/Stream;" bridge="false" native="false" return="com.annimon.stream.Stream&lt;R&gt;" jni-return="Lcom/annimon/stream/Stream&lt;TR;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="R" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="mapper" type="com.annimon.stream.function.LongFunction&lt;? extends R&gt;" jni-type="Lcom/annimon/stream/function/LongFunction&lt;+TR;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="max" jni-signature="()Lcom/annimon/stream/OptionalLong;" bridge="false" native="false" return="com.annimon.stream.OptionalLong" jni-return="Lcom/annimon/stream/OptionalLong;" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="min" jni-signature="()Lcom/annimon/stream/OptionalLong;" bridge="false" native="false" return="com.annimon.stream.OptionalLong" jni-return="Lcom/annimon/stream/OptionalLong;" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="noneMatch" jni-signature="(Lcom/annimon/stream/function/LongPredicate;)Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="predicate" type="com.annimon.stream.function.LongPredicate" jni-type="Lcom/annimon/stream/function/LongPredicate;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="of" jni-signature="(Lcom/annimon/stream/iterator/PrimitiveIterator$OfLong;)Lcom/annimon/stream/LongStream;" bridge="false" native="false" return="com.annimon.stream.LongStream" jni-return="Lcom/annimon/stream/LongStream;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="iterator" type="com.annimon.stream.iterator.PrimitiveIterator.OfLong" jni-type="Lcom/annimon/stream/iterator/PrimitiveIterator$OfLong;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="of" jni-signature="(J)Lcom/annimon/stream/LongStream;" bridge="false" native="false" return="com.annimon.stream.LongStream" jni-return="Lcom/annimon/stream/LongStream;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="t" type="long" jni-type="J"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="of" jni-signature="([J)Lcom/annimon/stream/LongStream;" bridge="false" native="false" return="com.annimon.stream.LongStream" jni-return="Lcom/annimon/stream/LongStream;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="values" type="long..." jni-type="[J"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="onClose" jni-signature="(Ljava/lang/Runnable;)Lcom/annimon/stream/LongStream;" bridge="false" native="false" return="com.annimon.stream.LongStream" jni-return="Lcom/annimon/stream/LongStream;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="closeHandler" type="java.lang.Runnable" jni-type="Ljava/lang/Runnable;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="peek" jni-signature="(Lcom/annimon/stream/function/LongConsumer;)Lcom/annimon/stream/LongStream;" bridge="false" native="false" return="com.annimon.stream.LongStream" jni-return="Lcom/annimon/stream/LongStream;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="action" type="com.annimon.stream.function.LongConsumer" jni-type="Lcom/annimon/stream/function/LongConsumer;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="range" jni-signature="(JJ)Lcom/annimon/stream/LongStream;" bridge="false" native="false" return="com.annimon.stream.LongStream" jni-return="Lcom/annimon/stream/LongStream;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="startInclusive" type="long" jni-type="J"></parameter>
        <parameter name="endExclusive" type="long" jni-type="J"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="rangeClosed" jni-signature="(JJ)Lcom/annimon/stream/LongStream;" bridge="false" native="false" return="com.annimon.stream.LongStream" jni-return="Lcom/annimon/stream/LongStream;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="startInclusive" type="long" jni-type="J"></parameter>
        <parameter name="endInclusive" type="long" jni-type="J"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="reduce" jni-signature="(Lcom/annimon/stream/function/LongBinaryOperator;)Lcom/annimon/stream/OptionalLong;" bridge="false" native="false" return="com.annimon.stream.OptionalLong" jni-return="Lcom/annimon/stream/OptionalLong;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="accumulator" type="com.annimon.stream.function.LongBinaryOperator" jni-type="Lcom/annimon/stream/function/LongBinaryOperator;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="reduce" jni-signature="(JLcom/annimon/stream/function/LongBinaryOperator;)J" bridge="false" native="false" return="long" jni-return="J" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="identity" type="long" jni-type="J"></parameter>
        <parameter name="accumulator" type="com.annimon.stream.function.LongBinaryOperator" jni-type="Lcom/annimon/stream/function/LongBinaryOperator;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="sample" jni-signature="(I)Lcom/annimon/stream/LongStream;" bridge="false" native="false" return="com.annimon.stream.LongStream" jni-return="Lcom/annimon/stream/LongStream;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="stepWidth" type="int" jni-type="I"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="scan" jni-signature="(Lcom/annimon/stream/function/LongBinaryOperator;)Lcom/annimon/stream/LongStream;" bridge="false" native="false" return="com.annimon.stream.LongStream" jni-return="Lcom/annimon/stream/LongStream;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="accumulator" type="com.annimon.stream.function.LongBinaryOperator" jni-type="Lcom/annimon/stream/function/LongBinaryOperator;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="scan" jni-signature="(JLcom/annimon/stream/function/LongBinaryOperator;)Lcom/annimon/stream/LongStream;" bridge="false" native="false" return="com.annimon.stream.LongStream" jni-return="Lcom/annimon/stream/LongStream;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="identity" type="long" jni-type="J"></parameter>
        <parameter name="accumulator" type="com.annimon.stream.function.LongBinaryOperator" jni-type="Lcom/annimon/stream/function/LongBinaryOperator;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="single" jni-signature="()J" bridge="false" native="false" return="long" jni-return="J" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="skip" jni-signature="(J)Lcom/annimon/stream/LongStream;" bridge="false" native="false" return="com.annimon.stream.LongStream" jni-return="Lcom/annimon/stream/LongStream;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="n" type="long" jni-type="J"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="sorted" jni-signature="()Lcom/annimon/stream/LongStream;" bridge="false" native="false" return="com.annimon.stream.LongStream" jni-return="Lcom/annimon/stream/LongStream;" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="sorted" jni-signature="(Ljava/util/Comparator;)Lcom/annimon/stream/LongStream;" bridge="false" native="false" return="com.annimon.stream.LongStream" jni-return="Lcom/annimon/stream/LongStream;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="comparator" type="java.util.Comparator&lt;java.lang.Long&gt;" jni-type="Ljava/util/Comparator&lt;Ljava/lang/Long;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="sum" jni-signature="()J" bridge="false" native="false" return="long" jni-return="J" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="takeUntil" jni-signature="(Lcom/annimon/stream/function/LongPredicate;)Lcom/annimon/stream/LongStream;" bridge="false" native="false" return="com.annimon.stream.LongStream" jni-return="Lcom/annimon/stream/LongStream;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="stopPredicate" type="com.annimon.stream.function.LongPredicate" jni-type="Lcom/annimon/stream/function/LongPredicate;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="takeWhile" jni-signature="(Lcom/annimon/stream/function/LongPredicate;)Lcom/annimon/stream/LongStream;" bridge="false" native="false" return="com.annimon.stream.LongStream" jni-return="Lcom/annimon/stream/LongStream;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="predicate" type="com.annimon.stream.function.LongPredicate" jni-type="Lcom/annimon/stream/function/LongPredicate;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="toArray" jni-signature="()[J" bridge="false" native="false" return="long[]" jni-return="[J" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.PrimitiveIterator.OfLong" extends-generic-aware="com.annimon.stream.iterator.PrimitiveIterator.OfLong" jni-extends="Lcom/annimon/stream/iterator/PrimitiveIterator$OfLong;" final="true" name="LongStream.1" static="true" visibility="" jni-signature="Lcom/annimon/stream/LongStream$1;">
      <method abstract="false" deprecated="not deprecated" final="false" name="hasNext" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextLong" jni-signature="()J" bridge="false" native="false" return="long" jni-return="J" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="false" name="LongStream.2" static="false" visibility="" jni-signature="Lcom/annimon/stream/LongStream$2;">
      <implements name="com.annimon.stream.function.LongBinaryOperator" name-generic-aware="com.annimon.stream.function.LongBinaryOperator" jni-type="Lcom/annimon/stream/function/LongBinaryOperator;"></implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="applyAsLong" jni-signature="(JJ)J" bridge="false" native="false" return="long" jni-return="J" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="left" type="long" jni-type="J"></parameter>
        <parameter name="right" type="long" jni-type="J"></parameter>
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="false" name="LongStream.3" static="false" visibility="" jni-signature="Lcom/annimon/stream/LongStream$3;">
      <implements name="com.annimon.stream.function.LongBinaryOperator" name-generic-aware="com.annimon.stream.function.LongBinaryOperator" jni-type="Lcom/annimon/stream/function/LongBinaryOperator;"></implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="applyAsLong" jni-signature="(JJ)J" bridge="false" native="false" return="long" jni-return="J" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="left" type="long" jni-type="J"></parameter>
        <parameter name="right" type="long" jni-type="J"></parameter>
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="false" name="LongStream.4" static="false" visibility="" jni-signature="Lcom/annimon/stream/LongStream$4;">
      <implements name="com.annimon.stream.function.LongBinaryOperator" name-generic-aware="com.annimon.stream.function.LongBinaryOperator" jni-type="Lcom/annimon/stream/function/LongBinaryOperator;"></implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="applyAsLong" jni-signature="(JJ)J" bridge="false" native="false" return="long" jni-return="J" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="left" type="long" jni-type="J"></parameter>
        <parameter name="right" type="long" jni-type="J"></parameter>
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="true" name="LongStream.5" static="true" visibility="" jni-signature="Lcom/annimon/stream/LongStream$5;">
      <implements name="com.annimon.stream.function.ToLongFunction" name-generic-aware="com.annimon.stream.function.ToLongFunction&lt;java.lang.Long&gt;" jni-type="Lcom/annimon/stream/function/ToLongFunction&lt;Ljava/lang/Long;&gt;;"></implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="applyAsLong" jni-signature="(Ljava/lang/Long;)J" bridge="false" native="false" return="long" jni-return="J" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="t" type="java.lang.Long" jni-type="Ljava/lang/Long;"></parameter>
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="true" name="Objects" static="false" visibility="public" jni-signature="Lcom/annimon/stream/Objects;">
      <method abstract="false" deprecated="not deprecated" final="false" name="compare" jni-signature="(Ljava/lang/Object;Ljava/lang/Object;Ljava/util/Comparator;)I" bridge="false" native="false" return="int" jni-return="I" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="a" type="T" jni-type="TT;"></parameter>
        <parameter name="b" type="T" jni-type="TT;"></parameter>
        <parameter name="c" type="java.util.Comparator&lt;? super T&gt;" jni-type="Ljava/util/Comparator&lt;-TT;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="compareInt" jni-signature="(II)I" bridge="false" native="false" return="int" jni-return="I" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="x" type="int" jni-type="I"></parameter>
        <parameter name="y" type="int" jni-type="I"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="compareLong" jni-signature="(JJ)I" bridge="false" native="false" return="int" jni-return="I" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="x" type="long" jni-type="J"></parameter>
        <parameter name="y" type="long" jni-type="J"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="deepEquals" jni-signature="(Ljava/lang/Object;Ljava/lang/Object;)Z" bridge="false" native="false" return="boolean" jni-return="Z" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="a" type="java.lang.Object" jni-type="Ljava/lang/Object;"></parameter>
        <parameter name="b" type="java.lang.Object" jni-type="Ljava/lang/Object;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="equals" jni-signature="(Ljava/lang/Object;Ljava/lang/Object;)Z" bridge="false" native="false" return="boolean" jni-return="Z" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="a" type="java.lang.Object" jni-type="Ljava/lang/Object;"></parameter>
        <parameter name="b" type="java.lang.Object" jni-type="Ljava/lang/Object;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="hash" jni-signature="([Ljava/lang/Object;)I" bridge="false" native="false" return="int" jni-return="I" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="values" type="java.lang.Object..." jni-type="[Ljava/lang/Object;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="hashCode" jni-signature="(Ljava/lang/Object;)I" bridge="false" native="false" return="int" jni-return="I" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="o" type="java.lang.Object" jni-type="Ljava/lang/Object;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="isNull" jni-signature="(Ljava/lang/Object;)Z" bridge="false" native="false" return="boolean" jni-return="Z" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="obj" type="java.lang.Object" jni-type="Ljava/lang/Object;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="nonNull" jni-signature="(Ljava/lang/Object;)Z" bridge="false" native="false" return="boolean" jni-return="Z" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="obj" type="java.lang.Object" jni-type="Ljava/lang/Object;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="requireNonNull" jni-signature="(Ljava/lang/Object;)Ljava/lang/Object;" bridge="false" native="false" return="T" jni-return="TT;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="obj" type="T" jni-type="TT;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="requireNonNull" jni-signature="(Ljava/lang/Object;Lcom/annimon/stream/function/Supplier;)Ljava/lang/Object;" bridge="false" native="false" return="T" jni-return="TT;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="obj" type="T" jni-type="TT;"></parameter>
        <parameter name="messageSupplier" type="com.annimon.stream.function.Supplier&lt;java.lang.String&gt;" jni-type="Lcom/annimon/stream/function/Supplier&lt;Ljava/lang/String;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="requireNonNull" jni-signature="(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;" bridge="false" native="false" return="T" jni-return="TT;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="obj" type="T" jni-type="TT;"></parameter>
        <parameter name="message" type="java.lang.String" jni-type="Ljava/lang/String;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="requireNonNullElements" jni-signature="(Ljava/util/Collection;)Ljava/util/Collection;" bridge="false" native="false" return="java.util.Collection&lt;T&gt;" jni-return="Ljava/util/Collection&lt;TT;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="collection" type="java.util.Collection&lt;T&gt;" jni-type="Ljava/util/Collection&lt;TT;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="requireNonNullElse" jni-signature="(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" bridge="false" native="false" return="T" jni-return="TT;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="obj" type="T" jni-type="TT;"></parameter>
        <parameter name="defaultObj" type="T" jni-type="TT;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="requireNonNullElseGet" jni-signature="(Ljava/lang/Object;Lcom/annimon/stream/function/Supplier;)Ljava/lang/Object;" bridge="false" native="false" return="T" jni-return="TT;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="obj" type="T" jni-type="TT;"></parameter>
        <parameter name="supplier" type="com.annimon.stream.function.Supplier&lt;? extends T&gt;" jni-type="Lcom/annimon/stream/function/Supplier&lt;+TT;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="toString" jni-signature="(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/String;" bridge="false" native="false" return="java.lang.String" jni-return="Ljava/lang/String;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="o" type="java.lang.Object" jni-type="Ljava/lang/Object;"></parameter>
        <parameter name="nullDefault" type="java.lang.String" jni-type="Ljava/lang/String;"></parameter>
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="false" name="Optional" static="false" visibility="public" jni-signature="Lcom/annimon/stream/Optional;">
      <typeParameters>
        <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
      </typeParameters>
      <method abstract="false" deprecated="not deprecated" final="false" name="custom" jni-signature="(Lcom/annimon/stream/function/Function;)Ljava/lang/Object;" bridge="false" native="false" return="R" jni-return="TR;" static="false" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="R" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="function" type="com.annimon.stream.function.Function&lt;com.annimon.stream.Optional&lt;T&gt;, R&gt;" jni-type="Lcom/annimon/stream/function/Function&lt;Lcom/annimon/stream/Optional&lt;TT;&gt;;TR;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="empty" jni-signature="()Lcom/annimon/stream/Optional;" bridge="false" native="false" return="com.annimon.stream.Optional&lt;T&gt;" jni-return="Lcom/annimon/stream/Optional&lt;TT;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="executeIfAbsent" jni-signature="(Ljava/lang/Runnable;)Lcom/annimon/stream/Optional;" bridge="false" native="false" return="com.annimon.stream.Optional&lt;T&gt;" jni-return="Lcom/annimon/stream/Optional&lt;TT;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="action" type="java.lang.Runnable" jni-type="Ljava/lang/Runnable;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="executeIfPresent" jni-signature="(Lcom/annimon/stream/function/Consumer;)Lcom/annimon/stream/Optional;" bridge="false" native="false" return="com.annimon.stream.Optional&lt;T&gt;" jni-return="Lcom/annimon/stream/Optional&lt;TT;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="consumer" type="com.annimon.stream.function.Consumer&lt;? super T&gt;" jni-type="Lcom/annimon/stream/function/Consumer&lt;-TT;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="filter" jni-signature="(Lcom/annimon/stream/function/Predicate;)Lcom/annimon/stream/Optional;" bridge="false" native="false" return="com.annimon.stream.Optional&lt;T&gt;" jni-return="Lcom/annimon/stream/Optional&lt;TT;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="predicate" type="com.annimon.stream.function.Predicate&lt;? super T&gt;" jni-type="Lcom/annimon/stream/function/Predicate&lt;-TT;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="filterNot" jni-signature="(Lcom/annimon/stream/function/Predicate;)Lcom/annimon/stream/Optional;" bridge="false" native="false" return="com.annimon.stream.Optional&lt;T&gt;" jni-return="Lcom/annimon/stream/Optional&lt;TT;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="predicate" type="com.annimon.stream.function.Predicate&lt;? super T&gt;" jni-type="Lcom/annimon/stream/function/Predicate&lt;-TT;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="flatMap" jni-signature="(Lcom/annimon/stream/function/Function;)Lcom/annimon/stream/Optional;" bridge="false" native="false" return="com.annimon.stream.Optional&lt;U&gt;" jni-return="Lcom/annimon/stream/Optional&lt;TU;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="U" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="mapper" type="com.annimon.stream.function.Function&lt;? super T, com.annimon.stream.Optional&lt;U&gt;&gt;" jni-type="Lcom/annimon/stream/function/Function&lt;-TT;Lcom/annimon/stream/Optional&lt;TU;&gt;;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="get" jni-signature="()Ljava/lang/Object;" bridge="false" native="false" return="T" jni-return="TT;" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="ifPresent" jni-signature="(Lcom/annimon/stream/function/Consumer;)V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="consumer" type="com.annimon.stream.function.Consumer&lt;? super T&gt;" jni-type="Lcom/annimon/stream/function/Consumer&lt;-TT;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="ifPresentOrElse" jni-signature="(Lcom/annimon/stream/function/Consumer;Ljava/lang/Runnable;)V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="consumer" type="com.annimon.stream.function.Consumer&lt;? super T&gt;" jni-type="Lcom/annimon/stream/function/Consumer&lt;-TT;&gt;;"></parameter>
        <parameter name="emptyAction" type="java.lang.Runnable" jni-type="Ljava/lang/Runnable;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="isEmpty" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="isPresent" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="map" jni-signature="(Lcom/annimon/stream/function/Function;)Lcom/annimon/stream/Optional;" bridge="false" native="false" return="com.annimon.stream.Optional&lt;U&gt;" jni-return="Lcom/annimon/stream/Optional&lt;TU;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="U" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="mapper" type="com.annimon.stream.function.Function&lt;? super T, ? extends U&gt;" jni-type="Lcom/annimon/stream/function/Function&lt;-TT;+TU;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="mapToBoolean" jni-signature="(Lcom/annimon/stream/function/ToBooleanFunction;)Lcom/annimon/stream/OptionalBoolean;" bridge="false" native="false" return="com.annimon.stream.OptionalBoolean" jni-return="Lcom/annimon/stream/OptionalBoolean;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="mapper" type="com.annimon.stream.function.ToBooleanFunction&lt;? super T&gt;" jni-type="Lcom/annimon/stream/function/ToBooleanFunction&lt;-TT;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="mapToDouble" jni-signature="(Lcom/annimon/stream/function/ToDoubleFunction;)Lcom/annimon/stream/OptionalDouble;" bridge="false" native="false" return="com.annimon.stream.OptionalDouble" jni-return="Lcom/annimon/stream/OptionalDouble;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="mapper" type="com.annimon.stream.function.ToDoubleFunction&lt;? super T&gt;" jni-type="Lcom/annimon/stream/function/ToDoubleFunction&lt;-TT;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="mapToInt" jni-signature="(Lcom/annimon/stream/function/ToIntFunction;)Lcom/annimon/stream/OptionalInt;" bridge="false" native="false" return="com.annimon.stream.OptionalInt" jni-return="Lcom/annimon/stream/OptionalInt;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="mapper" type="com.annimon.stream.function.ToIntFunction&lt;? super T&gt;" jni-type="Lcom/annimon/stream/function/ToIntFunction&lt;-TT;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="mapToLong" jni-signature="(Lcom/annimon/stream/function/ToLongFunction;)Lcom/annimon/stream/OptionalLong;" bridge="false" native="false" return="com.annimon.stream.OptionalLong" jni-return="Lcom/annimon/stream/OptionalLong;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="mapper" type="com.annimon.stream.function.ToLongFunction&lt;? super T&gt;" jni-type="Lcom/annimon/stream/function/ToLongFunction&lt;-TT;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="of" jni-signature="(Ljava/lang/Object;)Lcom/annimon/stream/Optional;" bridge="false" native="false" return="com.annimon.stream.Optional&lt;T&gt;" jni-return="Lcom/annimon/stream/Optional&lt;TT;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="value" type="T" jni-type="TT;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="ofNullable" jni-signature="(Ljava/lang/Object;)Lcom/annimon/stream/Optional;" bridge="false" native="false" return="com.annimon.stream.Optional&lt;T&gt;" jni-return="Lcom/annimon/stream/Optional&lt;TT;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="value" type="T" jni-type="TT;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="or" jni-signature="(Lcom/annimon/stream/function/Supplier;)Lcom/annimon/stream/Optional;" bridge="false" native="false" return="com.annimon.stream.Optional&lt;T&gt;" jni-return="Lcom/annimon/stream/Optional&lt;TT;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="supplier" type="com.annimon.stream.function.Supplier&lt;com.annimon.stream.Optional&lt;T&gt;&gt;" jni-type="Lcom/annimon/stream/function/Supplier&lt;Lcom/annimon/stream/Optional&lt;TT;&gt;;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="orElse" jni-signature="(Ljava/lang/Object;)Ljava/lang/Object;" bridge="false" native="false" return="T" jni-return="TT;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="other" type="T" jni-type="TT;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="orElseGet" jni-signature="(Lcom/annimon/stream/function/Supplier;)Ljava/lang/Object;" bridge="false" native="false" return="T" jni-return="TT;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="other" type="com.annimon.stream.function.Supplier&lt;? extends T&gt;" jni-type="Lcom/annimon/stream/function/Supplier&lt;+TT;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="orElseThrow" jni-signature="()Ljava/lang/Object;" bridge="false" native="false" return="T" jni-return="TT;" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="orElseThrow" jni-signature="(Lcom/annimon/stream/function/Supplier;)Ljava/lang/Object;" bridge="false" native="false" return="T" jni-return="TT;" static="false" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="X" classBound="java.lang.Throwable" jni-classBound="Ljava/lang/Throwable;">
            <genericConstraints>
              <genericConstraint type="java.lang.Throwable"></genericConstraint>
            </genericConstraints>
          </typeParameter>
        </typeParameters>
        <parameter name="exc" type="com.annimon.stream.function.Supplier&lt;? extends X&gt;" jni-type="Lcom/annimon/stream/function/Supplier&lt;+TX;&gt;;"></parameter>
        <exception name="Throwable" type="X"></exception>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="select" jni-signature="(Ljava/lang/Class;)Lcom/annimon/stream/Optional;" bridge="false" native="false" return="com.annimon.stream.Optional&lt;R&gt;" jni-return="Lcom/annimon/stream/Optional&lt;TR;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="R" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="clazz" type="java.lang.Class&lt;R&gt;" jni-type="Ljava/lang/Class&lt;TR;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="stream" jni-signature="()Lcom/annimon/stream/Stream;" bridge="false" native="false" return="com.annimon.stream.Stream&lt;T&gt;" jni-return="Lcom/annimon/stream/Stream&lt;TT;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="true" name="OptionalBoolean" static="false" visibility="public" jni-signature="Lcom/annimon/stream/OptionalBoolean;">
      <method abstract="false" deprecated="not deprecated" final="false" name="custom" jni-signature="(Lcom/annimon/stream/function/Function;)Ljava/lang/Object;" bridge="false" native="false" return="R" jni-return="TR;" static="false" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="R" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="function" type="com.annimon.stream.function.Function&lt;com.annimon.stream.OptionalBoolean, R&gt;" jni-type="Lcom/annimon/stream/function/Function&lt;Lcom/annimon/stream/OptionalBoolean;TR;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="empty" jni-signature="()Lcom/annimon/stream/OptionalBoolean;" bridge="false" native="false" return="com.annimon.stream.OptionalBoolean" jni-return="Lcom/annimon/stream/OptionalBoolean;" static="true" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="executeIfAbsent" jni-signature="(Ljava/lang/Runnable;)Lcom/annimon/stream/OptionalBoolean;" bridge="false" native="false" return="com.annimon.stream.OptionalBoolean" jni-return="Lcom/annimon/stream/OptionalBoolean;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="action" type="java.lang.Runnable" jni-type="Ljava/lang/Runnable;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="executeIfPresent" jni-signature="(Lcom/annimon/stream/function/BooleanConsumer;)Lcom/annimon/stream/OptionalBoolean;" bridge="false" native="false" return="com.annimon.stream.OptionalBoolean" jni-return="Lcom/annimon/stream/OptionalBoolean;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="consumer" type="com.annimon.stream.function.BooleanConsumer" jni-type="Lcom/annimon/stream/function/BooleanConsumer;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="filter" jni-signature="(Lcom/annimon/stream/function/BooleanPredicate;)Lcom/annimon/stream/OptionalBoolean;" bridge="false" native="false" return="com.annimon.stream.OptionalBoolean" jni-return="Lcom/annimon/stream/OptionalBoolean;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="predicate" type="com.annimon.stream.function.BooleanPredicate" jni-type="Lcom/annimon/stream/function/BooleanPredicate;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="filterNot" jni-signature="(Lcom/annimon/stream/function/BooleanPredicate;)Lcom/annimon/stream/OptionalBoolean;" bridge="false" native="false" return="com.annimon.stream.OptionalBoolean" jni-return="Lcom/annimon/stream/OptionalBoolean;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="predicate" type="com.annimon.stream.function.BooleanPredicate" jni-type="Lcom/annimon/stream/function/BooleanPredicate;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="getAsBoolean" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="ifPresent" jni-signature="(Lcom/annimon/stream/function/BooleanConsumer;)V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="consumer" type="com.annimon.stream.function.BooleanConsumer" jni-type="Lcom/annimon/stream/function/BooleanConsumer;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="ifPresentOrElse" jni-signature="(Lcom/annimon/stream/function/BooleanConsumer;Ljava/lang/Runnable;)V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="consumer" type="com.annimon.stream.function.BooleanConsumer" jni-type="Lcom/annimon/stream/function/BooleanConsumer;"></parameter>
        <parameter name="emptyAction" type="java.lang.Runnable" jni-type="Ljava/lang/Runnable;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="isEmpty" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="isPresent" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="map" jni-signature="(Lcom/annimon/stream/function/BooleanPredicate;)Lcom/annimon/stream/OptionalBoolean;" bridge="false" native="false" return="com.annimon.stream.OptionalBoolean" jni-return="Lcom/annimon/stream/OptionalBoolean;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="mapper" type="com.annimon.stream.function.BooleanPredicate" jni-type="Lcom/annimon/stream/function/BooleanPredicate;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="mapToObj" jni-signature="(Lcom/annimon/stream/function/BooleanFunction;)Lcom/annimon/stream/Optional;" bridge="false" native="false" return="com.annimon.stream.Optional&lt;U&gt;" jni-return="Lcom/annimon/stream/Optional&lt;TU;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="U" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="mapper" type="com.annimon.stream.function.BooleanFunction&lt;U&gt;" jni-type="Lcom/annimon/stream/function/BooleanFunction&lt;TU;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="of" jni-signature="(Z)Lcom/annimon/stream/OptionalBoolean;" bridge="false" native="false" return="com.annimon.stream.OptionalBoolean" jni-return="Lcom/annimon/stream/OptionalBoolean;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="value" type="boolean" jni-type="Z"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="ofNullable" jni-signature="(Ljava/lang/Boolean;)Lcom/annimon/stream/OptionalBoolean;" bridge="false" native="false" return="com.annimon.stream.OptionalBoolean" jni-return="Lcom/annimon/stream/OptionalBoolean;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="value" type="java.lang.Boolean" jni-type="Ljava/lang/Boolean;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="or" jni-signature="(Lcom/annimon/stream/function/Supplier;)Lcom/annimon/stream/OptionalBoolean;" bridge="false" native="false" return="com.annimon.stream.OptionalBoolean" jni-return="Lcom/annimon/stream/OptionalBoolean;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="supplier" type="com.annimon.stream.function.Supplier&lt;com.annimon.stream.OptionalBoolean&gt;" jni-type="Lcom/annimon/stream/function/Supplier&lt;Lcom/annimon/stream/OptionalBoolean;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="orElse" jni-signature="(Z)Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="other" type="boolean" jni-type="Z"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="orElseGet" jni-signature="(Lcom/annimon/stream/function/BooleanSupplier;)Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="other" type="com.annimon.stream.function.BooleanSupplier" jni-type="Lcom/annimon/stream/function/BooleanSupplier;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="orElseThrow" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="orElseThrow" jni-signature="(Lcom/annimon/stream/function/Supplier;)Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="X" classBound="java.lang.Throwable" jni-classBound="Ljava/lang/Throwable;">
            <genericConstraints>
              <genericConstraint type="java.lang.Throwable"></genericConstraint>
            </genericConstraints>
          </typeParameter>
        </typeParameters>
        <parameter name="exceptionSupplier" type="com.annimon.stream.function.Supplier&lt;X&gt;" jni-type="Lcom/annimon/stream/function/Supplier&lt;TX;&gt;;"></parameter>
        <exception name="Throwable" type="X"></exception>
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="true" name="OptionalDouble" static="false" visibility="public" jni-signature="Lcom/annimon/stream/OptionalDouble;">
      <method abstract="false" deprecated="not deprecated" final="false" name="custom" jni-signature="(Lcom/annimon/stream/function/Function;)Ljava/lang/Object;" bridge="false" native="false" return="R" jni-return="TR;" static="false" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="R" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="function" type="com.annimon.stream.function.Function&lt;com.annimon.stream.OptionalDouble, R&gt;" jni-type="Lcom/annimon/stream/function/Function&lt;Lcom/annimon/stream/OptionalDouble;TR;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="empty" jni-signature="()Lcom/annimon/stream/OptionalDouble;" bridge="false" native="false" return="com.annimon.stream.OptionalDouble" jni-return="Lcom/annimon/stream/OptionalDouble;" static="true" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="executeIfAbsent" jni-signature="(Ljava/lang/Runnable;)Lcom/annimon/stream/OptionalDouble;" bridge="false" native="false" return="com.annimon.stream.OptionalDouble" jni-return="Lcom/annimon/stream/OptionalDouble;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="action" type="java.lang.Runnable" jni-type="Ljava/lang/Runnable;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="executeIfPresent" jni-signature="(Lcom/annimon/stream/function/DoubleConsumer;)Lcom/annimon/stream/OptionalDouble;" bridge="false" native="false" return="com.annimon.stream.OptionalDouble" jni-return="Lcom/annimon/stream/OptionalDouble;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="consumer" type="com.annimon.stream.function.DoubleConsumer" jni-type="Lcom/annimon/stream/function/DoubleConsumer;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="filter" jni-signature="(Lcom/annimon/stream/function/DoublePredicate;)Lcom/annimon/stream/OptionalDouble;" bridge="false" native="false" return="com.annimon.stream.OptionalDouble" jni-return="Lcom/annimon/stream/OptionalDouble;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="predicate" type="com.annimon.stream.function.DoublePredicate" jni-type="Lcom/annimon/stream/function/DoublePredicate;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="filterNot" jni-signature="(Lcom/annimon/stream/function/DoublePredicate;)Lcom/annimon/stream/OptionalDouble;" bridge="false" native="false" return="com.annimon.stream.OptionalDouble" jni-return="Lcom/annimon/stream/OptionalDouble;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="predicate" type="com.annimon.stream.function.DoublePredicate" jni-type="Lcom/annimon/stream/function/DoublePredicate;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="getAsDouble" jni-signature="()D" bridge="false" native="false" return="double" jni-return="D" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="ifPresent" jni-signature="(Lcom/annimon/stream/function/DoubleConsumer;)V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="consumer" type="com.annimon.stream.function.DoubleConsumer" jni-type="Lcom/annimon/stream/function/DoubleConsumer;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="ifPresentOrElse" jni-signature="(Lcom/annimon/stream/function/DoubleConsumer;Ljava/lang/Runnable;)V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="consumer" type="com.annimon.stream.function.DoubleConsumer" jni-type="Lcom/annimon/stream/function/DoubleConsumer;"></parameter>
        <parameter name="emptyAction" type="java.lang.Runnable" jni-type="Ljava/lang/Runnable;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="isEmpty" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="isPresent" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="map" jni-signature="(Lcom/annimon/stream/function/DoubleUnaryOperator;)Lcom/annimon/stream/OptionalDouble;" bridge="false" native="false" return="com.annimon.stream.OptionalDouble" jni-return="Lcom/annimon/stream/OptionalDouble;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="mapper" type="com.annimon.stream.function.DoubleUnaryOperator" jni-type="Lcom/annimon/stream/function/DoubleUnaryOperator;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="mapToInt" jni-signature="(Lcom/annimon/stream/function/DoubleToIntFunction;)Lcom/annimon/stream/OptionalInt;" bridge="false" native="false" return="com.annimon.stream.OptionalInt" jni-return="Lcom/annimon/stream/OptionalInt;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="mapper" type="com.annimon.stream.function.DoubleToIntFunction" jni-type="Lcom/annimon/stream/function/DoubleToIntFunction;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="mapToLong" jni-signature="(Lcom/annimon/stream/function/DoubleToLongFunction;)Lcom/annimon/stream/OptionalLong;" bridge="false" native="false" return="com.annimon.stream.OptionalLong" jni-return="Lcom/annimon/stream/OptionalLong;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="mapper" type="com.annimon.stream.function.DoubleToLongFunction" jni-type="Lcom/annimon/stream/function/DoubleToLongFunction;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="mapToObj" jni-signature="(Lcom/annimon/stream/function/DoubleFunction;)Lcom/annimon/stream/Optional;" bridge="false" native="false" return="com.annimon.stream.Optional&lt;U&gt;" jni-return="Lcom/annimon/stream/Optional&lt;TU;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="U" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="mapper" type="com.annimon.stream.function.DoubleFunction&lt;U&gt;" jni-type="Lcom/annimon/stream/function/DoubleFunction&lt;TU;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="of" jni-signature="(D)Lcom/annimon/stream/OptionalDouble;" bridge="false" native="false" return="com.annimon.stream.OptionalDouble" jni-return="Lcom/annimon/stream/OptionalDouble;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="value" type="double" jni-type="D"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="ofNullable" jni-signature="(Ljava/lang/Double;)Lcom/annimon/stream/OptionalDouble;" bridge="false" native="false" return="com.annimon.stream.OptionalDouble" jni-return="Lcom/annimon/stream/OptionalDouble;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="value" type="java.lang.Double" jni-type="Ljava/lang/Double;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="or" jni-signature="(Lcom/annimon/stream/function/Supplier;)Lcom/annimon/stream/OptionalDouble;" bridge="false" native="false" return="com.annimon.stream.OptionalDouble" jni-return="Lcom/annimon/stream/OptionalDouble;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="supplier" type="com.annimon.stream.function.Supplier&lt;com.annimon.stream.OptionalDouble&gt;" jni-type="Lcom/annimon/stream/function/Supplier&lt;Lcom/annimon/stream/OptionalDouble;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="orElse" jni-signature="(D)D" bridge="false" native="false" return="double" jni-return="D" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="other" type="double" jni-type="D"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="orElseGet" jni-signature="(Lcom/annimon/stream/function/DoubleSupplier;)D" bridge="false" native="false" return="double" jni-return="D" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="other" type="com.annimon.stream.function.DoubleSupplier" jni-type="Lcom/annimon/stream/function/DoubleSupplier;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="orElseThrow" jni-signature="()D" bridge="false" native="false" return="double" jni-return="D" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="orElseThrow" jni-signature="(Lcom/annimon/stream/function/Supplier;)D" bridge="false" native="false" return="double" jni-return="D" static="false" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="X" classBound="java.lang.Throwable" jni-classBound="Ljava/lang/Throwable;">
            <genericConstraints>
              <genericConstraint type="java.lang.Throwable"></genericConstraint>
            </genericConstraints>
          </typeParameter>
        </typeParameters>
        <parameter name="exceptionSupplier" type="com.annimon.stream.function.Supplier&lt;X&gt;" jni-type="Lcom/annimon/stream/function/Supplier&lt;TX;&gt;;"></parameter>
        <exception name="Throwable" type="X"></exception>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="stream" jni-signature="()Lcom/annimon/stream/DoubleStream;" bridge="false" native="false" return="com.annimon.stream.DoubleStream" jni-return="Lcom/annimon/stream/DoubleStream;" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="true" name="OptionalInt" static="false" visibility="public" jni-signature="Lcom/annimon/stream/OptionalInt;">
      <method abstract="false" deprecated="not deprecated" final="false" name="custom" jni-signature="(Lcom/annimon/stream/function/Function;)Ljava/lang/Object;" bridge="false" native="false" return="R" jni-return="TR;" static="false" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="R" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="function" type="com.annimon.stream.function.Function&lt;com.annimon.stream.OptionalInt, R&gt;" jni-type="Lcom/annimon/stream/function/Function&lt;Lcom/annimon/stream/OptionalInt;TR;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="empty" jni-signature="()Lcom/annimon/stream/OptionalInt;" bridge="false" native="false" return="com.annimon.stream.OptionalInt" jni-return="Lcom/annimon/stream/OptionalInt;" static="true" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="executeIfAbsent" jni-signature="(Ljava/lang/Runnable;)Lcom/annimon/stream/OptionalInt;" bridge="false" native="false" return="com.annimon.stream.OptionalInt" jni-return="Lcom/annimon/stream/OptionalInt;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="action" type="java.lang.Runnable" jni-type="Ljava/lang/Runnable;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="executeIfPresent" jni-signature="(Lcom/annimon/stream/function/IntConsumer;)Lcom/annimon/stream/OptionalInt;" bridge="false" native="false" return="com.annimon.stream.OptionalInt" jni-return="Lcom/annimon/stream/OptionalInt;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="consumer" type="com.annimon.stream.function.IntConsumer" jni-type="Lcom/annimon/stream/function/IntConsumer;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="filter" jni-signature="(Lcom/annimon/stream/function/IntPredicate;)Lcom/annimon/stream/OptionalInt;" bridge="false" native="false" return="com.annimon.stream.OptionalInt" jni-return="Lcom/annimon/stream/OptionalInt;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="predicate" type="com.annimon.stream.function.IntPredicate" jni-type="Lcom/annimon/stream/function/IntPredicate;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="filterNot" jni-signature="(Lcom/annimon/stream/function/IntPredicate;)Lcom/annimon/stream/OptionalInt;" bridge="false" native="false" return="com.annimon.stream.OptionalInt" jni-return="Lcom/annimon/stream/OptionalInt;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="predicate" type="com.annimon.stream.function.IntPredicate" jni-type="Lcom/annimon/stream/function/IntPredicate;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="getAsInt" jni-signature="()I" bridge="false" native="false" return="int" jni-return="I" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="ifPresent" jni-signature="(Lcom/annimon/stream/function/IntConsumer;)V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="consumer" type="com.annimon.stream.function.IntConsumer" jni-type="Lcom/annimon/stream/function/IntConsumer;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="ifPresentOrElse" jni-signature="(Lcom/annimon/stream/function/IntConsumer;Ljava/lang/Runnable;)V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="consumer" type="com.annimon.stream.function.IntConsumer" jni-type="Lcom/annimon/stream/function/IntConsumer;"></parameter>
        <parameter name="emptyAction" type="java.lang.Runnable" jni-type="Ljava/lang/Runnable;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="isEmpty" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="isPresent" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="map" jni-signature="(Lcom/annimon/stream/function/IntUnaryOperator;)Lcom/annimon/stream/OptionalInt;" bridge="false" native="false" return="com.annimon.stream.OptionalInt" jni-return="Lcom/annimon/stream/OptionalInt;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="mapper" type="com.annimon.stream.function.IntUnaryOperator" jni-type="Lcom/annimon/stream/function/IntUnaryOperator;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="mapToDouble" jni-signature="(Lcom/annimon/stream/function/IntToDoubleFunction;)Lcom/annimon/stream/OptionalDouble;" bridge="false" native="false" return="com.annimon.stream.OptionalDouble" jni-return="Lcom/annimon/stream/OptionalDouble;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="mapper" type="com.annimon.stream.function.IntToDoubleFunction" jni-type="Lcom/annimon/stream/function/IntToDoubleFunction;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="mapToLong" jni-signature="(Lcom/annimon/stream/function/IntToLongFunction;)Lcom/annimon/stream/OptionalLong;" bridge="false" native="false" return="com.annimon.stream.OptionalLong" jni-return="Lcom/annimon/stream/OptionalLong;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="mapper" type="com.annimon.stream.function.IntToLongFunction" jni-type="Lcom/annimon/stream/function/IntToLongFunction;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="mapToObj" jni-signature="(Lcom/annimon/stream/function/IntFunction;)Lcom/annimon/stream/Optional;" bridge="false" native="false" return="com.annimon.stream.Optional&lt;U&gt;" jni-return="Lcom/annimon/stream/Optional&lt;TU;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="U" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="mapper" type="com.annimon.stream.function.IntFunction&lt;U&gt;" jni-type="Lcom/annimon/stream/function/IntFunction&lt;TU;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="of" jni-signature="(I)Lcom/annimon/stream/OptionalInt;" bridge="false" native="false" return="com.annimon.stream.OptionalInt" jni-return="Lcom/annimon/stream/OptionalInt;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="value" type="int" jni-type="I"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="ofNullable" jni-signature="(Ljava/lang/Integer;)Lcom/annimon/stream/OptionalInt;" bridge="false" native="false" return="com.annimon.stream.OptionalInt" jni-return="Lcom/annimon/stream/OptionalInt;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="value" type="java.lang.Integer" jni-type="Ljava/lang/Integer;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="or" jni-signature="(Lcom/annimon/stream/function/Supplier;)Lcom/annimon/stream/OptionalInt;" bridge="false" native="false" return="com.annimon.stream.OptionalInt" jni-return="Lcom/annimon/stream/OptionalInt;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="supplier" type="com.annimon.stream.function.Supplier&lt;com.annimon.stream.OptionalInt&gt;" jni-type="Lcom/annimon/stream/function/Supplier&lt;Lcom/annimon/stream/OptionalInt;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="orElse" jni-signature="(I)I" bridge="false" native="false" return="int" jni-return="I" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="other" type="int" jni-type="I"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="orElseGet" jni-signature="(Lcom/annimon/stream/function/IntSupplier;)I" bridge="false" native="false" return="int" jni-return="I" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="other" type="com.annimon.stream.function.IntSupplier" jni-type="Lcom/annimon/stream/function/IntSupplier;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="orElseThrow" jni-signature="()I" bridge="false" native="false" return="int" jni-return="I" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="orElseThrow" jni-signature="(Lcom/annimon/stream/function/Supplier;)I" bridge="false" native="false" return="int" jni-return="I" static="false" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="X" classBound="java.lang.Throwable" jni-classBound="Ljava/lang/Throwable;">
            <genericConstraints>
              <genericConstraint type="java.lang.Throwable"></genericConstraint>
            </genericConstraints>
          </typeParameter>
        </typeParameters>
        <parameter name="exceptionSupplier" type="com.annimon.stream.function.Supplier&lt;X&gt;" jni-type="Lcom/annimon/stream/function/Supplier&lt;TX;&gt;;"></parameter>
        <exception name="Throwable" type="X"></exception>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="stream" jni-signature="()Lcom/annimon/stream/IntStream;" bridge="false" native="false" return="com.annimon.stream.IntStream" jni-return="Lcom/annimon/stream/IntStream;" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="true" name="OptionalLong" static="false" visibility="public" jni-signature="Lcom/annimon/stream/OptionalLong;">
      <method abstract="false" deprecated="not deprecated" final="false" name="custom" jni-signature="(Lcom/annimon/stream/function/Function;)Ljava/lang/Object;" bridge="false" native="false" return="R" jni-return="TR;" static="false" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="R" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="function" type="com.annimon.stream.function.Function&lt;com.annimon.stream.OptionalLong, R&gt;" jni-type="Lcom/annimon/stream/function/Function&lt;Lcom/annimon/stream/OptionalLong;TR;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="empty" jni-signature="()Lcom/annimon/stream/OptionalLong;" bridge="false" native="false" return="com.annimon.stream.OptionalLong" jni-return="Lcom/annimon/stream/OptionalLong;" static="true" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="executeIfAbsent" jni-signature="(Ljava/lang/Runnable;)Lcom/annimon/stream/OptionalLong;" bridge="false" native="false" return="com.annimon.stream.OptionalLong" jni-return="Lcom/annimon/stream/OptionalLong;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="action" type="java.lang.Runnable" jni-type="Ljava/lang/Runnable;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="executeIfPresent" jni-signature="(Lcom/annimon/stream/function/LongConsumer;)Lcom/annimon/stream/OptionalLong;" bridge="false" native="false" return="com.annimon.stream.OptionalLong" jni-return="Lcom/annimon/stream/OptionalLong;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="consumer" type="com.annimon.stream.function.LongConsumer" jni-type="Lcom/annimon/stream/function/LongConsumer;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="filter" jni-signature="(Lcom/annimon/stream/function/LongPredicate;)Lcom/annimon/stream/OptionalLong;" bridge="false" native="false" return="com.annimon.stream.OptionalLong" jni-return="Lcom/annimon/stream/OptionalLong;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="predicate" type="com.annimon.stream.function.LongPredicate" jni-type="Lcom/annimon/stream/function/LongPredicate;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="filterNot" jni-signature="(Lcom/annimon/stream/function/LongPredicate;)Lcom/annimon/stream/OptionalLong;" bridge="false" native="false" return="com.annimon.stream.OptionalLong" jni-return="Lcom/annimon/stream/OptionalLong;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="predicate" type="com.annimon.stream.function.LongPredicate" jni-type="Lcom/annimon/stream/function/LongPredicate;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="getAsLong" jni-signature="()J" bridge="false" native="false" return="long" jni-return="J" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="ifPresent" jni-signature="(Lcom/annimon/stream/function/LongConsumer;)V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="consumer" type="com.annimon.stream.function.LongConsumer" jni-type="Lcom/annimon/stream/function/LongConsumer;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="ifPresentOrElse" jni-signature="(Lcom/annimon/stream/function/LongConsumer;Ljava/lang/Runnable;)V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="consumer" type="com.annimon.stream.function.LongConsumer" jni-type="Lcom/annimon/stream/function/LongConsumer;"></parameter>
        <parameter name="emptyAction" type="java.lang.Runnable" jni-type="Ljava/lang/Runnable;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="isEmpty" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="isPresent" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="map" jni-signature="(Lcom/annimon/stream/function/LongUnaryOperator;)Lcom/annimon/stream/OptionalLong;" bridge="false" native="false" return="com.annimon.stream.OptionalLong" jni-return="Lcom/annimon/stream/OptionalLong;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="mapper" type="com.annimon.stream.function.LongUnaryOperator" jni-type="Lcom/annimon/stream/function/LongUnaryOperator;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="mapToInt" jni-signature="(Lcom/annimon/stream/function/LongToIntFunction;)Lcom/annimon/stream/OptionalInt;" bridge="false" native="false" return="com.annimon.stream.OptionalInt" jni-return="Lcom/annimon/stream/OptionalInt;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="mapper" type="com.annimon.stream.function.LongToIntFunction" jni-type="Lcom/annimon/stream/function/LongToIntFunction;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="mapToObj" jni-signature="(Lcom/annimon/stream/function/LongFunction;)Lcom/annimon/stream/Optional;" bridge="false" native="false" return="com.annimon.stream.Optional&lt;U&gt;" jni-return="Lcom/annimon/stream/Optional&lt;TU;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="U" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="mapper" type="com.annimon.stream.function.LongFunction&lt;U&gt;" jni-type="Lcom/annimon/stream/function/LongFunction&lt;TU;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="of" jni-signature="(J)Lcom/annimon/stream/OptionalLong;" bridge="false" native="false" return="com.annimon.stream.OptionalLong" jni-return="Lcom/annimon/stream/OptionalLong;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="value" type="long" jni-type="J"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="ofNullable" jni-signature="(Ljava/lang/Long;)Lcom/annimon/stream/OptionalLong;" bridge="false" native="false" return="com.annimon.stream.OptionalLong" jni-return="Lcom/annimon/stream/OptionalLong;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="value" type="java.lang.Long" jni-type="Ljava/lang/Long;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="or" jni-signature="(Lcom/annimon/stream/function/Supplier;)Lcom/annimon/stream/OptionalLong;" bridge="false" native="false" return="com.annimon.stream.OptionalLong" jni-return="Lcom/annimon/stream/OptionalLong;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="supplier" type="com.annimon.stream.function.Supplier&lt;com.annimon.stream.OptionalLong&gt;" jni-type="Lcom/annimon/stream/function/Supplier&lt;Lcom/annimon/stream/OptionalLong;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="orElse" jni-signature="(J)J" bridge="false" native="false" return="long" jni-return="J" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="other" type="long" jni-type="J"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="orElseGet" jni-signature="(Lcom/annimon/stream/function/LongSupplier;)J" bridge="false" native="false" return="long" jni-return="J" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="other" type="com.annimon.stream.function.LongSupplier" jni-type="Lcom/annimon/stream/function/LongSupplier;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="orElseThrow" jni-signature="()J" bridge="false" native="false" return="long" jni-return="J" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="orElseThrow" jni-signature="(Lcom/annimon/stream/function/Supplier;)J" bridge="false" native="false" return="long" jni-return="J" static="false" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="X" classBound="java.lang.Throwable" jni-classBound="Ljava/lang/Throwable;">
            <genericConstraints>
              <genericConstraint type="java.lang.Throwable"></genericConstraint>
            </genericConstraints>
          </typeParameter>
        </typeParameters>
        <parameter name="exceptionSupplier" type="com.annimon.stream.function.Supplier&lt;X&gt;" jni-type="Lcom/annimon/stream/function/Supplier&lt;TX;&gt;;"></parameter>
        <exception name="Throwable" type="X"></exception>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="stream" jni-signature="()Lcom/annimon/stream/LongStream;" bridge="false" native="false" return="com.annimon.stream.LongStream" jni-return="Lcom/annimon/stream/LongStream;" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="true" name="RandomCompat" static="false" visibility="public" jni-signature="Lcom/annimon/stream/RandomCompat;">
      <constructor deprecated="not deprecated" final="false" name="RandomCompat" jni-signature="()V" bridge="false" static="false" type="com.annimon.stream.RandomCompat" synthetic="false" visibility="public"></constructor>
      <constructor deprecated="not deprecated" final="false" name="RandomCompat" jni-signature="(Ljava/util/Random;)V" bridge="false" static="false" type="com.annimon.stream.RandomCompat" synthetic="false" visibility="public">
        <parameter name="random" type="java.util.Random" jni-type="Ljava/util/Random;"></parameter>
      </constructor>
      <constructor deprecated="not deprecated" final="false" name="RandomCompat" jni-signature="(J)V" bridge="false" static="false" type="com.annimon.stream.RandomCompat" synthetic="false" visibility="public">
        <parameter name="seed" type="long" jni-type="J"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="doubles" jni-signature="()Lcom/annimon/stream/DoubleStream;" bridge="false" native="false" return="com.annimon.stream.DoubleStream" jni-return="Lcom/annimon/stream/DoubleStream;" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="doubles" jni-signature="(DD)Lcom/annimon/stream/DoubleStream;" bridge="false" native="false" return="com.annimon.stream.DoubleStream" jni-return="Lcom/annimon/stream/DoubleStream;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="randomNumberOrigin" type="double" jni-type="D"></parameter>
        <parameter name="randomNumberBound" type="double" jni-type="D"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="doubles" jni-signature="(J)Lcom/annimon/stream/DoubleStream;" bridge="false" native="false" return="com.annimon.stream.DoubleStream" jni-return="Lcom/annimon/stream/DoubleStream;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="streamSize" type="long" jni-type="J"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="doubles" jni-signature="(JDD)Lcom/annimon/stream/DoubleStream;" bridge="false" native="false" return="com.annimon.stream.DoubleStream" jni-return="Lcom/annimon/stream/DoubleStream;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="streamSize" type="long" jni-type="J"></parameter>
        <parameter name="randomNumberOrigin" type="double" jni-type="D"></parameter>
        <parameter name="randomNumberBound" type="double" jni-type="D"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="getRandom" jni-signature="()Ljava/util/Random;" bridge="false" native="false" return="java.util.Random" jni-return="Ljava/util/Random;" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="ints" jni-signature="()Lcom/annimon/stream/IntStream;" bridge="false" native="false" return="com.annimon.stream.IntStream" jni-return="Lcom/annimon/stream/IntStream;" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="ints" jni-signature="(II)Lcom/annimon/stream/IntStream;" bridge="false" native="false" return="com.annimon.stream.IntStream" jni-return="Lcom/annimon/stream/IntStream;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="randomNumberOrigin" type="int" jni-type="I"></parameter>
        <parameter name="randomNumberBound" type="int" jni-type="I"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="ints" jni-signature="(J)Lcom/annimon/stream/IntStream;" bridge="false" native="false" return="com.annimon.stream.IntStream" jni-return="Lcom/annimon/stream/IntStream;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="streamSize" type="long" jni-type="J"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="ints" jni-signature="(JII)Lcom/annimon/stream/IntStream;" bridge="false" native="false" return="com.annimon.stream.IntStream" jni-return="Lcom/annimon/stream/IntStream;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="streamSize" type="long" jni-type="J"></parameter>
        <parameter name="randomNumberOrigin" type="int" jni-type="I"></parameter>
        <parameter name="randomNumberBound" type="int" jni-type="I"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="longs" jni-signature="()Lcom/annimon/stream/LongStream;" bridge="false" native="false" return="com.annimon.stream.LongStream" jni-return="Lcom/annimon/stream/LongStream;" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="longs" jni-signature="(J)Lcom/annimon/stream/LongStream;" bridge="false" native="false" return="com.annimon.stream.LongStream" jni-return="Lcom/annimon/stream/LongStream;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="streamSize" type="long" jni-type="J"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="longs" jni-signature="(JJ)Lcom/annimon/stream/LongStream;" bridge="false" native="false" return="com.annimon.stream.LongStream" jni-return="Lcom/annimon/stream/LongStream;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="randomNumberOrigin" type="long" jni-type="J"></parameter>
        <parameter name="randomNumberBound" type="long" jni-type="J"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="longs" jni-signature="(JJJ)Lcom/annimon/stream/LongStream;" bridge="false" native="false" return="com.annimon.stream.LongStream" jni-return="Lcom/annimon/stream/LongStream;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="streamSize" type="long" jni-type="J"></parameter>
        <parameter name="randomNumberOrigin" type="long" jni-type="J"></parameter>
        <parameter name="randomNumberBound" type="long" jni-type="J"></parameter>
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="false" name="RandomCompat.1" static="false" visibility="" jni-signature="Lcom/annimon/stream/RandomCompat$1;">
      <implements name="com.annimon.stream.function.IntSupplier" name-generic-aware="com.annimon.stream.function.IntSupplier" jni-type="Lcom/annimon/stream/function/IntSupplier;"></implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="getAsInt" jni-signature="()I" bridge="false" native="false" return="int" jni-return="I" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="false" name="RandomCompat.2" static="false" visibility="" jni-signature="Lcom/annimon/stream/RandomCompat$2;">
      <implements name="com.annimon.stream.function.LongSupplier" name-generic-aware="com.annimon.stream.function.LongSupplier" jni-type="Lcom/annimon/stream/function/LongSupplier;"></implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="getAsLong" jni-signature="()J" bridge="false" native="false" return="long" jni-return="J" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="false" name="RandomCompat.3" static="false" visibility="" jni-signature="Lcom/annimon/stream/RandomCompat$3;">
      <implements name="com.annimon.stream.function.DoubleSupplier" name-generic-aware="com.annimon.stream.function.DoubleSupplier" jni-type="Lcom/annimon/stream/function/DoubleSupplier;"></implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="getAsDouble" jni-signature="()D" bridge="false" native="false" return="double" jni-return="D" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="false" name="RandomCompat.4" static="false" visibility="" jni-signature="Lcom/annimon/stream/RandomCompat$4;">
      <implements name="com.annimon.stream.function.IntSupplier" name-generic-aware="com.annimon.stream.function.IntSupplier" jni-type="Lcom/annimon/stream/function/IntSupplier;"></implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="getAsInt" jni-signature="()I" bridge="false" native="false" return="int" jni-return="I" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="false" name="RandomCompat.5" static="false" visibility="" jni-signature="Lcom/annimon/stream/RandomCompat$5;">
      <implements name="com.annimon.stream.function.LongSupplier" name-generic-aware="com.annimon.stream.function.LongSupplier" jni-type="Lcom/annimon/stream/function/LongSupplier;"></implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="getAsLong" jni-signature="()J" bridge="false" native="false" return="long" jni-return="J" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="false" name="RandomCompat.6" static="false" visibility="" jni-signature="Lcom/annimon/stream/RandomCompat$6;">
      <implements name="com.annimon.stream.function.DoubleSupplier" name-generic-aware="com.annimon.stream.function.DoubleSupplier" jni-type="Lcom/annimon/stream/function/DoubleSupplier;"></implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="getAsDouble" jni-signature="()D" bridge="false" native="false" return="double" jni-return="D" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="false" name="Stream" static="false" visibility="public" jni-signature="Lcom/annimon/stream/Stream;">
      <implements name="java.io.Closeable" name-generic-aware="java.io.Closeable" jni-type="Ljava/io/Closeable;"></implements>
      <typeParameters>
        <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
      </typeParameters>
      <method abstract="false" deprecated="not deprecated" final="false" name="allMatch" jni-signature="(Lcom/annimon/stream/function/Predicate;)Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="predicate" type="com.annimon.stream.function.Predicate&lt;? super T&gt;" jni-type="Lcom/annimon/stream/function/Predicate&lt;-TT;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="anyMatch" jni-signature="(Lcom/annimon/stream/function/Predicate;)Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="predicate" type="com.annimon.stream.function.Predicate&lt;? super T&gt;" jni-type="Lcom/annimon/stream/function/Predicate&lt;-TT;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="chunkBy" jni-signature="(Lcom/annimon/stream/function/Function;)Lcom/annimon/stream/Stream;" bridge="false" native="false" return="com.annimon.stream.Stream&lt;java.util.List&lt;T&gt;&gt;" jni-return="Lcom/annimon/stream/Stream&lt;Ljava/util/List&lt;TT;&gt;;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="K" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="classifier" type="com.annimon.stream.function.Function&lt;? super T, ? extends K&gt;" jni-type="Lcom/annimon/stream/function/Function&lt;-TT;+TK;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="close" jni-signature="()V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="collect" jni-signature="(Lcom/annimon/stream/Collector;)Ljava/lang/Object;" bridge="false" native="false" return="R" jni-return="TR;" static="false" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="R" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
          <typeParameter name="A" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="collector" type="com.annimon.stream.Collector&lt;? super T, A, R&gt;" jni-type="Lcom/annimon/stream/Collector&lt;-TT;TA;TR;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="collect" jni-signature="(Lcom/annimon/stream/function/Supplier;Lcom/annimon/stream/function/BiConsumer;)Ljava/lang/Object;" bridge="false" native="false" return="R" jni-return="TR;" static="false" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="R" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="supplier" type="com.annimon.stream.function.Supplier&lt;R&gt;" jni-type="Lcom/annimon/stream/function/Supplier&lt;TR;&gt;;"></parameter>
        <parameter name="accumulator" type="com.annimon.stream.function.BiConsumer&lt;R, ? super T&gt;" jni-type="Lcom/annimon/stream/function/BiConsumer&lt;TR;-TT;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="concat" jni-signature="(Lcom/annimon/stream/Stream;Lcom/annimon/stream/Stream;)Lcom/annimon/stream/Stream;" bridge="false" native="false" return="com.annimon.stream.Stream&lt;T&gt;" jni-return="Lcom/annimon/stream/Stream&lt;TT;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="stream1" type="com.annimon.stream.Stream&lt;? extends T&gt;" jni-type="Lcom/annimon/stream/Stream&lt;+TT;&gt;;"></parameter>
        <parameter name="stream2" type="com.annimon.stream.Stream&lt;? extends T&gt;" jni-type="Lcom/annimon/stream/Stream&lt;+TT;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="concat" jni-signature="(Ljava/util/Iterator;Ljava/util/Iterator;)Lcom/annimon/stream/Stream;" bridge="false" native="false" return="com.annimon.stream.Stream&lt;T&gt;" jni-return="Lcom/annimon/stream/Stream&lt;TT;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="iterator1" type="java.util.Iterator&lt;? extends T&gt;" jni-type="Ljava/util/Iterator&lt;+TT;&gt;;"></parameter>
        <parameter name="iterator2" type="java.util.Iterator&lt;? extends T&gt;" jni-type="Ljava/util/Iterator&lt;+TT;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="count" jni-signature="()J" bridge="false" native="false" return="long" jni-return="J" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="custom" jni-signature="(Lcom/annimon/stream/function/Function;)Ljava/lang/Object;" bridge="false" native="false" return="R" jni-return="TR;" static="false" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="R" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="function" type="com.annimon.stream.function.Function&lt;com.annimon.stream.Stream&lt;T&gt;, R&gt;" jni-type="Lcom/annimon/stream/function/Function&lt;Lcom/annimon/stream/Stream&lt;TT;&gt;;TR;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="distinct" jni-signature="()Lcom/annimon/stream/Stream;" bridge="false" native="false" return="com.annimon.stream.Stream&lt;T&gt;" jni-return="Lcom/annimon/stream/Stream&lt;TT;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="distinctBy" jni-signature="(Lcom/annimon/stream/function/Function;)Lcom/annimon/stream/Stream;" bridge="false" native="false" return="com.annimon.stream.Stream&lt;T&gt;" jni-return="Lcom/annimon/stream/Stream&lt;TT;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="K" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="classifier" type="com.annimon.stream.function.Function&lt;? super T, ? extends K&gt;" jni-type="Lcom/annimon/stream/function/Function&lt;-TT;+TK;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="dropWhile" jni-signature="(Lcom/annimon/stream/function/Predicate;)Lcom/annimon/stream/Stream;" bridge="false" native="false" return="com.annimon.stream.Stream&lt;T&gt;" jni-return="Lcom/annimon/stream/Stream&lt;TT;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="predicate" type="com.annimon.stream.function.Predicate&lt;? super T&gt;" jni-type="Lcom/annimon/stream/function/Predicate&lt;-TT;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="dropWhileIndexed" jni-signature="(Lcom/annimon/stream/function/IndexedPredicate;)Lcom/annimon/stream/Stream;" bridge="false" native="false" return="com.annimon.stream.Stream&lt;T&gt;" jni-return="Lcom/annimon/stream/Stream&lt;TT;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="predicate" type="com.annimon.stream.function.IndexedPredicate&lt;? super T&gt;" jni-type="Lcom/annimon/stream/function/IndexedPredicate&lt;-TT;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="dropWhileIndexed" jni-signature="(IILcom/annimon/stream/function/IndexedPredicate;)Lcom/annimon/stream/Stream;" bridge="false" native="false" return="com.annimon.stream.Stream&lt;T&gt;" jni-return="Lcom/annimon/stream/Stream&lt;TT;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="from" type="int" jni-type="I"></parameter>
        <parameter name="step" type="int" jni-type="I"></parameter>
        <parameter name="predicate" type="com.annimon.stream.function.IndexedPredicate&lt;? super T&gt;" jni-type="Lcom/annimon/stream/function/IndexedPredicate&lt;-TT;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="empty" jni-signature="()Lcom/annimon/stream/Stream;" bridge="false" native="false" return="com.annimon.stream.Stream&lt;T&gt;" jni-return="Lcom/annimon/stream/Stream&lt;TT;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="equalsOnly" jni-signature="(Ljava/lang/Object;)Lcom/annimon/stream/Stream;" bridge="false" native="false" return="com.annimon.stream.Stream&lt;T&gt;" jni-return="Lcom/annimon/stream/Stream&lt;TT;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="object" type="T" jni-type="TT;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="filter" jni-signature="(Lcom/annimon/stream/function/Predicate;)Lcom/annimon/stream/Stream;" bridge="false" native="false" return="com.annimon.stream.Stream&lt;T&gt;" jni-return="Lcom/annimon/stream/Stream&lt;TT;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="predicate" type="com.annimon.stream.function.Predicate&lt;? super T&gt;" jni-type="Lcom/annimon/stream/function/Predicate&lt;-TT;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="filterIndexed" jni-signature="(Lcom/annimon/stream/function/IndexedPredicate;)Lcom/annimon/stream/Stream;" bridge="false" native="false" return="com.annimon.stream.Stream&lt;T&gt;" jni-return="Lcom/annimon/stream/Stream&lt;TT;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="predicate" type="com.annimon.stream.function.IndexedPredicate&lt;? super T&gt;" jni-type="Lcom/annimon/stream/function/IndexedPredicate&lt;-TT;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="filterIndexed" jni-signature="(IILcom/annimon/stream/function/IndexedPredicate;)Lcom/annimon/stream/Stream;" bridge="false" native="false" return="com.annimon.stream.Stream&lt;T&gt;" jni-return="Lcom/annimon/stream/Stream&lt;TT;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="from" type="int" jni-type="I"></parameter>
        <parameter name="step" type="int" jni-type="I"></parameter>
        <parameter name="predicate" type="com.annimon.stream.function.IndexedPredicate&lt;? super T&gt;" jni-type="Lcom/annimon/stream/function/IndexedPredicate&lt;-TT;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="filterNot" jni-signature="(Lcom/annimon/stream/function/Predicate;)Lcom/annimon/stream/Stream;" bridge="false" native="false" return="com.annimon.stream.Stream&lt;T&gt;" jni-return="Lcom/annimon/stream/Stream&lt;TT;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="predicate" type="com.annimon.stream.function.Predicate&lt;? super T&gt;" jni-type="Lcom/annimon/stream/function/Predicate&lt;-TT;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="findFirst" jni-signature="()Lcom/annimon/stream/Optional;" bridge="false" native="false" return="com.annimon.stream.Optional&lt;T&gt;" jni-return="Lcom/annimon/stream/Optional&lt;TT;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="findIndexed" jni-signature="(Lcom/annimon/stream/function/IndexedPredicate;)Lcom/annimon/stream/Optional;" bridge="false" native="false" return="com.annimon.stream.Optional&lt;com.annimon.stream.IntPair&lt;T&gt;&gt;" jni-return="Lcom/annimon/stream/Optional&lt;Lcom/annimon/stream/IntPair&lt;TT;&gt;;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="predicate" type="com.annimon.stream.function.IndexedPredicate&lt;? super T&gt;" jni-type="Lcom/annimon/stream/function/IndexedPredicate&lt;-TT;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="findIndexed" jni-signature="(IILcom/annimon/stream/function/IndexedPredicate;)Lcom/annimon/stream/Optional;" bridge="false" native="false" return="com.annimon.stream.Optional&lt;com.annimon.stream.IntPair&lt;T&gt;&gt;" jni-return="Lcom/annimon/stream/Optional&lt;Lcom/annimon/stream/IntPair&lt;TT;&gt;;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="from" type="int" jni-type="I"></parameter>
        <parameter name="step" type="int" jni-type="I"></parameter>
        <parameter name="predicate" type="com.annimon.stream.function.IndexedPredicate&lt;? super T&gt;" jni-type="Lcom/annimon/stream/function/IndexedPredicate&lt;-TT;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="findLast" jni-signature="()Lcom/annimon/stream/Optional;" bridge="false" native="false" return="com.annimon.stream.Optional&lt;T&gt;" jni-return="Lcom/annimon/stream/Optional&lt;TT;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="findSingle" jni-signature="()Lcom/annimon/stream/Optional;" bridge="false" native="false" return="com.annimon.stream.Optional&lt;T&gt;" jni-return="Lcom/annimon/stream/Optional&lt;TT;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="flatMap" jni-signature="(Lcom/annimon/stream/function/Function;)Lcom/annimon/stream/Stream;" bridge="false" native="false" return="com.annimon.stream.Stream&lt;R&gt;" jni-return="Lcom/annimon/stream/Stream&lt;TR;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="R" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="mapper" type="com.annimon.stream.function.Function&lt;? super T, ? extends com.annimon.stream.Stream&lt;? extends R&gt;&gt;" jni-type="Lcom/annimon/stream/function/Function&lt;-TT;+Lcom/annimon/stream/Stream&lt;+TR;&gt;;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="flatMapToDouble" jni-signature="(Lcom/annimon/stream/function/Function;)Lcom/annimon/stream/DoubleStream;" bridge="false" native="false" return="com.annimon.stream.DoubleStream" jni-return="Lcom/annimon/stream/DoubleStream;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="mapper" type="com.annimon.stream.function.Function&lt;? super T, ? extends com.annimon.stream.DoubleStream&gt;" jni-type="Lcom/annimon/stream/function/Function&lt;-TT;+Lcom/annimon/stream/DoubleStream;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="flatMapToInt" jni-signature="(Lcom/annimon/stream/function/Function;)Lcom/annimon/stream/IntStream;" bridge="false" native="false" return="com.annimon.stream.IntStream" jni-return="Lcom/annimon/stream/IntStream;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="mapper" type="com.annimon.stream.function.Function&lt;? super T, ? extends com.annimon.stream.IntStream&gt;" jni-type="Lcom/annimon/stream/function/Function&lt;-TT;+Lcom/annimon/stream/IntStream;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="flatMapToLong" jni-signature="(Lcom/annimon/stream/function/Function;)Lcom/annimon/stream/LongStream;" bridge="false" native="false" return="com.annimon.stream.LongStream" jni-return="Lcom/annimon/stream/LongStream;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="mapper" type="com.annimon.stream.function.Function&lt;? super T, ? extends com.annimon.stream.LongStream&gt;" jni-type="Lcom/annimon/stream/function/Function&lt;-TT;+Lcom/annimon/stream/LongStream;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="forEach" jni-signature="(Lcom/annimon/stream/function/Consumer;)V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="action" type="com.annimon.stream.function.Consumer&lt;? super T&gt;" jni-type="Lcom/annimon/stream/function/Consumer&lt;-TT;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="forEachIndexed" jni-signature="(Lcom/annimon/stream/function/IndexedConsumer;)V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="action" type="com.annimon.stream.function.IndexedConsumer&lt;? super T&gt;" jni-type="Lcom/annimon/stream/function/IndexedConsumer&lt;-TT;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="forEachIndexed" jni-signature="(IILcom/annimon/stream/function/IndexedConsumer;)V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="from" type="int" jni-type="I"></parameter>
        <parameter name="step" type="int" jni-type="I"></parameter>
        <parameter name="action" type="com.annimon.stream.function.IndexedConsumer&lt;? super T&gt;" jni-type="Lcom/annimon/stream/function/IndexedConsumer&lt;-TT;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="generate" jni-signature="(Lcom/annimon/stream/function/Supplier;)Lcom/annimon/stream/Stream;" bridge="false" native="false" return="com.annimon.stream.Stream&lt;T&gt;" jni-return="Lcom/annimon/stream/Stream&lt;TT;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="supplier" type="com.annimon.stream.function.Supplier&lt;T&gt;" jni-type="Lcom/annimon/stream/function/Supplier&lt;TT;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="groupBy" jni-signature="(Lcom/annimon/stream/function/Function;)Lcom/annimon/stream/Stream;" bridge="false" native="false" return="com.annimon.stream.Stream&lt;java.util.Map.Entry&lt;K, java.util.List&lt;T&gt;&gt;&gt;" jni-return="Lcom/annimon/stream/Stream&lt;Ljava/util/Map$Entry&lt;TK;Ljava/util/List&lt;TT;&gt;;&gt;;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="K" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="classifier" type="com.annimon.stream.function.Function&lt;? super T, ? extends K&gt;" jni-type="Lcom/annimon/stream/function/Function&lt;-TT;+TK;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="indexed" jni-signature="()Lcom/annimon/stream/Stream;" bridge="false" native="false" return="com.annimon.stream.Stream&lt;com.annimon.stream.IntPair&lt;T&gt;&gt;" jni-return="Lcom/annimon/stream/Stream&lt;Lcom/annimon/stream/IntPair&lt;TT;&gt;;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="indexed" jni-signature="(II)Lcom/annimon/stream/Stream;" bridge="false" native="false" return="com.annimon.stream.Stream&lt;com.annimon.stream.IntPair&lt;T&gt;&gt;" jni-return="Lcom/annimon/stream/Stream&lt;Lcom/annimon/stream/IntPair&lt;TT;&gt;;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="from" type="int" jni-type="I"></parameter>
        <parameter name="step" type="int" jni-type="I"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="iterate" jni-signature="(Ljava/lang/Object;Lcom/annimon/stream/function/Predicate;Lcom/annimon/stream/function/UnaryOperator;)Lcom/annimon/stream/Stream;" bridge="false" native="false" return="com.annimon.stream.Stream&lt;T&gt;" jni-return="Lcom/annimon/stream/Stream&lt;TT;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="seed" type="T" jni-type="TT;"></parameter>
        <parameter name="predicate" type="com.annimon.stream.function.Predicate&lt;? super T&gt;" jni-type="Lcom/annimon/stream/function/Predicate&lt;-TT;&gt;;"></parameter>
        <parameter name="op" type="com.annimon.stream.function.UnaryOperator&lt;T&gt;" jni-type="Lcom/annimon/stream/function/UnaryOperator&lt;TT;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="iterate" jni-signature="(Ljava/lang/Object;Lcom/annimon/stream/function/UnaryOperator;)Lcom/annimon/stream/Stream;" bridge="false" native="false" return="com.annimon.stream.Stream&lt;T&gt;" jni-return="Lcom/annimon/stream/Stream&lt;TT;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="seed" type="T" jni-type="TT;"></parameter>
        <parameter name="op" type="com.annimon.stream.function.UnaryOperator&lt;T&gt;" jni-type="Lcom/annimon/stream/function/UnaryOperator&lt;TT;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="iterator" jni-signature="()Ljava/util/Iterator;" bridge="false" native="false" return="java.util.Iterator&lt;? extends T&gt;" jni-return="Ljava/util/Iterator&lt;+TT;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="limit" jni-signature="(J)Lcom/annimon/stream/Stream;" bridge="false" native="false" return="com.annimon.stream.Stream&lt;T&gt;" jni-return="Lcom/annimon/stream/Stream&lt;TT;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="maxSize" type="long" jni-type="J"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="map" jni-signature="(Lcom/annimon/stream/function/Function;)Lcom/annimon/stream/Stream;" bridge="false" native="false" return="com.annimon.stream.Stream&lt;R&gt;" jni-return="Lcom/annimon/stream/Stream&lt;TR;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="R" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="mapper" type="com.annimon.stream.function.Function&lt;? super T, ? extends R&gt;" jni-type="Lcom/annimon/stream/function/Function&lt;-TT;+TR;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="mapIndexed" jni-signature="(Lcom/annimon/stream/function/IndexedFunction;)Lcom/annimon/stream/Stream;" bridge="false" native="false" return="com.annimon.stream.Stream&lt;R&gt;" jni-return="Lcom/annimon/stream/Stream&lt;TR;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="R" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="mapper" type="com.annimon.stream.function.IndexedFunction&lt;? super T, ? extends R&gt;" jni-type="Lcom/annimon/stream/function/IndexedFunction&lt;-TT;+TR;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="mapIndexed" jni-signature="(IILcom/annimon/stream/function/IndexedFunction;)Lcom/annimon/stream/Stream;" bridge="false" native="false" return="com.annimon.stream.Stream&lt;R&gt;" jni-return="Lcom/annimon/stream/Stream&lt;TR;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="R" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="from" type="int" jni-type="I"></parameter>
        <parameter name="step" type="int" jni-type="I"></parameter>
        <parameter name="mapper" type="com.annimon.stream.function.IndexedFunction&lt;? super T, ? extends R&gt;" jni-type="Lcom/annimon/stream/function/IndexedFunction&lt;-TT;+TR;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="mapToDouble" jni-signature="(Lcom/annimon/stream/function/ToDoubleFunction;)Lcom/annimon/stream/DoubleStream;" bridge="false" native="false" return="com.annimon.stream.DoubleStream" jni-return="Lcom/annimon/stream/DoubleStream;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="mapper" type="com.annimon.stream.function.ToDoubleFunction&lt;? super T&gt;" jni-type="Lcom/annimon/stream/function/ToDoubleFunction&lt;-TT;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="mapToInt" jni-signature="(Lcom/annimon/stream/function/ToIntFunction;)Lcom/annimon/stream/IntStream;" bridge="false" native="false" return="com.annimon.stream.IntStream" jni-return="Lcom/annimon/stream/IntStream;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="mapper" type="com.annimon.stream.function.ToIntFunction&lt;? super T&gt;" jni-type="Lcom/annimon/stream/function/ToIntFunction&lt;-TT;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="mapToLong" jni-signature="(Lcom/annimon/stream/function/ToLongFunction;)Lcom/annimon/stream/LongStream;" bridge="false" native="false" return="com.annimon.stream.LongStream" jni-return="Lcom/annimon/stream/LongStream;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="mapper" type="com.annimon.stream.function.ToLongFunction&lt;? super T&gt;" jni-type="Lcom/annimon/stream/function/ToLongFunction&lt;-TT;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="max" jni-signature="(Ljava/util/Comparator;)Lcom/annimon/stream/Optional;" bridge="false" native="false" return="com.annimon.stream.Optional&lt;T&gt;" jni-return="Lcom/annimon/stream/Optional&lt;TT;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="comparator" type="java.util.Comparator&lt;? super T&gt;" jni-type="Ljava/util/Comparator&lt;-TT;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="merge" jni-signature="(Lcom/annimon/stream/Stream;Lcom/annimon/stream/Stream;Lcom/annimon/stream/function/BiFunction;)Lcom/annimon/stream/Stream;" bridge="false" native="false" return="com.annimon.stream.Stream&lt;T&gt;" jni-return="Lcom/annimon/stream/Stream&lt;TT;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="stream1" type="com.annimon.stream.Stream&lt;? extends T&gt;" jni-type="Lcom/annimon/stream/Stream&lt;+TT;&gt;;"></parameter>
        <parameter name="stream2" type="com.annimon.stream.Stream&lt;? extends T&gt;" jni-type="Lcom/annimon/stream/Stream&lt;+TT;&gt;;"></parameter>
        <parameter name="selector" type="com.annimon.stream.function.BiFunction&lt;? super T, ? super T, com.annimon.stream.operator.ObjMerge.MergeResult&gt;" jni-type="Lcom/annimon/stream/function/BiFunction&lt;-TT;-TT;Lcom/annimon/stream/operator/ObjMerge$MergeResult;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="merge" jni-signature="(Ljava/util/Iterator;Ljava/util/Iterator;Lcom/annimon/stream/function/BiFunction;)Lcom/annimon/stream/Stream;" bridge="false" native="false" return="com.annimon.stream.Stream&lt;T&gt;" jni-return="Lcom/annimon/stream/Stream&lt;TT;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="iterator1" type="java.util.Iterator&lt;? extends T&gt;" jni-type="Ljava/util/Iterator&lt;+TT;&gt;;"></parameter>
        <parameter name="iterator2" type="java.util.Iterator&lt;? extends T&gt;" jni-type="Ljava/util/Iterator&lt;+TT;&gt;;"></parameter>
        <parameter name="selector" type="com.annimon.stream.function.BiFunction&lt;? super T, ? super T, com.annimon.stream.operator.ObjMerge.MergeResult&gt;" jni-type="Lcom/annimon/stream/function/BiFunction&lt;-TT;-TT;Lcom/annimon/stream/operator/ObjMerge$MergeResult;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="min" jni-signature="(Ljava/util/Comparator;)Lcom/annimon/stream/Optional;" bridge="false" native="false" return="com.annimon.stream.Optional&lt;T&gt;" jni-return="Lcom/annimon/stream/Optional&lt;TT;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="comparator" type="java.util.Comparator&lt;? super T&gt;" jni-type="Ljava/util/Comparator&lt;-TT;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="noneMatch" jni-signature="(Lcom/annimon/stream/function/Predicate;)Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="predicate" type="com.annimon.stream.function.Predicate&lt;? super T&gt;" jni-type="Lcom/annimon/stream/function/Predicate&lt;-TT;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="nullsOnly" jni-signature="()Lcom/annimon/stream/Stream;" bridge="false" native="false" return="com.annimon.stream.Stream&lt;T&gt;" jni-return="Lcom/annimon/stream/Stream&lt;TT;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="of" jni-signature="(Ljava/lang/Iterable;)Lcom/annimon/stream/Stream;" bridge="false" native="false" return="com.annimon.stream.Stream&lt;T&gt;" jni-return="Lcom/annimon/stream/Stream&lt;TT;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="iterable" type="java.lang.Iterable&lt;? extends T&gt;" jni-type="Ljava/lang/Iterable&lt;+TT;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="of" jni-signature="(Ljava/util/Iterator;)Lcom/annimon/stream/Stream;" bridge="false" native="false" return="com.annimon.stream.Stream&lt;T&gt;" jni-return="Lcom/annimon/stream/Stream&lt;TT;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="iterator" type="java.util.Iterator&lt;? extends T&gt;" jni-type="Ljava/util/Iterator&lt;+TT;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="of" jni-signature="(Ljava/util/Map;)Lcom/annimon/stream/Stream;" bridge="false" native="false" return="com.annimon.stream.Stream&lt;java.util.Map.Entry&lt;K, V&gt;&gt;" jni-return="Lcom/annimon/stream/Stream&lt;Ljava/util/Map$Entry&lt;TK;TV;&gt;;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="K" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
          <typeParameter name="V" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="map" type="java.util.Map&lt;K, V&gt;" jni-type="Ljava/util/Map&lt;TK;TV;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="of" jni-signature="([Ljava/lang/Object;)Lcom/annimon/stream/Stream;" bridge="false" native="false" return="com.annimon.stream.Stream&lt;T&gt;" jni-return="Lcom/annimon/stream/Stream&lt;TT;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="elements" type="T..." jni-type="[TT;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="ofNullable" jni-signature="(Ljava/lang/Iterable;)Lcom/annimon/stream/Stream;" bridge="false" native="false" return="com.annimon.stream.Stream&lt;T&gt;" jni-return="Lcom/annimon/stream/Stream&lt;TT;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="iterable" type="java.lang.Iterable&lt;? extends T&gt;" jni-type="Ljava/lang/Iterable&lt;+TT;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="ofNullable" jni-signature="(Ljava/util/Iterator;)Lcom/annimon/stream/Stream;" bridge="false" native="false" return="com.annimon.stream.Stream&lt;T&gt;" jni-return="Lcom/annimon/stream/Stream&lt;TT;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="iterator" type="java.util.Iterator&lt;? extends T&gt;" jni-type="Ljava/util/Iterator&lt;+TT;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="ofNullable" jni-signature="(Ljava/util/Map;)Lcom/annimon/stream/Stream;" bridge="false" native="false" return="com.annimon.stream.Stream&lt;java.util.Map.Entry&lt;K, V&gt;&gt;" jni-return="Lcom/annimon/stream/Stream&lt;Ljava/util/Map$Entry&lt;TK;TV;&gt;;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="K" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
          <typeParameter name="V" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="map" type="java.util.Map&lt;K, V&gt;" jni-type="Ljava/util/Map&lt;TK;TV;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="ofNullable" jni-signature="(Ljava/lang/Object;)Lcom/annimon/stream/Stream;" bridge="false" native="false" return="com.annimon.stream.Stream&lt;T&gt;" jni-return="Lcom/annimon/stream/Stream&lt;TT;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="element" type="T" jni-type="TT;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="ofNullable" jni-signature="([Ljava/lang/Object;)Lcom/annimon/stream/Stream;" bridge="false" native="false" return="com.annimon.stream.Stream&lt;T&gt;" jni-return="Lcom/annimon/stream/Stream&lt;TT;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="array" type="T[]" jni-type="[TT;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="onClose" jni-signature="(Ljava/lang/Runnable;)Lcom/annimon/stream/Stream;" bridge="false" native="false" return="com.annimon.stream.Stream&lt;T&gt;" jni-return="Lcom/annimon/stream/Stream&lt;TT;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="closeHandler" type="java.lang.Runnable" jni-type="Ljava/lang/Runnable;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="peek" jni-signature="(Lcom/annimon/stream/function/Consumer;)Lcom/annimon/stream/Stream;" bridge="false" native="false" return="com.annimon.stream.Stream&lt;T&gt;" jni-return="Lcom/annimon/stream/Stream&lt;TT;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="action" type="com.annimon.stream.function.Consumer&lt;? super T&gt;" jni-type="Lcom/annimon/stream/function/Consumer&lt;-TT;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="range" jni-signature="(II)Lcom/annimon/stream/Stream;" bridge="false" native="false" return="com.annimon.stream.Stream&lt;java.lang.Integer&gt;" jni-return="Lcom/annimon/stream/Stream&lt;Ljava/lang/Integer;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="from" type="int" jni-type="I"></parameter>
        <parameter name="to" type="int" jni-type="I"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="range" jni-signature="(JJ)Lcom/annimon/stream/Stream;" bridge="false" native="false" return="com.annimon.stream.Stream&lt;java.lang.Long&gt;" jni-return="Lcom/annimon/stream/Stream&lt;Ljava/lang/Long;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="from" type="long" jni-type="J"></parameter>
        <parameter name="to" type="long" jni-type="J"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="rangeClosed" jni-signature="(II)Lcom/annimon/stream/Stream;" bridge="false" native="false" return="com.annimon.stream.Stream&lt;java.lang.Integer&gt;" jni-return="Lcom/annimon/stream/Stream&lt;Ljava/lang/Integer;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="from" type="int" jni-type="I"></parameter>
        <parameter name="to" type="int" jni-type="I"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="rangeClosed" jni-signature="(JJ)Lcom/annimon/stream/Stream;" bridge="false" native="false" return="com.annimon.stream.Stream&lt;java.lang.Long&gt;" jni-return="Lcom/annimon/stream/Stream&lt;Ljava/lang/Long;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="from" type="long" jni-type="J"></parameter>
        <parameter name="to" type="long" jni-type="J"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="reduce" jni-signature="(Lcom/annimon/stream/function/BiFunction;)Lcom/annimon/stream/Optional;" bridge="false" native="false" return="com.annimon.stream.Optional&lt;T&gt;" jni-return="Lcom/annimon/stream/Optional&lt;TT;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="accumulator" type="com.annimon.stream.function.BiFunction&lt;T, T, T&gt;" jni-type="Lcom/annimon/stream/function/BiFunction&lt;TT;TT;TT;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="reduce" jni-signature="(Ljava/lang/Object;Lcom/annimon/stream/function/BiFunction;)Ljava/lang/Object;" bridge="false" native="false" return="R" jni-return="TR;" static="false" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="R" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="identity" type="R" jni-type="TR;"></parameter>
        <parameter name="accumulator" type="com.annimon.stream.function.BiFunction&lt;? super R, ? super T, ? extends R&gt;" jni-type="Lcom/annimon/stream/function/BiFunction&lt;-TR;-TT;+TR;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="reduceIndexed" jni-signature="(IILjava/lang/Object;Lcom/annimon/stream/function/IndexedBiFunction;)Ljava/lang/Object;" bridge="false" native="false" return="R" jni-return="TR;" static="false" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="R" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="from" type="int" jni-type="I"></parameter>
        <parameter name="step" type="int" jni-type="I"></parameter>
        <parameter name="identity" type="R" jni-type="TR;"></parameter>
        <parameter name="accumulator" type="com.annimon.stream.function.IndexedBiFunction&lt;? super R, ? super T, ? extends R&gt;" jni-type="Lcom/annimon/stream/function/IndexedBiFunction&lt;-TR;-TT;+TR;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="reduceIndexed" jni-signature="(Ljava/lang/Object;Lcom/annimon/stream/function/IndexedBiFunction;)Ljava/lang/Object;" bridge="false" native="false" return="R" jni-return="TR;" static="false" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="R" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="identity" type="R" jni-type="TR;"></parameter>
        <parameter name="accumulator" type="com.annimon.stream.function.IndexedBiFunction&lt;? super R, ? super T, ? extends R&gt;" jni-type="Lcom/annimon/stream/function/IndexedBiFunction&lt;-TR;-TT;+TR;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="sample" jni-signature="(I)Lcom/annimon/stream/Stream;" bridge="false" native="false" return="com.annimon.stream.Stream&lt;T&gt;" jni-return="Lcom/annimon/stream/Stream&lt;TT;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="stepWidth" type="int" jni-type="I"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="scan" jni-signature="(Lcom/annimon/stream/function/BiFunction;)Lcom/annimon/stream/Stream;" bridge="false" native="false" return="com.annimon.stream.Stream&lt;T&gt;" jni-return="Lcom/annimon/stream/Stream&lt;TT;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="accumulator" type="com.annimon.stream.function.BiFunction&lt;T, T, T&gt;" jni-type="Lcom/annimon/stream/function/BiFunction&lt;TT;TT;TT;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="scan" jni-signature="(Ljava/lang/Object;Lcom/annimon/stream/function/BiFunction;)Lcom/annimon/stream/Stream;" bridge="false" native="false" return="com.annimon.stream.Stream&lt;R&gt;" jni-return="Lcom/annimon/stream/Stream&lt;TR;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="R" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="identity" type="R" jni-type="TR;"></parameter>
        <parameter name="accumulator" type="com.annimon.stream.function.BiFunction&lt;? super R, ? super T, ? extends R&gt;" jni-type="Lcom/annimon/stream/function/BiFunction&lt;-TR;-TT;+TR;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="select" jni-signature="(Ljava/lang/Class;)Lcom/annimon/stream/Stream;" bridge="false" native="false" return="com.annimon.stream.Stream&lt;TT&gt;" jni-return="Lcom/annimon/stream/Stream&lt;TTT;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="TT" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="clazz" type="java.lang.Class&lt;TT&gt;" jni-type="Ljava/lang/Class&lt;TTT;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="single" jni-signature="()Ljava/lang/Object;" bridge="false" native="false" return="T" jni-return="TT;" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="skip" jni-signature="(J)Lcom/annimon/stream/Stream;" bridge="false" native="false" return="com.annimon.stream.Stream&lt;T&gt;" jni-return="Lcom/annimon/stream/Stream&lt;TT;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="n" type="long" jni-type="J"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="slidingWindow" jni-signature="(I)Lcom/annimon/stream/Stream;" bridge="false" native="false" return="com.annimon.stream.Stream&lt;java.util.List&lt;T&gt;&gt;" jni-return="Lcom/annimon/stream/Stream&lt;Ljava/util/List&lt;TT;&gt;;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="windowSize" type="int" jni-type="I"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="slidingWindow" jni-signature="(II)Lcom/annimon/stream/Stream;" bridge="false" native="false" return="com.annimon.stream.Stream&lt;java.util.List&lt;T&gt;&gt;" jni-return="Lcom/annimon/stream/Stream&lt;Ljava/util/List&lt;TT;&gt;;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="windowSize" type="int" jni-type="I"></parameter>
        <parameter name="stepWidth" type="int" jni-type="I"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="sortBy" jni-signature="(Lcom/annimon/stream/function/Function;)Lcom/annimon/stream/Stream;" bridge="false" native="false" return="com.annimon.stream.Stream&lt;T&gt;" jni-return="Lcom/annimon/stream/Stream&lt;TT;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="R" interfaceBounds="java.lang.Comparable&lt;? super R&gt;" jni-interfaceBounds="Ljava/lang/Comparable&lt;-TR;&gt;;">
            <genericConstraints>
              <genericConstraint type="java.lang.Comparable&lt;? super R&gt;"></genericConstraint>
            </genericConstraints>
          </typeParameter>
        </typeParameters>
        <parameter name="f" type="com.annimon.stream.function.Function&lt;? super T, ? extends R&gt;" jni-type="Lcom/annimon/stream/function/Function&lt;-TT;+TR;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="sorted" jni-signature="()Lcom/annimon/stream/Stream;" bridge="false" native="false" return="com.annimon.stream.Stream&lt;T&gt;" jni-return="Lcom/annimon/stream/Stream&lt;TT;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="sorted" jni-signature="(Ljava/util/Comparator;)Lcom/annimon/stream/Stream;" bridge="false" native="false" return="com.annimon.stream.Stream&lt;T&gt;" jni-return="Lcom/annimon/stream/Stream&lt;TT;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="comparator" type="java.util.Comparator&lt;? super T&gt;" jni-type="Ljava/util/Comparator&lt;-TT;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="takeUntil" jni-signature="(Lcom/annimon/stream/function/Predicate;)Lcom/annimon/stream/Stream;" bridge="false" native="false" return="com.annimon.stream.Stream&lt;T&gt;" jni-return="Lcom/annimon/stream/Stream&lt;TT;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="stopPredicate" type="com.annimon.stream.function.Predicate&lt;? super T&gt;" jni-type="Lcom/annimon/stream/function/Predicate&lt;-TT;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="takeUntilIndexed" jni-signature="(Lcom/annimon/stream/function/IndexedPredicate;)Lcom/annimon/stream/Stream;" bridge="false" native="false" return="com.annimon.stream.Stream&lt;T&gt;" jni-return="Lcom/annimon/stream/Stream&lt;TT;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="stopPredicate" type="com.annimon.stream.function.IndexedPredicate&lt;? super T&gt;" jni-type="Lcom/annimon/stream/function/IndexedPredicate&lt;-TT;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="takeUntilIndexed" jni-signature="(IILcom/annimon/stream/function/IndexedPredicate;)Lcom/annimon/stream/Stream;" bridge="false" native="false" return="com.annimon.stream.Stream&lt;T&gt;" jni-return="Lcom/annimon/stream/Stream&lt;TT;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="from" type="int" jni-type="I"></parameter>
        <parameter name="step" type="int" jni-type="I"></parameter>
        <parameter name="stopPredicate" type="com.annimon.stream.function.IndexedPredicate&lt;? super T&gt;" jni-type="Lcom/annimon/stream/function/IndexedPredicate&lt;-TT;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="takeWhile" jni-signature="(Lcom/annimon/stream/function/Predicate;)Lcom/annimon/stream/Stream;" bridge="false" native="false" return="com.annimon.stream.Stream&lt;T&gt;" jni-return="Lcom/annimon/stream/Stream&lt;TT;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="predicate" type="com.annimon.stream.function.Predicate&lt;? super T&gt;" jni-type="Lcom/annimon/stream/function/Predicate&lt;-TT;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="takeWhileIndexed" jni-signature="(Lcom/annimon/stream/function/IndexedPredicate;)Lcom/annimon/stream/Stream;" bridge="false" native="false" return="com.annimon.stream.Stream&lt;T&gt;" jni-return="Lcom/annimon/stream/Stream&lt;TT;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="predicate" type="com.annimon.stream.function.IndexedPredicate&lt;? super T&gt;" jni-type="Lcom/annimon/stream/function/IndexedPredicate&lt;-TT;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="takeWhileIndexed" jni-signature="(IILcom/annimon/stream/function/IndexedPredicate;)Lcom/annimon/stream/Stream;" bridge="false" native="false" return="com.annimon.stream.Stream&lt;T&gt;" jni-return="Lcom/annimon/stream/Stream&lt;TT;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="from" type="int" jni-type="I"></parameter>
        <parameter name="step" type="int" jni-type="I"></parameter>
        <parameter name="predicate" type="com.annimon.stream.function.IndexedPredicate&lt;? super T&gt;" jni-type="Lcom/annimon/stream/function/IndexedPredicate&lt;-TT;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="toArray" jni-signature="()[Ljava/lang/Object;" bridge="false" native="false" return="java.lang.Object[]" jni-return="[Ljava/lang/Object;" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="toArray" jni-signature="(Lcom/annimon/stream/function/IntFunction;)[Ljava/lang/Object;" bridge="false" native="false" return="R[]" jni-return="[TR;" static="false" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="R" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="generator" type="com.annimon.stream.function.IntFunction&lt;R[]&gt;" jni-type="Lcom/annimon/stream/function/IntFunction&lt;[TR;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="toList" jni-signature="()Ljava/util/List;" bridge="false" native="false" return="java.util.List&lt;T&gt;" jni-return="Ljava/util/List&lt;TT;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="withoutNulls" jni-signature="()Lcom/annimon/stream/Stream;" bridge="false" native="false" return="com.annimon.stream.Stream&lt;T&gt;" jni-return="Lcom/annimon/stream/Stream&lt;TT;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="zip" jni-signature="(Lcom/annimon/stream/Stream;Lcom/annimon/stream/Stream;Lcom/annimon/stream/function/BiFunction;)Lcom/annimon/stream/Stream;" bridge="false" native="false" return="com.annimon.stream.Stream&lt;R&gt;" jni-return="Lcom/annimon/stream/Stream&lt;TR;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="F" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
          <typeParameter name="S" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
          <typeParameter name="R" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="stream1" type="com.annimon.stream.Stream&lt;? extends F&gt;" jni-type="Lcom/annimon/stream/Stream&lt;+TF;&gt;;"></parameter>
        <parameter name="stream2" type="com.annimon.stream.Stream&lt;? extends S&gt;" jni-type="Lcom/annimon/stream/Stream&lt;+TS;&gt;;"></parameter>
        <parameter name="combiner" type="com.annimon.stream.function.BiFunction&lt;? super F, ? super S, ? extends R&gt;" jni-type="Lcom/annimon/stream/function/BiFunction&lt;-TF;-TS;+TR;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="zip" jni-signature="(Ljava/util/Iterator;Ljava/util/Iterator;Lcom/annimon/stream/function/BiFunction;)Lcom/annimon/stream/Stream;" bridge="false" native="false" return="com.annimon.stream.Stream&lt;R&gt;" jni-return="Lcom/annimon/stream/Stream&lt;TR;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="F" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
          <typeParameter name="S" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
          <typeParameter name="R" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="iterator1" type="java.util.Iterator&lt;? extends F&gt;" jni-type="Ljava/util/Iterator&lt;+TF;&gt;;"></parameter>
        <parameter name="iterator2" type="java.util.Iterator&lt;? extends S&gt;" jni-type="Ljava/util/Iterator&lt;+TS;&gt;;"></parameter>
        <parameter name="combiner" type="com.annimon.stream.function.BiFunction&lt;? super F, ? super S, ? extends R&gt;" jni-type="Lcom/annimon/stream/function/BiFunction&lt;-TF;-TS;+TR;&gt;;"></parameter>
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="false" name="Stream.6" static="false" visibility="" jni-signature="Lcom/annimon/stream/Stream$6;">
      <implements name="com.annimon.stream.function.IntFunction" name-generic-aware="com.annimon.stream.function.IntFunction&lt;java.lang.Object[]&gt;" jni-type="Lcom/annimon/stream/function/IntFunction&lt;[Ljava/lang/Object;&gt;;"></implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="apply" jni-signature="(I)[Ljava/lang/Object;" bridge="false" native="false" return="java.lang.Object[]" jni-return="[Ljava/lang/Object;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="value" type="int" jni-type="I"></parameter>
      </method>
    </class>
  </package>
  <package name="com.annimon.stream.function" jni-name="com/annimon/stream/function">
    <interface abstract="true" deprecated="not deprecated" final="false" name="BiConsumer" static="false" visibility="public" jni-signature="Lcom/annimon/stream/function/BiConsumer;">
      <typeParameters>
        <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        <typeParameter name="U" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
      </typeParameters>
      <method abstract="true" deprecated="not deprecated" final="false" name="accept" jni-signature="(Ljava/lang/Object;Ljava/lang/Object;)V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="p0" type="T" jni-type="TT;"></parameter>
        <parameter name="p1" type="U" jni-type="TU;"></parameter>
      </method>
    </interface>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="false" name="BiConsumer.Util" static="true" visibility="public" jni-signature="Lcom/annimon/stream/function/BiConsumer$Util;">
      <method abstract="false" deprecated="not deprecated" final="false" name="andThen" jni-signature="(Lcom/annimon/stream/function/BiConsumer;Lcom/annimon/stream/function/BiConsumer;)Lcom/annimon/stream/function/BiConsumer;" bridge="false" native="false" return="com.annimon.stream.function.BiConsumer&lt;T, U&gt;" jni-return="Lcom/annimon/stream/function/BiConsumer&lt;TT;TU;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
          <typeParameter name="U" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="c1" type="com.annimon.stream.function.BiConsumer&lt;? super T, ? super U&gt;" jni-type="Lcom/annimon/stream/function/BiConsumer&lt;-TT;-TU;&gt;;"></parameter>
        <parameter name="c2" type="com.annimon.stream.function.BiConsumer&lt;? super T, ? super U&gt;" jni-type="Lcom/annimon/stream/function/BiConsumer&lt;-TT;-TU;&gt;;"></parameter>
      </method>
    </class>
    <interface abstract="true" deprecated="not deprecated" final="false" name="BiFunction" static="false" visibility="public" jni-signature="Lcom/annimon/stream/function/BiFunction;">
      <typeParameters>
        <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        <typeParameter name="U" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        <typeParameter name="R" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
      </typeParameters>
      <method abstract="true" deprecated="not deprecated" final="false" name="apply" jni-signature="(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" bridge="false" native="false" return="R" jni-return="TR;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="p0" type="T" jni-type="TT;"></parameter>
        <parameter name="p1" type="U" jni-type="TU;"></parameter>
      </method>
    </interface>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="false" name="BiFunction.Util" static="true" visibility="public" jni-signature="Lcom/annimon/stream/function/BiFunction$Util;">
      <method abstract="false" deprecated="not deprecated" final="false" name="andThen" jni-signature="(Lcom/annimon/stream/function/BiFunction;Lcom/annimon/stream/function/Function;)Lcom/annimon/stream/function/BiFunction;" bridge="false" native="false" return="com.annimon.stream.function.BiFunction&lt;T, U, V&gt;" jni-return="Lcom/annimon/stream/function/BiFunction&lt;TT;TU;TV;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
          <typeParameter name="U" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
          <typeParameter name="R" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
          <typeParameter name="V" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="f1" type="com.annimon.stream.function.BiFunction&lt;? super T, ? super U, ? extends R&gt;" jni-type="Lcom/annimon/stream/function/BiFunction&lt;-TT;-TU;+TR;&gt;;"></parameter>
        <parameter name="f2" type="com.annimon.stream.function.Function&lt;? super R, ? extends V&gt;" jni-type="Lcom/annimon/stream/function/Function&lt;-TR;+TV;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="reverse" jni-signature="(Lcom/annimon/stream/function/BiFunction;)Lcom/annimon/stream/function/BiFunction;" bridge="false" native="false" return="com.annimon.stream.function.BiFunction&lt;U, T, R&gt;" jni-return="Lcom/annimon/stream/function/BiFunction&lt;TU;TT;TR;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
          <typeParameter name="U" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
          <typeParameter name="R" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="function" type="com.annimon.stream.function.BiFunction&lt;? super T, ? super U, ? extends R&gt;" jni-type="Lcom/annimon/stream/function/BiFunction&lt;-TT;-TU;+TR;&gt;;"></parameter>
      </method>
    </class>
    <interface abstract="true" deprecated="not deprecated" final="false" name="BinaryOperator" static="false" visibility="public" jni-signature="Lcom/annimon/stream/function/BinaryOperator;">
      <implements name="com.annimon.stream.function.BiFunction" name-generic-aware="com.annimon.stream.function.BiFunction&lt;T, T, T&gt;" jni-type="Lcom/annimon/stream/function/BiFunction&lt;TT;TT;TT;&gt;;"></implements>
      <typeParameters>
        <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
      </typeParameters>
    </interface>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="false" name="BinaryOperator.Util" static="true" visibility="public" jni-signature="Lcom/annimon/stream/function/BinaryOperator$Util;">
      <method abstract="false" deprecated="not deprecated" final="false" name="maxBy" jni-signature="(Ljava/util/Comparator;)Lcom/annimon/stream/function/BinaryOperator;" bridge="false" native="false" return="com.annimon.stream.function.BinaryOperator&lt;T&gt;" jni-return="Lcom/annimon/stream/function/BinaryOperator&lt;TT;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="comparator" type="java.util.Comparator&lt;? super T&gt;" jni-type="Ljava/util/Comparator&lt;-TT;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="minBy" jni-signature="(Ljava/util/Comparator;)Lcom/annimon/stream/function/BinaryOperator;" bridge="false" native="false" return="com.annimon.stream.function.BinaryOperator&lt;T&gt;" jni-return="Lcom/annimon/stream/function/BinaryOperator&lt;TT;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="comparator" type="java.util.Comparator&lt;? super T&gt;" jni-type="Ljava/util/Comparator&lt;-TT;&gt;;"></parameter>
      </method>
    </class>
    <interface abstract="true" deprecated="not deprecated" final="false" name="BooleanConsumer" static="false" visibility="public" jni-signature="Lcom/annimon/stream/function/BooleanConsumer;">
      <method abstract="true" deprecated="not deprecated" final="false" name="accept" jni-signature="(Z)V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="p0" type="boolean" jni-type="Z"></parameter>
      </method>
    </interface>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="false" name="BooleanConsumer.Util" static="true" visibility="public" jni-signature="Lcom/annimon/stream/function/BooleanConsumer$Util;">
      <method abstract="false" deprecated="not deprecated" final="false" name="andThen" jni-signature="(Lcom/annimon/stream/function/BooleanConsumer;Lcom/annimon/stream/function/BooleanConsumer;)Lcom/annimon/stream/function/BooleanConsumer;" bridge="false" native="false" return="com.annimon.stream.function.BooleanConsumer" jni-return="Lcom/annimon/stream/function/BooleanConsumer;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="c1" type="com.annimon.stream.function.BooleanConsumer" jni-type="Lcom/annimon/stream/function/BooleanConsumer;"></parameter>
        <parameter name="c2" type="com.annimon.stream.function.BooleanConsumer" jni-type="Lcom/annimon/stream/function/BooleanConsumer;"></parameter>
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="true" name="BooleanConsumer.Util.1" static="true" visibility="" jni-signature="Lcom/annimon/stream/function/BooleanConsumer$Util$1;">
      <implements name="com.annimon.stream.function.BooleanConsumer" name-generic-aware="com.annimon.stream.function.BooleanConsumer" jni-type="Lcom/annimon/stream/function/BooleanConsumer;"></implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="accept" jni-signature="(Z)V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="value" type="boolean" jni-type="Z"></parameter>
      </method>
    </class>
    <interface abstract="true" deprecated="not deprecated" final="false" name="BooleanFunction" static="false" visibility="public" jni-signature="Lcom/annimon/stream/function/BooleanFunction;">
      <typeParameters>
        <typeParameter name="R" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
      </typeParameters>
      <method abstract="true" deprecated="not deprecated" final="false" name="apply" jni-signature="(Z)Ljava/lang/Object;" bridge="false" native="false" return="R" jni-return="TR;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="p0" type="boolean" jni-type="Z"></parameter>
      </method>
    </interface>
    <interface abstract="true" deprecated="not deprecated" final="false" name="BooleanPredicate" static="false" visibility="public" jni-signature="Lcom/annimon/stream/function/BooleanPredicate;">
      <method abstract="true" deprecated="not deprecated" final="false" name="test" jni-signature="(Z)Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="p0" type="boolean" jni-type="Z"></parameter>
      </method>
    </interface>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="false" name="BooleanPredicate.Util" static="true" visibility="public" jni-signature="Lcom/annimon/stream/function/BooleanPredicate$Util;">
      <method abstract="false" deprecated="not deprecated" final="false" name="and" jni-signature="(Lcom/annimon/stream/function/BooleanPredicate;Lcom/annimon/stream/function/BooleanPredicate;)Lcom/annimon/stream/function/BooleanPredicate;" bridge="false" native="false" return="com.annimon.stream.function.BooleanPredicate" jni-return="Lcom/annimon/stream/function/BooleanPredicate;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="p1" type="com.annimon.stream.function.BooleanPredicate" jni-type="Lcom/annimon/stream/function/BooleanPredicate;"></parameter>
        <parameter name="p2" type="com.annimon.stream.function.BooleanPredicate" jni-type="Lcom/annimon/stream/function/BooleanPredicate;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="identity" jni-signature="()Lcom/annimon/stream/function/BooleanPredicate;" bridge="false" native="false" return="com.annimon.stream.function.BooleanPredicate" jni-return="Lcom/annimon/stream/function/BooleanPredicate;" static="true" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="negate" jni-signature="(Lcom/annimon/stream/function/BooleanPredicate;)Lcom/annimon/stream/function/BooleanPredicate;" bridge="false" native="false" return="com.annimon.stream.function.BooleanPredicate" jni-return="Lcom/annimon/stream/function/BooleanPredicate;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="p1" type="com.annimon.stream.function.BooleanPredicate" jni-type="Lcom/annimon/stream/function/BooleanPredicate;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="or" jni-signature="(Lcom/annimon/stream/function/BooleanPredicate;Lcom/annimon/stream/function/BooleanPredicate;)Lcom/annimon/stream/function/BooleanPredicate;" bridge="false" native="false" return="com.annimon.stream.function.BooleanPredicate" jni-return="Lcom/annimon/stream/function/BooleanPredicate;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="p1" type="com.annimon.stream.function.BooleanPredicate" jni-type="Lcom/annimon/stream/function/BooleanPredicate;"></parameter>
        <parameter name="p2" type="com.annimon.stream.function.BooleanPredicate" jni-type="Lcom/annimon/stream/function/BooleanPredicate;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="xor" jni-signature="(Lcom/annimon/stream/function/BooleanPredicate;Lcom/annimon/stream/function/BooleanPredicate;)Lcom/annimon/stream/function/BooleanPredicate;" bridge="false" native="false" return="com.annimon.stream.function.BooleanPredicate" jni-return="Lcom/annimon/stream/function/BooleanPredicate;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="p1" type="com.annimon.stream.function.BooleanPredicate" jni-type="Lcom/annimon/stream/function/BooleanPredicate;"></parameter>
        <parameter name="p2" type="com.annimon.stream.function.BooleanPredicate" jni-type="Lcom/annimon/stream/function/BooleanPredicate;"></parameter>
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="true" name="BooleanPredicate.Util.1" static="true" visibility="" jni-signature="Lcom/annimon/stream/function/BooleanPredicate$Util$1;">
      <implements name="com.annimon.stream.function.BooleanPredicate" name-generic-aware="com.annimon.stream.function.BooleanPredicate" jni-type="Lcom/annimon/stream/function/BooleanPredicate;"></implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="test" jni-signature="(Z)Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="operand" type="boolean" jni-type="Z"></parameter>
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="true" name="BooleanPredicate.Util.2" static="true" visibility="" jni-signature="Lcom/annimon/stream/function/BooleanPredicate$Util$2;">
      <implements name="com.annimon.stream.function.BooleanPredicate" name-generic-aware="com.annimon.stream.function.BooleanPredicate" jni-type="Lcom/annimon/stream/function/BooleanPredicate;"></implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="test" jni-signature="(Z)Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="value" type="boolean" jni-type="Z"></parameter>
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="true" name="BooleanPredicate.Util.3" static="true" visibility="" jni-signature="Lcom/annimon/stream/function/BooleanPredicate$Util$3;">
      <implements name="com.annimon.stream.function.BooleanPredicate" name-generic-aware="com.annimon.stream.function.BooleanPredicate" jni-type="Lcom/annimon/stream/function/BooleanPredicate;"></implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="test" jni-signature="(Z)Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="value" type="boolean" jni-type="Z"></parameter>
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="true" name="BooleanPredicate.Util.4" static="true" visibility="" jni-signature="Lcom/annimon/stream/function/BooleanPredicate$Util$4;">
      <implements name="com.annimon.stream.function.BooleanPredicate" name-generic-aware="com.annimon.stream.function.BooleanPredicate" jni-type="Lcom/annimon/stream/function/BooleanPredicate;"></implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="test" jni-signature="(Z)Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="value" type="boolean" jni-type="Z"></parameter>
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="true" name="BooleanPredicate.Util.5" static="true" visibility="" jni-signature="Lcom/annimon/stream/function/BooleanPredicate$Util$5;">
      <implements name="com.annimon.stream.function.BooleanPredicate" name-generic-aware="com.annimon.stream.function.BooleanPredicate" jni-type="Lcom/annimon/stream/function/BooleanPredicate;"></implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="test" jni-signature="(Z)Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="value" type="boolean" jni-type="Z"></parameter>
      </method>
    </class>
    <interface abstract="true" deprecated="not deprecated" final="false" name="BooleanSupplier" static="false" visibility="public" jni-signature="Lcom/annimon/stream/function/BooleanSupplier;">
      <method abstract="true" deprecated="not deprecated" final="false" name="getAsBoolean" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </interface>
    <interface abstract="true" deprecated="not deprecated" final="false" name="Consumer" static="false" visibility="public" jni-signature="Lcom/annimon/stream/function/Consumer;">
      <typeParameters>
        <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
      </typeParameters>
      <method abstract="true" deprecated="not deprecated" final="false" name="accept" jni-signature="(Ljava/lang/Object;)V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="p0" type="T" jni-type="TT;"></parameter>
      </method>
    </interface>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="false" name="Consumer.Util" static="true" visibility="public" jni-signature="Lcom/annimon/stream/function/Consumer$Util;">
      <method abstract="false" deprecated="not deprecated" final="false" name="andThen" jni-signature="(Lcom/annimon/stream/function/Consumer;Lcom/annimon/stream/function/Consumer;)Lcom/annimon/stream/function/Consumer;" bridge="false" native="false" return="com.annimon.stream.function.Consumer&lt;T&gt;" jni-return="Lcom/annimon/stream/function/Consumer&lt;TT;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="c1" type="com.annimon.stream.function.Consumer&lt;? super T&gt;" jni-type="Lcom/annimon/stream/function/Consumer&lt;-TT;&gt;;"></parameter>
        <parameter name="c2" type="com.annimon.stream.function.Consumer&lt;? super T&gt;" jni-type="Lcom/annimon/stream/function/Consumer&lt;-TT;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="safe" jni-signature="(Lcom/annimon/stream/function/ThrowableConsumer;)Lcom/annimon/stream/function/Consumer;" bridge="false" native="false" return="com.annimon.stream.function.Consumer&lt;T&gt;" jni-return="Lcom/annimon/stream/function/Consumer&lt;TT;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="throwableConsumer" type="com.annimon.stream.function.ThrowableConsumer&lt;? super T, java.lang.Throwable&gt;" jni-type="Lcom/annimon/stream/function/ThrowableConsumer&lt;-TT;Ljava/lang/Throwable;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="safe" jni-signature="(Lcom/annimon/stream/function/ThrowableConsumer;Lcom/annimon/stream/function/Consumer;)Lcom/annimon/stream/function/Consumer;" bridge="false" native="false" return="com.annimon.stream.function.Consumer&lt;T&gt;" jni-return="Lcom/annimon/stream/function/Consumer&lt;TT;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="throwableConsumer" type="com.annimon.stream.function.ThrowableConsumer&lt;? super T, java.lang.Throwable&gt;" jni-type="Lcom/annimon/stream/function/ThrowableConsumer&lt;-TT;Ljava/lang/Throwable;&gt;;"></parameter>
        <parameter name="onFailedConsumer" type="com.annimon.stream.function.Consumer&lt;? super T&gt;" jni-type="Lcom/annimon/stream/function/Consumer&lt;-TT;&gt;;"></parameter>
      </method>
    </class>
    <interface abstract="true" deprecated="not deprecated" final="false" name="DoubleBinaryOperator" static="false" visibility="public" jni-signature="Lcom/annimon/stream/function/DoubleBinaryOperator;">
      <method abstract="true" deprecated="not deprecated" final="false" name="applyAsDouble" jni-signature="(DD)D" bridge="false" native="false" return="double" jni-return="D" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="p0" type="double" jni-type="D"></parameter>
        <parameter name="p1" type="double" jni-type="D"></parameter>
      </method>
    </interface>
    <interface abstract="true" deprecated="not deprecated" final="false" name="DoubleConsumer" static="false" visibility="public" jni-signature="Lcom/annimon/stream/function/DoubleConsumer;">
      <method abstract="true" deprecated="not deprecated" final="false" name="accept" jni-signature="(D)V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="p0" type="double" jni-type="D"></parameter>
      </method>
    </interface>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="false" name="DoubleConsumer.Util" static="true" visibility="public" jni-signature="Lcom/annimon/stream/function/DoubleConsumer$Util;">
      <method abstract="false" deprecated="not deprecated" final="false" name="andThen" jni-signature="(Lcom/annimon/stream/function/DoubleConsumer;Lcom/annimon/stream/function/DoubleConsumer;)Lcom/annimon/stream/function/DoubleConsumer;" bridge="false" native="false" return="com.annimon.stream.function.DoubleConsumer" jni-return="Lcom/annimon/stream/function/DoubleConsumer;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="c1" type="com.annimon.stream.function.DoubleConsumer" jni-type="Lcom/annimon/stream/function/DoubleConsumer;"></parameter>
        <parameter name="c2" type="com.annimon.stream.function.DoubleConsumer" jni-type="Lcom/annimon/stream/function/DoubleConsumer;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="safe" jni-signature="(Lcom/annimon/stream/function/ThrowableDoubleConsumer;)Lcom/annimon/stream/function/DoubleConsumer;" bridge="false" native="false" return="com.annimon.stream.function.DoubleConsumer" jni-return="Lcom/annimon/stream/function/DoubleConsumer;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="throwableConsumer" type="com.annimon.stream.function.ThrowableDoubleConsumer&lt;java.lang.Throwable&gt;" jni-type="Lcom/annimon/stream/function/ThrowableDoubleConsumer&lt;Ljava/lang/Throwable;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="safe" jni-signature="(Lcom/annimon/stream/function/ThrowableDoubleConsumer;Lcom/annimon/stream/function/DoubleConsumer;)Lcom/annimon/stream/function/DoubleConsumer;" bridge="false" native="false" return="com.annimon.stream.function.DoubleConsumer" jni-return="Lcom/annimon/stream/function/DoubleConsumer;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="throwableConsumer" type="com.annimon.stream.function.ThrowableDoubleConsumer&lt;java.lang.Throwable&gt;" jni-type="Lcom/annimon/stream/function/ThrowableDoubleConsumer&lt;Ljava/lang/Throwable;&gt;;"></parameter>
        <parameter name="onFailedConsumer" type="com.annimon.stream.function.DoubleConsumer" jni-type="Lcom/annimon/stream/function/DoubleConsumer;"></parameter>
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="true" name="DoubleConsumer.Util.1" static="true" visibility="" jni-signature="Lcom/annimon/stream/function/DoubleConsumer$Util$1;">
      <implements name="com.annimon.stream.function.DoubleConsumer" name-generic-aware="com.annimon.stream.function.DoubleConsumer" jni-type="Lcom/annimon/stream/function/DoubleConsumer;"></implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="accept" jni-signature="(D)V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="value" type="double" jni-type="D"></parameter>
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="true" name="DoubleConsumer.Util.2" static="true" visibility="" jni-signature="Lcom/annimon/stream/function/DoubleConsumer$Util$2;">
      <implements name="com.annimon.stream.function.DoubleConsumer" name-generic-aware="com.annimon.stream.function.DoubleConsumer" jni-type="Lcom/annimon/stream/function/DoubleConsumer;"></implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="accept" jni-signature="(D)V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="value" type="double" jni-type="D"></parameter>
      </method>
    </class>
    <interface abstract="true" deprecated="not deprecated" final="false" name="DoubleFunction" static="false" visibility="public" jni-signature="Lcom/annimon/stream/function/DoubleFunction;">
      <typeParameters>
        <typeParameter name="R" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
      </typeParameters>
      <method abstract="true" deprecated="not deprecated" final="false" name="apply" jni-signature="(D)Ljava/lang/Object;" bridge="false" native="false" return="R" jni-return="TR;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="p0" type="double" jni-type="D"></parameter>
      </method>
    </interface>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="false" name="DoubleFunction.Util" static="true" visibility="public" jni-signature="Lcom/annimon/stream/function/DoubleFunction$Util;">
      <method abstract="false" deprecated="not deprecated" final="false" name="safe" jni-signature="(Lcom/annimon/stream/function/ThrowableDoubleFunction;)Lcom/annimon/stream/function/DoubleFunction;" bridge="false" native="false" return="com.annimon.stream.function.DoubleFunction&lt;R&gt;" jni-return="Lcom/annimon/stream/function/DoubleFunction&lt;TR;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="R" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="throwableFunction" type="com.annimon.stream.function.ThrowableDoubleFunction&lt;? extends R, java.lang.Throwable&gt;" jni-type="Lcom/annimon/stream/function/ThrowableDoubleFunction&lt;+TR;Ljava/lang/Throwable;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="safe" jni-signature="(Lcom/annimon/stream/function/ThrowableDoubleFunction;Ljava/lang/Object;)Lcom/annimon/stream/function/DoubleFunction;" bridge="false" native="false" return="com.annimon.stream.function.DoubleFunction&lt;R&gt;" jni-return="Lcom/annimon/stream/function/DoubleFunction&lt;TR;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="R" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="throwableFunction" type="com.annimon.stream.function.ThrowableDoubleFunction&lt;? extends R, java.lang.Throwable&gt;" jni-type="Lcom/annimon/stream/function/ThrowableDoubleFunction&lt;+TR;Ljava/lang/Throwable;&gt;;"></parameter>
        <parameter name="resultIfFailed" type="R" jni-type="TR;"></parameter>
      </method>
    </class>
    <interface abstract="true" deprecated="not deprecated" final="false" name="DoublePredicate" static="false" visibility="public" jni-signature="Lcom/annimon/stream/function/DoublePredicate;">
      <method abstract="true" deprecated="not deprecated" final="false" name="test" jni-signature="(D)Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="p0" type="double" jni-type="D"></parameter>
      </method>
    </interface>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="false" name="DoublePredicate.Util" static="true" visibility="public" jni-signature="Lcom/annimon/stream/function/DoublePredicate$Util;">
      <method abstract="false" deprecated="not deprecated" final="false" name="and" jni-signature="(Lcom/annimon/stream/function/DoublePredicate;Lcom/annimon/stream/function/DoublePredicate;)Lcom/annimon/stream/function/DoublePredicate;" bridge="false" native="false" return="com.annimon.stream.function.DoublePredicate" jni-return="Lcom/annimon/stream/function/DoublePredicate;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="p1" type="com.annimon.stream.function.DoublePredicate" jni-type="Lcom/annimon/stream/function/DoublePredicate;"></parameter>
        <parameter name="p2" type="com.annimon.stream.function.DoublePredicate" jni-type="Lcom/annimon/stream/function/DoublePredicate;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="negate" jni-signature="(Lcom/annimon/stream/function/DoublePredicate;)Lcom/annimon/stream/function/DoublePredicate;" bridge="false" native="false" return="com.annimon.stream.function.DoublePredicate" jni-return="Lcom/annimon/stream/function/DoublePredicate;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="p1" type="com.annimon.stream.function.DoublePredicate" jni-type="Lcom/annimon/stream/function/DoublePredicate;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="or" jni-signature="(Lcom/annimon/stream/function/DoublePredicate;Lcom/annimon/stream/function/DoublePredicate;)Lcom/annimon/stream/function/DoublePredicate;" bridge="false" native="false" return="com.annimon.stream.function.DoublePredicate" jni-return="Lcom/annimon/stream/function/DoublePredicate;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="p1" type="com.annimon.stream.function.DoublePredicate" jni-type="Lcom/annimon/stream/function/DoublePredicate;"></parameter>
        <parameter name="p2" type="com.annimon.stream.function.DoublePredicate" jni-type="Lcom/annimon/stream/function/DoublePredicate;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="safe" jni-signature="(Lcom/annimon/stream/function/ThrowableDoublePredicate;)Lcom/annimon/stream/function/DoublePredicate;" bridge="false" native="false" return="com.annimon.stream.function.DoublePredicate" jni-return="Lcom/annimon/stream/function/DoublePredicate;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="throwablePredicate" type="com.annimon.stream.function.ThrowableDoublePredicate&lt;java.lang.Throwable&gt;" jni-type="Lcom/annimon/stream/function/ThrowableDoublePredicate&lt;Ljava/lang/Throwable;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="safe" jni-signature="(Lcom/annimon/stream/function/ThrowableDoublePredicate;Z)Lcom/annimon/stream/function/DoublePredicate;" bridge="false" native="false" return="com.annimon.stream.function.DoublePredicate" jni-return="Lcom/annimon/stream/function/DoublePredicate;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="throwablePredicate" type="com.annimon.stream.function.ThrowableDoublePredicate&lt;java.lang.Throwable&gt;" jni-type="Lcom/annimon/stream/function/ThrowableDoublePredicate&lt;Ljava/lang/Throwable;&gt;;"></parameter>
        <parameter name="resultIfFailed" type="boolean" jni-type="Z"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="xor" jni-signature="(Lcom/annimon/stream/function/DoublePredicate;Lcom/annimon/stream/function/DoublePredicate;)Lcom/annimon/stream/function/DoublePredicate;" bridge="false" native="false" return="com.annimon.stream.function.DoublePredicate" jni-return="Lcom/annimon/stream/function/DoublePredicate;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="p1" type="com.annimon.stream.function.DoublePredicate" jni-type="Lcom/annimon/stream/function/DoublePredicate;"></parameter>
        <parameter name="p2" type="com.annimon.stream.function.DoublePredicate" jni-type="Lcom/annimon/stream/function/DoublePredicate;"></parameter>
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="true" name="DoublePredicate.Util.1" static="true" visibility="" jni-signature="Lcom/annimon/stream/function/DoublePredicate$Util$1;">
      <implements name="com.annimon.stream.function.DoublePredicate" name-generic-aware="com.annimon.stream.function.DoublePredicate" jni-type="Lcom/annimon/stream/function/DoublePredicate;"></implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="test" jni-signature="(D)Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="value" type="double" jni-type="D"></parameter>
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="true" name="DoublePredicate.Util.2" static="true" visibility="" jni-signature="Lcom/annimon/stream/function/DoublePredicate$Util$2;">
      <implements name="com.annimon.stream.function.DoublePredicate" name-generic-aware="com.annimon.stream.function.DoublePredicate" jni-type="Lcom/annimon/stream/function/DoublePredicate;"></implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="test" jni-signature="(D)Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="value" type="double" jni-type="D"></parameter>
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="true" name="DoublePredicate.Util.3" static="true" visibility="" jni-signature="Lcom/annimon/stream/function/DoublePredicate$Util$3;">
      <implements name="com.annimon.stream.function.DoublePredicate" name-generic-aware="com.annimon.stream.function.DoublePredicate" jni-type="Lcom/annimon/stream/function/DoublePredicate;"></implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="test" jni-signature="(D)Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="value" type="double" jni-type="D"></parameter>
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="true" name="DoublePredicate.Util.4" static="true" visibility="" jni-signature="Lcom/annimon/stream/function/DoublePredicate$Util$4;">
      <implements name="com.annimon.stream.function.DoublePredicate" name-generic-aware="com.annimon.stream.function.DoublePredicate" jni-type="Lcom/annimon/stream/function/DoublePredicate;"></implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="test" jni-signature="(D)Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="value" type="double" jni-type="D"></parameter>
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="true" name="DoublePredicate.Util.5" static="true" visibility="" jni-signature="Lcom/annimon/stream/function/DoublePredicate$Util$5;">
      <implements name="com.annimon.stream.function.DoublePredicate" name-generic-aware="com.annimon.stream.function.DoublePredicate" jni-type="Lcom/annimon/stream/function/DoublePredicate;"></implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="test" jni-signature="(D)Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="value" type="double" jni-type="D"></parameter>
      </method>
    </class>
    <interface abstract="true" deprecated="not deprecated" final="false" name="DoubleSupplier" static="false" visibility="public" jni-signature="Lcom/annimon/stream/function/DoubleSupplier;">
      <method abstract="true" deprecated="not deprecated" final="false" name="getAsDouble" jni-signature="()D" bridge="false" native="false" return="double" jni-return="D" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </interface>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="false" name="DoubleSupplier.Util" static="true" visibility="public" jni-signature="Lcom/annimon/stream/function/DoubleSupplier$Util;">
      <method abstract="false" deprecated="not deprecated" final="false" name="safe" jni-signature="(Lcom/annimon/stream/function/ThrowableDoubleSupplier;)Lcom/annimon/stream/function/DoubleSupplier;" bridge="false" native="false" return="com.annimon.stream.function.DoubleSupplier" jni-return="Lcom/annimon/stream/function/DoubleSupplier;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="throwableSupplier" type="com.annimon.stream.function.ThrowableDoubleSupplier&lt;java.lang.Throwable&gt;" jni-type="Lcom/annimon/stream/function/ThrowableDoubleSupplier&lt;Ljava/lang/Throwable;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="safe" jni-signature="(Lcom/annimon/stream/function/ThrowableDoubleSupplier;D)Lcom/annimon/stream/function/DoubleSupplier;" bridge="false" native="false" return="com.annimon.stream.function.DoubleSupplier" jni-return="Lcom/annimon/stream/function/DoubleSupplier;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="throwableSupplier" type="com.annimon.stream.function.ThrowableDoubleSupplier&lt;java.lang.Throwable&gt;" jni-type="Lcom/annimon/stream/function/ThrowableDoubleSupplier&lt;Ljava/lang/Throwable;&gt;;"></parameter>
        <parameter name="resultIfFailed" type="double" jni-type="D"></parameter>
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="true" name="DoubleSupplier.Util.1" static="true" visibility="" jni-signature="Lcom/annimon/stream/function/DoubleSupplier$Util$1;">
      <implements name="com.annimon.stream.function.DoubleSupplier" name-generic-aware="com.annimon.stream.function.DoubleSupplier" jni-type="Lcom/annimon/stream/function/DoubleSupplier;"></implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="getAsDouble" jni-signature="()D" bridge="false" native="false" return="double" jni-return="D" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <interface abstract="true" deprecated="not deprecated" final="false" name="DoubleToIntFunction" static="false" visibility="public" jni-signature="Lcom/annimon/stream/function/DoubleToIntFunction;">
      <method abstract="true" deprecated="not deprecated" final="false" name="applyAsInt" jni-signature="(D)I" bridge="false" native="false" return="int" jni-return="I" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="p0" type="double" jni-type="D"></parameter>
      </method>
    </interface>
    <interface abstract="true" deprecated="not deprecated" final="false" name="DoubleToLongFunction" static="false" visibility="public" jni-signature="Lcom/annimon/stream/function/DoubleToLongFunction;">
      <method abstract="true" deprecated="not deprecated" final="false" name="applyAsLong" jni-signature="(D)J" bridge="false" native="false" return="long" jni-return="J" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="p0" type="double" jni-type="D"></parameter>
      </method>
    </interface>
    <interface abstract="true" deprecated="not deprecated" final="false" name="DoubleUnaryOperator" static="false" visibility="public" jni-signature="Lcom/annimon/stream/function/DoubleUnaryOperator;">
      <method abstract="true" deprecated="not deprecated" final="false" name="applyAsDouble" jni-signature="(D)D" bridge="false" native="false" return="double" jni-return="D" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="p0" type="double" jni-type="D"></parameter>
      </method>
    </interface>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="false" name="DoubleUnaryOperator.Util" static="true" visibility="public" jni-signature="Lcom/annimon/stream/function/DoubleUnaryOperator$Util;">
      <method abstract="false" deprecated="not deprecated" final="false" name="identity" jni-signature="()Lcom/annimon/stream/function/DoubleUnaryOperator;" bridge="false" native="false" return="com.annimon.stream.function.DoubleUnaryOperator" jni-return="Lcom/annimon/stream/function/DoubleUnaryOperator;" static="true" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="true" name="DoubleUnaryOperator.Util.1" static="true" visibility="" jni-signature="Lcom/annimon/stream/function/DoubleUnaryOperator$Util$1;">
      <implements name="com.annimon.stream.function.DoubleUnaryOperator" name-generic-aware="com.annimon.stream.function.DoubleUnaryOperator" jni-type="Lcom/annimon/stream/function/DoubleUnaryOperator;"></implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="applyAsDouble" jni-signature="(D)D" bridge="false" native="false" return="double" jni-return="D" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="operand" type="double" jni-type="D"></parameter>
      </method>
    </class>
    <interface abstract="true" deprecated="not deprecated" final="false" name="Function" static="false" visibility="public" jni-signature="Lcom/annimon/stream/function/Function;">
      <typeParameters>
        <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        <typeParameter name="R" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
      </typeParameters>
      <method abstract="true" deprecated="not deprecated" final="false" name="apply" jni-signature="(Ljava/lang/Object;)Ljava/lang/Object;" bridge="false" native="false" return="R" jni-return="TR;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="p0" type="T" jni-type="TT;"></parameter>
      </method>
    </interface>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="false" name="Function.Util" static="true" visibility="public" jni-signature="Lcom/annimon/stream/function/Function$Util;">
      <method abstract="false" deprecated="not deprecated" final="false" name="andThen" jni-signature="(Lcom/annimon/stream/function/Function;Lcom/annimon/stream/function/Function;)Lcom/annimon/stream/function/Function;" bridge="false" native="false" return="com.annimon.stream.function.Function&lt;T, V&gt;" jni-return="Lcom/annimon/stream/function/Function&lt;TT;TV;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
          <typeParameter name="R" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
          <typeParameter name="V" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="f1" type="com.annimon.stream.function.Function&lt;? super T, ? extends R&gt;" jni-type="Lcom/annimon/stream/function/Function&lt;-TT;+TR;&gt;;"></parameter>
        <parameter name="f2" type="com.annimon.stream.function.Function&lt;? super R, ? extends V&gt;" jni-type="Lcom/annimon/stream/function/Function&lt;-TR;+TV;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="compose" jni-signature="(Lcom/annimon/stream/function/Function;Lcom/annimon/stream/function/Function;)Lcom/annimon/stream/function/Function;" bridge="false" native="false" return="com.annimon.stream.function.Function&lt;V, R&gt;" jni-return="Lcom/annimon/stream/function/Function&lt;TV;TR;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="V" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
          <typeParameter name="R" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="f1" type="com.annimon.stream.function.Function&lt;? super T, ? extends R&gt;" jni-type="Lcom/annimon/stream/function/Function&lt;-TT;+TR;&gt;;"></parameter>
        <parameter name="f2" type="com.annimon.stream.function.Function&lt;? super V, ? extends T&gt;" jni-type="Lcom/annimon/stream/function/Function&lt;-TV;+TT;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="safe" jni-signature="(Lcom/annimon/stream/function/ThrowableFunction;)Lcom/annimon/stream/function/Function;" bridge="false" native="false" return="com.annimon.stream.function.Function&lt;T, R&gt;" jni-return="Lcom/annimon/stream/function/Function&lt;TT;TR;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
          <typeParameter name="R" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="throwableFunction" type="com.annimon.stream.function.ThrowableFunction&lt;? super T, ? extends R, java.lang.Throwable&gt;" jni-type="Lcom/annimon/stream/function/ThrowableFunction&lt;-TT;+TR;Ljava/lang/Throwable;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="safe" jni-signature="(Lcom/annimon/stream/function/ThrowableFunction;Ljava/lang/Object;)Lcom/annimon/stream/function/Function;" bridge="false" native="false" return="com.annimon.stream.function.Function&lt;T, R&gt;" jni-return="Lcom/annimon/stream/function/Function&lt;TT;TR;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
          <typeParameter name="R" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="throwableFunction" type="com.annimon.stream.function.ThrowableFunction&lt;? super T, ? extends R, java.lang.Throwable&gt;" jni-type="Lcom/annimon/stream/function/ThrowableFunction&lt;-TT;+TR;Ljava/lang/Throwable;&gt;;"></parameter>
        <parameter name="resultIfFailed" type="R" jni-type="TR;"></parameter>
      </method>
    </class>
    <interface abstract="true" deprecated="not deprecated" final="false" name="IndexedBiFunction" static="false" visibility="public" jni-signature="Lcom/annimon/stream/function/IndexedBiFunction;">
      <typeParameters>
        <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        <typeParameter name="U" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        <typeParameter name="R" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
      </typeParameters>
      <method abstract="true" deprecated="not deprecated" final="false" name="apply" jni-signature="(ILjava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" bridge="false" native="false" return="R" jni-return="TR;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="p0" type="int" jni-type="I"></parameter>
        <parameter name="p1" type="T" jni-type="TT;"></parameter>
        <parameter name="p2" type="U" jni-type="TU;"></parameter>
      </method>
    </interface>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="false" name="IndexedBiFunction.Util" static="true" visibility="public" jni-signature="Lcom/annimon/stream/function/IndexedBiFunction$Util;">
      <method abstract="false" deprecated="not deprecated" final="false" name="wrap" jni-signature="(Lcom/annimon/stream/function/BiFunction;)Lcom/annimon/stream/function/IndexedBiFunction;" bridge="false" native="false" return="com.annimon.stream.function.IndexedBiFunction&lt;T, U, R&gt;" jni-return="Lcom/annimon/stream/function/IndexedBiFunction&lt;TT;TU;TR;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
          <typeParameter name="U" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
          <typeParameter name="R" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="function" type="com.annimon.stream.function.BiFunction&lt;? super T, ? super U, ? extends R&gt;" jni-type="Lcom/annimon/stream/function/BiFunction&lt;-TT;-TU;+TR;&gt;;"></parameter>
      </method>
    </class>
    <interface abstract="true" deprecated="not deprecated" final="false" name="IndexedConsumer" static="false" visibility="public" jni-signature="Lcom/annimon/stream/function/IndexedConsumer;">
      <typeParameters>
        <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
      </typeParameters>
      <method abstract="true" deprecated="not deprecated" final="false" name="accept" jni-signature="(ILjava/lang/Object;)V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="p0" type="int" jni-type="I"></parameter>
        <parameter name="p1" type="T" jni-type="TT;"></parameter>
      </method>
    </interface>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="false" name="IndexedConsumer.Util" static="true" visibility="public" jni-signature="Lcom/annimon/stream/function/IndexedConsumer$Util;">
      <method abstract="false" deprecated="not deprecated" final="false" name="accept" jni-signature="(Lcom/annimon/stream/function/IntConsumer;Lcom/annimon/stream/function/Consumer;)Lcom/annimon/stream/function/IndexedConsumer;" bridge="false" native="false" return="com.annimon.stream.function.IndexedConsumer&lt;T&gt;" jni-return="Lcom/annimon/stream/function/IndexedConsumer&lt;TT;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="c1" type="com.annimon.stream.function.IntConsumer" jni-type="Lcom/annimon/stream/function/IntConsumer;"></parameter>
        <parameter name="c2" type="com.annimon.stream.function.Consumer&lt;? super T&gt;" jni-type="Lcom/annimon/stream/function/Consumer&lt;-TT;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="wrap" jni-signature="(Lcom/annimon/stream/function/Consumer;)Lcom/annimon/stream/function/IndexedConsumer;" bridge="false" native="false" return="com.annimon.stream.function.IndexedConsumer&lt;T&gt;" jni-return="Lcom/annimon/stream/function/IndexedConsumer&lt;TT;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="consumer" type="com.annimon.stream.function.Consumer&lt;? super T&gt;" jni-type="Lcom/annimon/stream/function/Consumer&lt;-TT;&gt;;"></parameter>
      </method>
    </class>
    <interface abstract="true" deprecated="not deprecated" final="false" name="IndexedDoubleConsumer" static="false" visibility="public" jni-signature="Lcom/annimon/stream/function/IndexedDoubleConsumer;">
      <method abstract="true" deprecated="not deprecated" final="false" name="accept" jni-signature="(ID)V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="p0" type="int" jni-type="I"></parameter>
        <parameter name="p1" type="double" jni-type="D"></parameter>
      </method>
    </interface>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="false" name="IndexedDoubleConsumer.Util" static="true" visibility="public" jni-signature="Lcom/annimon/stream/function/IndexedDoubleConsumer$Util;">
      <method abstract="false" deprecated="not deprecated" final="false" name="accept" jni-signature="(Lcom/annimon/stream/function/IntConsumer;Lcom/annimon/stream/function/DoubleConsumer;)Lcom/annimon/stream/function/IndexedDoubleConsumer;" bridge="false" native="false" return="com.annimon.stream.function.IndexedDoubleConsumer" jni-return="Lcom/annimon/stream/function/IndexedDoubleConsumer;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="c1" type="com.annimon.stream.function.IntConsumer" jni-type="Lcom/annimon/stream/function/IntConsumer;"></parameter>
        <parameter name="c2" type="com.annimon.stream.function.DoubleConsumer" jni-type="Lcom/annimon/stream/function/DoubleConsumer;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="andThen" jni-signature="(Lcom/annimon/stream/function/IndexedDoubleConsumer;Lcom/annimon/stream/function/IndexedDoubleConsumer;)Lcom/annimon/stream/function/IndexedDoubleConsumer;" bridge="false" native="false" return="com.annimon.stream.function.IndexedDoubleConsumer" jni-return="Lcom/annimon/stream/function/IndexedDoubleConsumer;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="c1" type="com.annimon.stream.function.IndexedDoubleConsumer" jni-type="Lcom/annimon/stream/function/IndexedDoubleConsumer;"></parameter>
        <parameter name="c2" type="com.annimon.stream.function.IndexedDoubleConsumer" jni-type="Lcom/annimon/stream/function/IndexedDoubleConsumer;"></parameter>
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="true" name="IndexedDoubleConsumer.Util.1" static="true" visibility="" jni-signature="Lcom/annimon/stream/function/IndexedDoubleConsumer$Util$1;">
      <implements name="com.annimon.stream.function.IndexedDoubleConsumer" name-generic-aware="com.annimon.stream.function.IndexedDoubleConsumer" jni-type="Lcom/annimon/stream/function/IndexedDoubleConsumer;"></implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="accept" jni-signature="(ID)V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="index" type="int" jni-type="I"></parameter>
        <parameter name="value" type="double" jni-type="D"></parameter>
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="true" name="IndexedDoubleConsumer.Util.2" static="true" visibility="" jni-signature="Lcom/annimon/stream/function/IndexedDoubleConsumer$Util$2;">
      <implements name="com.annimon.stream.function.IndexedDoubleConsumer" name-generic-aware="com.annimon.stream.function.IndexedDoubleConsumer" jni-type="Lcom/annimon/stream/function/IndexedDoubleConsumer;"></implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="accept" jni-signature="(ID)V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="index" type="int" jni-type="I"></parameter>
        <parameter name="value" type="double" jni-type="D"></parameter>
      </method>
    </class>
    <interface abstract="true" deprecated="not deprecated" final="false" name="IndexedDoubleFunction" static="false" visibility="public" jni-signature="Lcom/annimon/stream/function/IndexedDoubleFunction;">
      <typeParameters>
        <typeParameter name="R" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
      </typeParameters>
      <method abstract="true" deprecated="not deprecated" final="false" name="apply" jni-signature="(ID)Ljava/lang/Object;" bridge="false" native="false" return="R" jni-return="TR;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="p0" type="int" jni-type="I"></parameter>
        <parameter name="p1" type="double" jni-type="D"></parameter>
      </method>
    </interface>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="false" name="IndexedDoubleFunction.Util" static="true" visibility="public" jni-signature="Lcom/annimon/stream/function/IndexedDoubleFunction$Util;">
      <method abstract="false" deprecated="not deprecated" final="false" name="wrap" jni-signature="(Lcom/annimon/stream/function/DoubleFunction;)Lcom/annimon/stream/function/IndexedDoubleFunction;" bridge="false" native="false" return="com.annimon.stream.function.IndexedDoubleFunction&lt;R&gt;" jni-return="Lcom/annimon/stream/function/IndexedDoubleFunction&lt;TR;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="R" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="function" type="com.annimon.stream.function.DoubleFunction&lt;? extends R&gt;" jni-type="Lcom/annimon/stream/function/DoubleFunction&lt;+TR;&gt;;"></parameter>
      </method>
    </class>
    <interface abstract="true" deprecated="not deprecated" final="false" name="IndexedDoublePredicate" static="false" visibility="public" jni-signature="Lcom/annimon/stream/function/IndexedDoublePredicate;">
      <method abstract="true" deprecated="not deprecated" final="false" name="test" jni-signature="(ID)Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="p0" type="int" jni-type="I"></parameter>
        <parameter name="p1" type="double" jni-type="D"></parameter>
      </method>
    </interface>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="false" name="IndexedDoublePredicate.Util" static="true" visibility="public" jni-signature="Lcom/annimon/stream/function/IndexedDoublePredicate$Util;">
      <method abstract="false" deprecated="not deprecated" final="false" name="wrap" jni-signature="(Lcom/annimon/stream/function/DoublePredicate;)Lcom/annimon/stream/function/IndexedDoublePredicate;" bridge="false" native="false" return="com.annimon.stream.function.IndexedDoublePredicate" jni-return="Lcom/annimon/stream/function/IndexedDoublePredicate;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="predicate" type="com.annimon.stream.function.DoublePredicate" jni-type="Lcom/annimon/stream/function/DoublePredicate;"></parameter>
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="true" name="IndexedDoublePredicate.Util.1" static="true" visibility="" jni-signature="Lcom/annimon/stream/function/IndexedDoublePredicate$Util$1;">
      <implements name="com.annimon.stream.function.IndexedDoublePredicate" name-generic-aware="com.annimon.stream.function.IndexedDoublePredicate" jni-type="Lcom/annimon/stream/function/IndexedDoublePredicate;"></implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="test" jni-signature="(ID)Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="index" type="int" jni-type="I"></parameter>
        <parameter name="value" type="double" jni-type="D"></parameter>
      </method>
    </class>
    <interface abstract="true" deprecated="not deprecated" final="false" name="IndexedDoubleUnaryOperator" static="false" visibility="public" jni-signature="Lcom/annimon/stream/function/IndexedDoubleUnaryOperator;">
      <method abstract="true" deprecated="not deprecated" final="false" name="applyAsDouble" jni-signature="(ID)D" bridge="false" native="false" return="double" jni-return="D" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="p0" type="int" jni-type="I"></parameter>
        <parameter name="p1" type="double" jni-type="D"></parameter>
      </method>
    </interface>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="false" name="IndexedDoubleUnaryOperator.Util" static="true" visibility="public" jni-signature="Lcom/annimon/stream/function/IndexedDoubleUnaryOperator$Util;">
      <method abstract="false" deprecated="not deprecated" final="false" name="wrap" jni-signature="(Lcom/annimon/stream/function/DoubleUnaryOperator;)Lcom/annimon/stream/function/IndexedDoubleUnaryOperator;" bridge="false" native="false" return="com.annimon.stream.function.IndexedDoubleUnaryOperator" jni-return="Lcom/annimon/stream/function/IndexedDoubleUnaryOperator;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="function" type="com.annimon.stream.function.DoubleUnaryOperator" jni-type="Lcom/annimon/stream/function/DoubleUnaryOperator;"></parameter>
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="true" name="IndexedDoubleUnaryOperator.Util.1" static="true" visibility="" jni-signature="Lcom/annimon/stream/function/IndexedDoubleUnaryOperator$Util$1;">
      <implements name="com.annimon.stream.function.IndexedDoubleUnaryOperator" name-generic-aware="com.annimon.stream.function.IndexedDoubleUnaryOperator" jni-type="Lcom/annimon/stream/function/IndexedDoubleUnaryOperator;"></implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="applyAsDouble" jni-signature="(ID)D" bridge="false" native="false" return="double" jni-return="D" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="index" type="int" jni-type="I"></parameter>
        <parameter name="value" type="double" jni-type="D"></parameter>
      </method>
    </class>
    <interface abstract="true" deprecated="not deprecated" final="false" name="IndexedFunction" static="false" visibility="public" jni-signature="Lcom/annimon/stream/function/IndexedFunction;">
      <typeParameters>
        <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        <typeParameter name="R" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
      </typeParameters>
      <method abstract="true" deprecated="not deprecated" final="false" name="apply" jni-signature="(ILjava/lang/Object;)Ljava/lang/Object;" bridge="false" native="false" return="R" jni-return="TR;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="p0" type="int" jni-type="I"></parameter>
        <parameter name="p1" type="T" jni-type="TT;"></parameter>
      </method>
    </interface>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="false" name="IndexedFunction.Util" static="true" visibility="public" jni-signature="Lcom/annimon/stream/function/IndexedFunction$Util;">
      <method abstract="false" deprecated="not deprecated" final="false" name="wrap" jni-signature="(Lcom/annimon/stream/function/Function;)Lcom/annimon/stream/function/IndexedFunction;" bridge="false" native="false" return="com.annimon.stream.function.IndexedFunction&lt;T, R&gt;" jni-return="Lcom/annimon/stream/function/IndexedFunction&lt;TT;TR;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
          <typeParameter name="R" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="function" type="com.annimon.stream.function.Function&lt;? super T, ? extends R&gt;" jni-type="Lcom/annimon/stream/function/Function&lt;-TT;+TR;&gt;;"></parameter>
      </method>
    </class>
    <interface abstract="true" deprecated="not deprecated" final="false" name="IndexedIntConsumer" static="false" visibility="public" jni-signature="Lcom/annimon/stream/function/IndexedIntConsumer;">
      <method abstract="true" deprecated="not deprecated" final="false" name="accept" jni-signature="(II)V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="p0" type="int" jni-type="I"></parameter>
        <parameter name="p1" type="int" jni-type="I"></parameter>
      </method>
    </interface>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="false" name="IndexedIntConsumer.Util" static="true" visibility="public" jni-signature="Lcom/annimon/stream/function/IndexedIntConsumer$Util;">
      <method abstract="false" deprecated="not deprecated" final="false" name="accept" jni-signature="(Lcom/annimon/stream/function/IntConsumer;Lcom/annimon/stream/function/IntConsumer;)Lcom/annimon/stream/function/IndexedIntConsumer;" bridge="false" native="false" return="com.annimon.stream.function.IndexedIntConsumer" jni-return="Lcom/annimon/stream/function/IndexedIntConsumer;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="c1" type="com.annimon.stream.function.IntConsumer" jni-type="Lcom/annimon/stream/function/IntConsumer;"></parameter>
        <parameter name="c2" type="com.annimon.stream.function.IntConsumer" jni-type="Lcom/annimon/stream/function/IntConsumer;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="andThen" jni-signature="(Lcom/annimon/stream/function/IndexedIntConsumer;Lcom/annimon/stream/function/IndexedIntConsumer;)Lcom/annimon/stream/function/IndexedIntConsumer;" bridge="false" native="false" return="com.annimon.stream.function.IndexedIntConsumer" jni-return="Lcom/annimon/stream/function/IndexedIntConsumer;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="c1" type="com.annimon.stream.function.IndexedIntConsumer" jni-type="Lcom/annimon/stream/function/IndexedIntConsumer;"></parameter>
        <parameter name="c2" type="com.annimon.stream.function.IndexedIntConsumer" jni-type="Lcom/annimon/stream/function/IndexedIntConsumer;"></parameter>
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="true" name="IndexedIntConsumer.Util.1" static="true" visibility="" jni-signature="Lcom/annimon/stream/function/IndexedIntConsumer$Util$1;">
      <implements name="com.annimon.stream.function.IndexedIntConsumer" name-generic-aware="com.annimon.stream.function.IndexedIntConsumer" jni-type="Lcom/annimon/stream/function/IndexedIntConsumer;"></implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="accept" jni-signature="(II)V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="index" type="int" jni-type="I"></parameter>
        <parameter name="value" type="int" jni-type="I"></parameter>
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="true" name="IndexedIntConsumer.Util.2" static="true" visibility="" jni-signature="Lcom/annimon/stream/function/IndexedIntConsumer$Util$2;">
      <implements name="com.annimon.stream.function.IndexedIntConsumer" name-generic-aware="com.annimon.stream.function.IndexedIntConsumer" jni-type="Lcom/annimon/stream/function/IndexedIntConsumer;"></implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="accept" jni-signature="(II)V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="index" type="int" jni-type="I"></parameter>
        <parameter name="value" type="int" jni-type="I"></parameter>
      </method>
    </class>
    <interface abstract="true" deprecated="not deprecated" final="false" name="IndexedIntFunction" static="false" visibility="public" jni-signature="Lcom/annimon/stream/function/IndexedIntFunction;">
      <typeParameters>
        <typeParameter name="R" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
      </typeParameters>
      <method abstract="true" deprecated="not deprecated" final="false" name="apply" jni-signature="(II)Ljava/lang/Object;" bridge="false" native="false" return="R" jni-return="TR;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="p0" type="int" jni-type="I"></parameter>
        <parameter name="p1" type="int" jni-type="I"></parameter>
      </method>
    </interface>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="false" name="IndexedIntFunction.Util" static="true" visibility="public" jni-signature="Lcom/annimon/stream/function/IndexedIntFunction$Util;">
      <method abstract="false" deprecated="not deprecated" final="false" name="wrap" jni-signature="(Lcom/annimon/stream/function/IntFunction;)Lcom/annimon/stream/function/IndexedIntFunction;" bridge="false" native="false" return="com.annimon.stream.function.IndexedIntFunction&lt;R&gt;" jni-return="Lcom/annimon/stream/function/IndexedIntFunction&lt;TR;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="R" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="function" type="com.annimon.stream.function.IntFunction&lt;? extends R&gt;" jni-type="Lcom/annimon/stream/function/IntFunction&lt;+TR;&gt;;"></parameter>
      </method>
    </class>
    <interface abstract="true" deprecated="not deprecated" final="false" name="IndexedIntPredicate" static="false" visibility="public" jni-signature="Lcom/annimon/stream/function/IndexedIntPredicate;">
      <method abstract="true" deprecated="not deprecated" final="false" name="test" jni-signature="(II)Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="p0" type="int" jni-type="I"></parameter>
        <parameter name="p1" type="int" jni-type="I"></parameter>
      </method>
    </interface>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="false" name="IndexedIntPredicate.Util" static="true" visibility="public" jni-signature="Lcom/annimon/stream/function/IndexedIntPredicate$Util;">
      <method abstract="false" deprecated="not deprecated" final="false" name="wrap" jni-signature="(Lcom/annimon/stream/function/IntPredicate;)Lcom/annimon/stream/function/IndexedIntPredicate;" bridge="false" native="false" return="com.annimon.stream.function.IndexedIntPredicate" jni-return="Lcom/annimon/stream/function/IndexedIntPredicate;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="predicate" type="com.annimon.stream.function.IntPredicate" jni-type="Lcom/annimon/stream/function/IntPredicate;"></parameter>
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="true" name="IndexedIntPredicate.Util.1" static="true" visibility="" jni-signature="Lcom/annimon/stream/function/IndexedIntPredicate$Util$1;">
      <implements name="com.annimon.stream.function.IndexedIntPredicate" name-generic-aware="com.annimon.stream.function.IndexedIntPredicate" jni-type="Lcom/annimon/stream/function/IndexedIntPredicate;"></implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="test" jni-signature="(II)Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="index" type="int" jni-type="I"></parameter>
        <parameter name="value" type="int" jni-type="I"></parameter>
      </method>
    </class>
    <interface abstract="true" deprecated="not deprecated" final="false" name="IndexedLongConsumer" static="false" visibility="public" jni-signature="Lcom/annimon/stream/function/IndexedLongConsumer;">
      <method abstract="true" deprecated="not deprecated" final="false" name="accept" jni-signature="(IJ)V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="p0" type="int" jni-type="I"></parameter>
        <parameter name="p1" type="long" jni-type="J"></parameter>
      </method>
    </interface>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="false" name="IndexedLongConsumer.Util" static="true" visibility="public" jni-signature="Lcom/annimon/stream/function/IndexedLongConsumer$Util;">
      <method abstract="false" deprecated="not deprecated" final="false" name="accept" jni-signature="(Lcom/annimon/stream/function/IntConsumer;Lcom/annimon/stream/function/LongConsumer;)Lcom/annimon/stream/function/IndexedLongConsumer;" bridge="false" native="false" return="com.annimon.stream.function.IndexedLongConsumer" jni-return="Lcom/annimon/stream/function/IndexedLongConsumer;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="c1" type="com.annimon.stream.function.IntConsumer" jni-type="Lcom/annimon/stream/function/IntConsumer;"></parameter>
        <parameter name="c2" type="com.annimon.stream.function.LongConsumer" jni-type="Lcom/annimon/stream/function/LongConsumer;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="andThen" jni-signature="(Lcom/annimon/stream/function/IndexedLongConsumer;Lcom/annimon/stream/function/IndexedLongConsumer;)Lcom/annimon/stream/function/IndexedLongConsumer;" bridge="false" native="false" return="com.annimon.stream.function.IndexedLongConsumer" jni-return="Lcom/annimon/stream/function/IndexedLongConsumer;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="c1" type="com.annimon.stream.function.IndexedLongConsumer" jni-type="Lcom/annimon/stream/function/IndexedLongConsumer;"></parameter>
        <parameter name="c2" type="com.annimon.stream.function.IndexedLongConsumer" jni-type="Lcom/annimon/stream/function/IndexedLongConsumer;"></parameter>
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="true" name="IndexedLongConsumer.Util.1" static="true" visibility="" jni-signature="Lcom/annimon/stream/function/IndexedLongConsumer$Util$1;">
      <implements name="com.annimon.stream.function.IndexedLongConsumer" name-generic-aware="com.annimon.stream.function.IndexedLongConsumer" jni-type="Lcom/annimon/stream/function/IndexedLongConsumer;"></implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="accept" jni-signature="(IJ)V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="index" type="int" jni-type="I"></parameter>
        <parameter name="value" type="long" jni-type="J"></parameter>
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="true" name="IndexedLongConsumer.Util.2" static="true" visibility="" jni-signature="Lcom/annimon/stream/function/IndexedLongConsumer$Util$2;">
      <implements name="com.annimon.stream.function.IndexedLongConsumer" name-generic-aware="com.annimon.stream.function.IndexedLongConsumer" jni-type="Lcom/annimon/stream/function/IndexedLongConsumer;"></implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="accept" jni-signature="(IJ)V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="index" type="int" jni-type="I"></parameter>
        <parameter name="value" type="long" jni-type="J"></parameter>
      </method>
    </class>
    <interface abstract="true" deprecated="not deprecated" final="false" name="IndexedLongFunction" static="false" visibility="public" jni-signature="Lcom/annimon/stream/function/IndexedLongFunction;">
      <typeParameters>
        <typeParameter name="R" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
      </typeParameters>
      <method abstract="true" deprecated="not deprecated" final="false" name="apply" jni-signature="(IJ)Ljava/lang/Object;" bridge="false" native="false" return="R" jni-return="TR;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="p0" type="int" jni-type="I"></parameter>
        <parameter name="p1" type="long" jni-type="J"></parameter>
      </method>
    </interface>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="false" name="IndexedLongFunction.Util" static="true" visibility="public" jni-signature="Lcom/annimon/stream/function/IndexedLongFunction$Util;">
      <method abstract="false" deprecated="not deprecated" final="false" name="wrap" jni-signature="(Lcom/annimon/stream/function/LongFunction;)Lcom/annimon/stream/function/IndexedLongFunction;" bridge="false" native="false" return="com.annimon.stream.function.IndexedLongFunction&lt;R&gt;" jni-return="Lcom/annimon/stream/function/IndexedLongFunction&lt;TR;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="R" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="function" type="com.annimon.stream.function.LongFunction&lt;? extends R&gt;" jni-type="Lcom/annimon/stream/function/LongFunction&lt;+TR;&gt;;"></parameter>
      </method>
    </class>
    <interface abstract="true" deprecated="not deprecated" final="false" name="IndexedLongPredicate" static="false" visibility="public" jni-signature="Lcom/annimon/stream/function/IndexedLongPredicate;">
      <method abstract="true" deprecated="not deprecated" final="false" name="test" jni-signature="(IJ)Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="p0" type="int" jni-type="I"></parameter>
        <parameter name="p1" type="long" jni-type="J"></parameter>
      </method>
    </interface>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="false" name="IndexedLongPredicate.Util" static="true" visibility="public" jni-signature="Lcom/annimon/stream/function/IndexedLongPredicate$Util;">
      <method abstract="false" deprecated="not deprecated" final="false" name="wrap" jni-signature="(Lcom/annimon/stream/function/LongPredicate;)Lcom/annimon/stream/function/IndexedLongPredicate;" bridge="false" native="false" return="com.annimon.stream.function.IndexedLongPredicate" jni-return="Lcom/annimon/stream/function/IndexedLongPredicate;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="predicate" type="com.annimon.stream.function.LongPredicate" jni-type="Lcom/annimon/stream/function/LongPredicate;"></parameter>
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="true" name="IndexedLongPredicate.Util.1" static="true" visibility="" jni-signature="Lcom/annimon/stream/function/IndexedLongPredicate$Util$1;">
      <implements name="com.annimon.stream.function.IndexedLongPredicate" name-generic-aware="com.annimon.stream.function.IndexedLongPredicate" jni-type="Lcom/annimon/stream/function/IndexedLongPredicate;"></implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="test" jni-signature="(IJ)Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="index" type="int" jni-type="I"></parameter>
        <parameter name="value" type="long" jni-type="J"></parameter>
      </method>
    </class>
    <interface abstract="true" deprecated="not deprecated" final="false" name="IndexedLongUnaryOperator" static="false" visibility="public" jni-signature="Lcom/annimon/stream/function/IndexedLongUnaryOperator;">
      <method abstract="true" deprecated="not deprecated" final="false" name="applyAsLong" jni-signature="(IJ)J" bridge="false" native="false" return="long" jni-return="J" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="p0" type="int" jni-type="I"></parameter>
        <parameter name="p1" type="long" jni-type="J"></parameter>
      </method>
    </interface>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="false" name="IndexedLongUnaryOperator.Util" static="true" visibility="public" jni-signature="Lcom/annimon/stream/function/IndexedLongUnaryOperator$Util;">
      <method abstract="false" deprecated="not deprecated" final="false" name="wrap" jni-signature="(Lcom/annimon/stream/function/LongUnaryOperator;)Lcom/annimon/stream/function/IndexedLongUnaryOperator;" bridge="false" native="false" return="com.annimon.stream.function.IndexedLongUnaryOperator" jni-return="Lcom/annimon/stream/function/IndexedLongUnaryOperator;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="function" type="com.annimon.stream.function.LongUnaryOperator" jni-type="Lcom/annimon/stream/function/LongUnaryOperator;"></parameter>
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="true" name="IndexedLongUnaryOperator.Util.1" static="true" visibility="" jni-signature="Lcom/annimon/stream/function/IndexedLongUnaryOperator$Util$1;">
      <implements name="com.annimon.stream.function.IndexedLongUnaryOperator" name-generic-aware="com.annimon.stream.function.IndexedLongUnaryOperator" jni-type="Lcom/annimon/stream/function/IndexedLongUnaryOperator;"></implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="applyAsLong" jni-signature="(IJ)J" bridge="false" native="false" return="long" jni-return="J" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="index" type="int" jni-type="I"></parameter>
        <parameter name="value" type="long" jni-type="J"></parameter>
      </method>
    </class>
    <interface abstract="true" deprecated="not deprecated" final="false" name="IndexedPredicate" static="false" visibility="public" jni-signature="Lcom/annimon/stream/function/IndexedPredicate;">
      <typeParameters>
        <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
      </typeParameters>
      <method abstract="true" deprecated="not deprecated" final="false" name="test" jni-signature="(ILjava/lang/Object;)Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="p0" type="int" jni-type="I"></parameter>
        <parameter name="p1" type="T" jni-type="TT;"></parameter>
      </method>
    </interface>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="false" name="IndexedPredicate.Util" static="true" visibility="public" jni-signature="Lcom/annimon/stream/function/IndexedPredicate$Util;">
      <method abstract="false" deprecated="not deprecated" final="false" name="wrap" jni-signature="(Lcom/annimon/stream/function/Predicate;)Lcom/annimon/stream/function/IndexedPredicate;" bridge="false" native="false" return="com.annimon.stream.function.IndexedPredicate&lt;T&gt;" jni-return="Lcom/annimon/stream/function/IndexedPredicate&lt;TT;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="predicate" type="com.annimon.stream.function.Predicate&lt;? super T&gt;" jni-type="Lcom/annimon/stream/function/Predicate&lt;-TT;&gt;;"></parameter>
      </method>
    </class>
    <interface abstract="true" deprecated="not deprecated" final="false" name="IntBinaryOperator" static="false" visibility="public" jni-signature="Lcom/annimon/stream/function/IntBinaryOperator;">
      <method abstract="true" deprecated="not deprecated" final="false" name="applyAsInt" jni-signature="(II)I" bridge="false" native="false" return="int" jni-return="I" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="p0" type="int" jni-type="I"></parameter>
        <parameter name="p1" type="int" jni-type="I"></parameter>
      </method>
    </interface>
    <interface abstract="true" deprecated="not deprecated" final="false" name="IntConsumer" static="false" visibility="public" jni-signature="Lcom/annimon/stream/function/IntConsumer;">
      <method abstract="true" deprecated="not deprecated" final="false" name="accept" jni-signature="(I)V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="p0" type="int" jni-type="I"></parameter>
      </method>
    </interface>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="false" name="IntConsumer.Util" static="true" visibility="public" jni-signature="Lcom/annimon/stream/function/IntConsumer$Util;">
      <method abstract="false" deprecated="not deprecated" final="false" name="andThen" jni-signature="(Lcom/annimon/stream/function/IntConsumer;Lcom/annimon/stream/function/IntConsumer;)Lcom/annimon/stream/function/IntConsumer;" bridge="false" native="false" return="com.annimon.stream.function.IntConsumer" jni-return="Lcom/annimon/stream/function/IntConsumer;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="c1" type="com.annimon.stream.function.IntConsumer" jni-type="Lcom/annimon/stream/function/IntConsumer;"></parameter>
        <parameter name="c2" type="com.annimon.stream.function.IntConsumer" jni-type="Lcom/annimon/stream/function/IntConsumer;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="safe" jni-signature="(Lcom/annimon/stream/function/ThrowableIntConsumer;)Lcom/annimon/stream/function/IntConsumer;" bridge="false" native="false" return="com.annimon.stream.function.IntConsumer" jni-return="Lcom/annimon/stream/function/IntConsumer;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="throwableConsumer" type="com.annimon.stream.function.ThrowableIntConsumer&lt;java.lang.Throwable&gt;" jni-type="Lcom/annimon/stream/function/ThrowableIntConsumer&lt;Ljava/lang/Throwable;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="safe" jni-signature="(Lcom/annimon/stream/function/ThrowableIntConsumer;Lcom/annimon/stream/function/IntConsumer;)Lcom/annimon/stream/function/IntConsumer;" bridge="false" native="false" return="com.annimon.stream.function.IntConsumer" jni-return="Lcom/annimon/stream/function/IntConsumer;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="throwableConsumer" type="com.annimon.stream.function.ThrowableIntConsumer&lt;java.lang.Throwable&gt;" jni-type="Lcom/annimon/stream/function/ThrowableIntConsumer&lt;Ljava/lang/Throwable;&gt;;"></parameter>
        <parameter name="onFailedConsumer" type="com.annimon.stream.function.IntConsumer" jni-type="Lcom/annimon/stream/function/IntConsumer;"></parameter>
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="true" name="IntConsumer.Util.1" static="true" visibility="" jni-signature="Lcom/annimon/stream/function/IntConsumer$Util$1;">
      <implements name="com.annimon.stream.function.IntConsumer" name-generic-aware="com.annimon.stream.function.IntConsumer" jni-type="Lcom/annimon/stream/function/IntConsumer;"></implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="accept" jni-signature="(I)V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="value" type="int" jni-type="I"></parameter>
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="true" name="IntConsumer.Util.2" static="true" visibility="" jni-signature="Lcom/annimon/stream/function/IntConsumer$Util$2;">
      <implements name="com.annimon.stream.function.IntConsumer" name-generic-aware="com.annimon.stream.function.IntConsumer" jni-type="Lcom/annimon/stream/function/IntConsumer;"></implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="accept" jni-signature="(I)V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="value" type="int" jni-type="I"></parameter>
      </method>
    </class>
    <interface abstract="true" deprecated="not deprecated" final="false" name="IntFunction" static="false" visibility="public" jni-signature="Lcom/annimon/stream/function/IntFunction;">
      <typeParameters>
        <typeParameter name="R" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
      </typeParameters>
      <method abstract="true" deprecated="not deprecated" final="false" name="apply" jni-signature="(I)Ljava/lang/Object;" bridge="false" native="false" return="R" jni-return="TR;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="p0" type="int" jni-type="I"></parameter>
      </method>
    </interface>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="false" name="IntFunction.Util" static="true" visibility="public" jni-signature="Lcom/annimon/stream/function/IntFunction$Util;">
      <method abstract="false" deprecated="not deprecated" final="false" name="safe" jni-signature="(Lcom/annimon/stream/function/ThrowableIntFunction;)Lcom/annimon/stream/function/IntFunction;" bridge="false" native="false" return="com.annimon.stream.function.IntFunction&lt;R&gt;" jni-return="Lcom/annimon/stream/function/IntFunction&lt;TR;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="R" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="throwableFunction" type="com.annimon.stream.function.ThrowableIntFunction&lt;? extends R, java.lang.Throwable&gt;" jni-type="Lcom/annimon/stream/function/ThrowableIntFunction&lt;+TR;Ljava/lang/Throwable;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="safe" jni-signature="(Lcom/annimon/stream/function/ThrowableIntFunction;Ljava/lang/Object;)Lcom/annimon/stream/function/IntFunction;" bridge="false" native="false" return="com.annimon.stream.function.IntFunction&lt;R&gt;" jni-return="Lcom/annimon/stream/function/IntFunction&lt;TR;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="R" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="throwableFunction" type="com.annimon.stream.function.ThrowableIntFunction&lt;? extends R, java.lang.Throwable&gt;" jni-type="Lcom/annimon/stream/function/ThrowableIntFunction&lt;+TR;Ljava/lang/Throwable;&gt;;"></parameter>
        <parameter name="resultIfFailed" type="R" jni-type="TR;"></parameter>
      </method>
    </class>
    <interface abstract="true" deprecated="not deprecated" final="false" name="IntPredicate" static="false" visibility="public" jni-signature="Lcom/annimon/stream/function/IntPredicate;">
      <method abstract="true" deprecated="not deprecated" final="false" name="test" jni-signature="(I)Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="p0" type="int" jni-type="I"></parameter>
      </method>
    </interface>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="false" name="IntPredicate.Util" static="true" visibility="public" jni-signature="Lcom/annimon/stream/function/IntPredicate$Util;">
      <method abstract="false" deprecated="not deprecated" final="false" name="and" jni-signature="(Lcom/annimon/stream/function/IntPredicate;Lcom/annimon/stream/function/IntPredicate;)Lcom/annimon/stream/function/IntPredicate;" bridge="false" native="false" return="com.annimon.stream.function.IntPredicate" jni-return="Lcom/annimon/stream/function/IntPredicate;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="p1" type="com.annimon.stream.function.IntPredicate" jni-type="Lcom/annimon/stream/function/IntPredicate;"></parameter>
        <parameter name="p2" type="com.annimon.stream.function.IntPredicate" jni-type="Lcom/annimon/stream/function/IntPredicate;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="negate" jni-signature="(Lcom/annimon/stream/function/IntPredicate;)Lcom/annimon/stream/function/IntPredicate;" bridge="false" native="false" return="com.annimon.stream.function.IntPredicate" jni-return="Lcom/annimon/stream/function/IntPredicate;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="p1" type="com.annimon.stream.function.IntPredicate" jni-type="Lcom/annimon/stream/function/IntPredicate;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="or" jni-signature="(Lcom/annimon/stream/function/IntPredicate;Lcom/annimon/stream/function/IntPredicate;)Lcom/annimon/stream/function/IntPredicate;" bridge="false" native="false" return="com.annimon.stream.function.IntPredicate" jni-return="Lcom/annimon/stream/function/IntPredicate;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="p1" type="com.annimon.stream.function.IntPredicate" jni-type="Lcom/annimon/stream/function/IntPredicate;"></parameter>
        <parameter name="p2" type="com.annimon.stream.function.IntPredicate" jni-type="Lcom/annimon/stream/function/IntPredicate;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="safe" jni-signature="(Lcom/annimon/stream/function/ThrowableIntPredicate;)Lcom/annimon/stream/function/IntPredicate;" bridge="false" native="false" return="com.annimon.stream.function.IntPredicate" jni-return="Lcom/annimon/stream/function/IntPredicate;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="throwablePredicate" type="com.annimon.stream.function.ThrowableIntPredicate&lt;java.lang.Throwable&gt;" jni-type="Lcom/annimon/stream/function/ThrowableIntPredicate&lt;Ljava/lang/Throwable;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="safe" jni-signature="(Lcom/annimon/stream/function/ThrowableIntPredicate;Z)Lcom/annimon/stream/function/IntPredicate;" bridge="false" native="false" return="com.annimon.stream.function.IntPredicate" jni-return="Lcom/annimon/stream/function/IntPredicate;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="throwablePredicate" type="com.annimon.stream.function.ThrowableIntPredicate&lt;java.lang.Throwable&gt;" jni-type="Lcom/annimon/stream/function/ThrowableIntPredicate&lt;Ljava/lang/Throwable;&gt;;"></parameter>
        <parameter name="resultIfFailed" type="boolean" jni-type="Z"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="xor" jni-signature="(Lcom/annimon/stream/function/IntPredicate;Lcom/annimon/stream/function/IntPredicate;)Lcom/annimon/stream/function/IntPredicate;" bridge="false" native="false" return="com.annimon.stream.function.IntPredicate" jni-return="Lcom/annimon/stream/function/IntPredicate;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="p1" type="com.annimon.stream.function.IntPredicate" jni-type="Lcom/annimon/stream/function/IntPredicate;"></parameter>
        <parameter name="p2" type="com.annimon.stream.function.IntPredicate" jni-type="Lcom/annimon/stream/function/IntPredicate;"></parameter>
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="true" name="IntPredicate.Util.1" static="true" visibility="" jni-signature="Lcom/annimon/stream/function/IntPredicate$Util$1;">
      <implements name="com.annimon.stream.function.IntPredicate" name-generic-aware="com.annimon.stream.function.IntPredicate" jni-type="Lcom/annimon/stream/function/IntPredicate;"></implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="test" jni-signature="(I)Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="value" type="int" jni-type="I"></parameter>
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="true" name="IntPredicate.Util.2" static="true" visibility="" jni-signature="Lcom/annimon/stream/function/IntPredicate$Util$2;">
      <implements name="com.annimon.stream.function.IntPredicate" name-generic-aware="com.annimon.stream.function.IntPredicate" jni-type="Lcom/annimon/stream/function/IntPredicate;"></implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="test" jni-signature="(I)Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="value" type="int" jni-type="I"></parameter>
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="true" name="IntPredicate.Util.3" static="true" visibility="" jni-signature="Lcom/annimon/stream/function/IntPredicate$Util$3;">
      <implements name="com.annimon.stream.function.IntPredicate" name-generic-aware="com.annimon.stream.function.IntPredicate" jni-type="Lcom/annimon/stream/function/IntPredicate;"></implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="test" jni-signature="(I)Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="value" type="int" jni-type="I"></parameter>
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="true" name="IntPredicate.Util.4" static="true" visibility="" jni-signature="Lcom/annimon/stream/function/IntPredicate$Util$4;">
      <implements name="com.annimon.stream.function.IntPredicate" name-generic-aware="com.annimon.stream.function.IntPredicate" jni-type="Lcom/annimon/stream/function/IntPredicate;"></implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="test" jni-signature="(I)Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="value" type="int" jni-type="I"></parameter>
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="true" name="IntPredicate.Util.5" static="true" visibility="" jni-signature="Lcom/annimon/stream/function/IntPredicate$Util$5;">
      <implements name="com.annimon.stream.function.IntPredicate" name-generic-aware="com.annimon.stream.function.IntPredicate" jni-type="Lcom/annimon/stream/function/IntPredicate;"></implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="test" jni-signature="(I)Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="value" type="int" jni-type="I"></parameter>
      </method>
    </class>
    <interface abstract="true" deprecated="not deprecated" final="false" name="IntSupplier" static="false" visibility="public" jni-signature="Lcom/annimon/stream/function/IntSupplier;">
      <method abstract="true" deprecated="not deprecated" final="false" name="getAsInt" jni-signature="()I" bridge="false" native="false" return="int" jni-return="I" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </interface>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="false" name="IntSupplier.Util" static="true" visibility="public" jni-signature="Lcom/annimon/stream/function/IntSupplier$Util;">
      <method abstract="false" deprecated="not deprecated" final="false" name="safe" jni-signature="(Lcom/annimon/stream/function/ThrowableIntSupplier;)Lcom/annimon/stream/function/IntSupplier;" bridge="false" native="false" return="com.annimon.stream.function.IntSupplier" jni-return="Lcom/annimon/stream/function/IntSupplier;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="throwableSupplier" type="com.annimon.stream.function.ThrowableIntSupplier&lt;java.lang.Throwable&gt;" jni-type="Lcom/annimon/stream/function/ThrowableIntSupplier&lt;Ljava/lang/Throwable;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="safe" jni-signature="(Lcom/annimon/stream/function/ThrowableIntSupplier;I)Lcom/annimon/stream/function/IntSupplier;" bridge="false" native="false" return="com.annimon.stream.function.IntSupplier" jni-return="Lcom/annimon/stream/function/IntSupplier;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="throwableSupplier" type="com.annimon.stream.function.ThrowableIntSupplier&lt;java.lang.Throwable&gt;" jni-type="Lcom/annimon/stream/function/ThrowableIntSupplier&lt;Ljava/lang/Throwable;&gt;;"></parameter>
        <parameter name="resultIfFailed" type="int" jni-type="I"></parameter>
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="true" name="IntSupplier.Util.1" static="true" visibility="" jni-signature="Lcom/annimon/stream/function/IntSupplier$Util$1;">
      <implements name="com.annimon.stream.function.IntSupplier" name-generic-aware="com.annimon.stream.function.IntSupplier" jni-type="Lcom/annimon/stream/function/IntSupplier;"></implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="getAsInt" jni-signature="()I" bridge="false" native="false" return="int" jni-return="I" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <interface abstract="true" deprecated="not deprecated" final="false" name="IntToDoubleFunction" static="false" visibility="public" jni-signature="Lcom/annimon/stream/function/IntToDoubleFunction;">
      <method abstract="true" deprecated="not deprecated" final="false" name="applyAsDouble" jni-signature="(I)D" bridge="false" native="false" return="double" jni-return="D" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="p0" type="int" jni-type="I"></parameter>
      </method>
    </interface>
    <interface abstract="true" deprecated="not deprecated" final="false" name="IntToLongFunction" static="false" visibility="public" jni-signature="Lcom/annimon/stream/function/IntToLongFunction;">
      <method abstract="true" deprecated="not deprecated" final="false" name="applyAsLong" jni-signature="(I)J" bridge="false" native="false" return="long" jni-return="J" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="p0" type="int" jni-type="I"></parameter>
      </method>
    </interface>
    <interface abstract="true" deprecated="not deprecated" final="false" name="IntUnaryOperator" static="false" visibility="public" jni-signature="Lcom/annimon/stream/function/IntUnaryOperator;">
      <method abstract="true" deprecated="not deprecated" final="false" name="applyAsInt" jni-signature="(I)I" bridge="false" native="false" return="int" jni-return="I" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="p0" type="int" jni-type="I"></parameter>
      </method>
    </interface>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="false" name="IntUnaryOperator.Util" static="true" visibility="public" jni-signature="Lcom/annimon/stream/function/IntUnaryOperator$Util;">
      <method abstract="false" deprecated="not deprecated" final="false" name="identity" jni-signature="()Lcom/annimon/stream/function/IntUnaryOperator;" bridge="false" native="false" return="com.annimon.stream.function.IntUnaryOperator" jni-return="Lcom/annimon/stream/function/IntUnaryOperator;" static="true" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="true" name="IntUnaryOperator.Util.1" static="true" visibility="" jni-signature="Lcom/annimon/stream/function/IntUnaryOperator$Util$1;">
      <implements name="com.annimon.stream.function.IntUnaryOperator" name-generic-aware="com.annimon.stream.function.IntUnaryOperator" jni-type="Lcom/annimon/stream/function/IntUnaryOperator;"></implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="applyAsInt" jni-signature="(I)I" bridge="false" native="false" return="int" jni-return="I" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="operand" type="int" jni-type="I"></parameter>
      </method>
    </class>
    <interface abstract="true" deprecated="not deprecated" final="false" name="LongBinaryOperator" static="false" visibility="public" jni-signature="Lcom/annimon/stream/function/LongBinaryOperator;">
      <method abstract="true" deprecated="not deprecated" final="false" name="applyAsLong" jni-signature="(JJ)J" bridge="false" native="false" return="long" jni-return="J" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="p0" type="long" jni-type="J"></parameter>
        <parameter name="p1" type="long" jni-type="J"></parameter>
      </method>
    </interface>
    <interface abstract="true" deprecated="not deprecated" final="false" name="LongConsumer" static="false" visibility="public" jni-signature="Lcom/annimon/stream/function/LongConsumer;">
      <method abstract="true" deprecated="not deprecated" final="false" name="accept" jni-signature="(J)V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="p0" type="long" jni-type="J"></parameter>
      </method>
    </interface>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="false" name="LongConsumer.Util" static="true" visibility="public" jni-signature="Lcom/annimon/stream/function/LongConsumer$Util;">
      <method abstract="false" deprecated="not deprecated" final="false" name="andThen" jni-signature="(Lcom/annimon/stream/function/LongConsumer;Lcom/annimon/stream/function/LongConsumer;)Lcom/annimon/stream/function/LongConsumer;" bridge="false" native="false" return="com.annimon.stream.function.LongConsumer" jni-return="Lcom/annimon/stream/function/LongConsumer;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="c1" type="com.annimon.stream.function.LongConsumer" jni-type="Lcom/annimon/stream/function/LongConsumer;"></parameter>
        <parameter name="c2" type="com.annimon.stream.function.LongConsumer" jni-type="Lcom/annimon/stream/function/LongConsumer;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="safe" jni-signature="(Lcom/annimon/stream/function/ThrowableLongConsumer;)Lcom/annimon/stream/function/LongConsumer;" bridge="false" native="false" return="com.annimon.stream.function.LongConsumer" jni-return="Lcom/annimon/stream/function/LongConsumer;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="throwableConsumer" type="com.annimon.stream.function.ThrowableLongConsumer&lt;java.lang.Throwable&gt;" jni-type="Lcom/annimon/stream/function/ThrowableLongConsumer&lt;Ljava/lang/Throwable;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="safe" jni-signature="(Lcom/annimon/stream/function/ThrowableLongConsumer;Lcom/annimon/stream/function/LongConsumer;)Lcom/annimon/stream/function/LongConsumer;" bridge="false" native="false" return="com.annimon.stream.function.LongConsumer" jni-return="Lcom/annimon/stream/function/LongConsumer;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="throwableConsumer" type="com.annimon.stream.function.ThrowableLongConsumer&lt;java.lang.Throwable&gt;" jni-type="Lcom/annimon/stream/function/ThrowableLongConsumer&lt;Ljava/lang/Throwable;&gt;;"></parameter>
        <parameter name="onFailedConsumer" type="com.annimon.stream.function.LongConsumer" jni-type="Lcom/annimon/stream/function/LongConsumer;"></parameter>
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="true" name="LongConsumer.Util.1" static="true" visibility="" jni-signature="Lcom/annimon/stream/function/LongConsumer$Util$1;">
      <implements name="com.annimon.stream.function.LongConsumer" name-generic-aware="com.annimon.stream.function.LongConsumer" jni-type="Lcom/annimon/stream/function/LongConsumer;"></implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="accept" jni-signature="(J)V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="value" type="long" jni-type="J"></parameter>
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="true" name="LongConsumer.Util.2" static="true" visibility="" jni-signature="Lcom/annimon/stream/function/LongConsumer$Util$2;">
      <implements name="com.annimon.stream.function.LongConsumer" name-generic-aware="com.annimon.stream.function.LongConsumer" jni-type="Lcom/annimon/stream/function/LongConsumer;"></implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="accept" jni-signature="(J)V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="value" type="long" jni-type="J"></parameter>
      </method>
    </class>
    <interface abstract="true" deprecated="not deprecated" final="false" name="LongFunction" static="false" visibility="public" jni-signature="Lcom/annimon/stream/function/LongFunction;">
      <typeParameters>
        <typeParameter name="R" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
      </typeParameters>
      <method abstract="true" deprecated="not deprecated" final="false" name="apply" jni-signature="(J)Ljava/lang/Object;" bridge="false" native="false" return="R" jni-return="TR;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="p0" type="long" jni-type="J"></parameter>
      </method>
    </interface>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="false" name="LongFunction.Util" static="true" visibility="public" jni-signature="Lcom/annimon/stream/function/LongFunction$Util;">
      <method abstract="false" deprecated="not deprecated" final="false" name="safe" jni-signature="(Lcom/annimon/stream/function/ThrowableLongFunction;)Lcom/annimon/stream/function/LongFunction;" bridge="false" native="false" return="com.annimon.stream.function.LongFunction&lt;R&gt;" jni-return="Lcom/annimon/stream/function/LongFunction&lt;TR;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="R" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="throwableFunction" type="com.annimon.stream.function.ThrowableLongFunction&lt;? extends R, java.lang.Throwable&gt;" jni-type="Lcom/annimon/stream/function/ThrowableLongFunction&lt;+TR;Ljava/lang/Throwable;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="safe" jni-signature="(Lcom/annimon/stream/function/ThrowableLongFunction;Ljava/lang/Object;)Lcom/annimon/stream/function/LongFunction;" bridge="false" native="false" return="com.annimon.stream.function.LongFunction&lt;R&gt;" jni-return="Lcom/annimon/stream/function/LongFunction&lt;TR;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="R" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="throwableFunction" type="com.annimon.stream.function.ThrowableLongFunction&lt;? extends R, java.lang.Throwable&gt;" jni-type="Lcom/annimon/stream/function/ThrowableLongFunction&lt;+TR;Ljava/lang/Throwable;&gt;;"></parameter>
        <parameter name="resultIfFailed" type="R" jni-type="TR;"></parameter>
      </method>
    </class>
    <interface abstract="true" deprecated="not deprecated" final="false" name="LongPredicate" static="false" visibility="public" jni-signature="Lcom/annimon/stream/function/LongPredicate;">
      <method abstract="true" deprecated="not deprecated" final="false" name="test" jni-signature="(J)Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="p0" type="long" jni-type="J"></parameter>
      </method>
    </interface>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="false" name="LongPredicate.Util" static="true" visibility="public" jni-signature="Lcom/annimon/stream/function/LongPredicate$Util;">
      <method abstract="false" deprecated="not deprecated" final="false" name="and" jni-signature="(Lcom/annimon/stream/function/LongPredicate;Lcom/annimon/stream/function/LongPredicate;)Lcom/annimon/stream/function/LongPredicate;" bridge="false" native="false" return="com.annimon.stream.function.LongPredicate" jni-return="Lcom/annimon/stream/function/LongPredicate;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="p1" type="com.annimon.stream.function.LongPredicate" jni-type="Lcom/annimon/stream/function/LongPredicate;"></parameter>
        <parameter name="p2" type="com.annimon.stream.function.LongPredicate" jni-type="Lcom/annimon/stream/function/LongPredicate;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="negate" jni-signature="(Lcom/annimon/stream/function/LongPredicate;)Lcom/annimon/stream/function/LongPredicate;" bridge="false" native="false" return="com.annimon.stream.function.LongPredicate" jni-return="Lcom/annimon/stream/function/LongPredicate;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="p1" type="com.annimon.stream.function.LongPredicate" jni-type="Lcom/annimon/stream/function/LongPredicate;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="or" jni-signature="(Lcom/annimon/stream/function/LongPredicate;Lcom/annimon/stream/function/LongPredicate;)Lcom/annimon/stream/function/LongPredicate;" bridge="false" native="false" return="com.annimon.stream.function.LongPredicate" jni-return="Lcom/annimon/stream/function/LongPredicate;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="p1" type="com.annimon.stream.function.LongPredicate" jni-type="Lcom/annimon/stream/function/LongPredicate;"></parameter>
        <parameter name="p2" type="com.annimon.stream.function.LongPredicate" jni-type="Lcom/annimon/stream/function/LongPredicate;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="safe" jni-signature="(Lcom/annimon/stream/function/ThrowableLongPredicate;)Lcom/annimon/stream/function/LongPredicate;" bridge="false" native="false" return="com.annimon.stream.function.LongPredicate" jni-return="Lcom/annimon/stream/function/LongPredicate;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="throwablePredicate" type="com.annimon.stream.function.ThrowableLongPredicate&lt;java.lang.Throwable&gt;" jni-type="Lcom/annimon/stream/function/ThrowableLongPredicate&lt;Ljava/lang/Throwable;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="safe" jni-signature="(Lcom/annimon/stream/function/ThrowableLongPredicate;Z)Lcom/annimon/stream/function/LongPredicate;" bridge="false" native="false" return="com.annimon.stream.function.LongPredicate" jni-return="Lcom/annimon/stream/function/LongPredicate;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="throwablePredicate" type="com.annimon.stream.function.ThrowableLongPredicate&lt;java.lang.Throwable&gt;" jni-type="Lcom/annimon/stream/function/ThrowableLongPredicate&lt;Ljava/lang/Throwable;&gt;;"></parameter>
        <parameter name="resultIfFailed" type="boolean" jni-type="Z"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="xor" jni-signature="(Lcom/annimon/stream/function/LongPredicate;Lcom/annimon/stream/function/LongPredicate;)Lcom/annimon/stream/function/LongPredicate;" bridge="false" native="false" return="com.annimon.stream.function.LongPredicate" jni-return="Lcom/annimon/stream/function/LongPredicate;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="p1" type="com.annimon.stream.function.LongPredicate" jni-type="Lcom/annimon/stream/function/LongPredicate;"></parameter>
        <parameter name="p2" type="com.annimon.stream.function.LongPredicate" jni-type="Lcom/annimon/stream/function/LongPredicate;"></parameter>
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="true" name="LongPredicate.Util.1" static="true" visibility="" jni-signature="Lcom/annimon/stream/function/LongPredicate$Util$1;">
      <implements name="com.annimon.stream.function.LongPredicate" name-generic-aware="com.annimon.stream.function.LongPredicate" jni-type="Lcom/annimon/stream/function/LongPredicate;"></implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="test" jni-signature="(J)Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="value" type="long" jni-type="J"></parameter>
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="true" name="LongPredicate.Util.2" static="true" visibility="" jni-signature="Lcom/annimon/stream/function/LongPredicate$Util$2;">
      <implements name="com.annimon.stream.function.LongPredicate" name-generic-aware="com.annimon.stream.function.LongPredicate" jni-type="Lcom/annimon/stream/function/LongPredicate;"></implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="test" jni-signature="(J)Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="value" type="long" jni-type="J"></parameter>
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="true" name="LongPredicate.Util.3" static="true" visibility="" jni-signature="Lcom/annimon/stream/function/LongPredicate$Util$3;">
      <implements name="com.annimon.stream.function.LongPredicate" name-generic-aware="com.annimon.stream.function.LongPredicate" jni-type="Lcom/annimon/stream/function/LongPredicate;"></implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="test" jni-signature="(J)Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="value" type="long" jni-type="J"></parameter>
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="true" name="LongPredicate.Util.4" static="true" visibility="" jni-signature="Lcom/annimon/stream/function/LongPredicate$Util$4;">
      <implements name="com.annimon.stream.function.LongPredicate" name-generic-aware="com.annimon.stream.function.LongPredicate" jni-type="Lcom/annimon/stream/function/LongPredicate;"></implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="test" jni-signature="(J)Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="value" type="long" jni-type="J"></parameter>
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="true" name="LongPredicate.Util.5" static="true" visibility="" jni-signature="Lcom/annimon/stream/function/LongPredicate$Util$5;">
      <implements name="com.annimon.stream.function.LongPredicate" name-generic-aware="com.annimon.stream.function.LongPredicate" jni-type="Lcom/annimon/stream/function/LongPredicate;"></implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="test" jni-signature="(J)Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="value" type="long" jni-type="J"></parameter>
      </method>
    </class>
    <interface abstract="true" deprecated="not deprecated" final="false" name="LongSupplier" static="false" visibility="public" jni-signature="Lcom/annimon/stream/function/LongSupplier;">
      <method abstract="true" deprecated="not deprecated" final="false" name="getAsLong" jni-signature="()J" bridge="false" native="false" return="long" jni-return="J" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </interface>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="false" name="LongSupplier.Util" static="true" visibility="public" jni-signature="Lcom/annimon/stream/function/LongSupplier$Util;">
      <method abstract="false" deprecated="not deprecated" final="false" name="safe" jni-signature="(Lcom/annimon/stream/function/ThrowableLongSupplier;)Lcom/annimon/stream/function/LongSupplier;" bridge="false" native="false" return="com.annimon.stream.function.LongSupplier" jni-return="Lcom/annimon/stream/function/LongSupplier;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="throwableSupplier" type="com.annimon.stream.function.ThrowableLongSupplier&lt;java.lang.Throwable&gt;" jni-type="Lcom/annimon/stream/function/ThrowableLongSupplier&lt;Ljava/lang/Throwable;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="safe" jni-signature="(Lcom/annimon/stream/function/ThrowableLongSupplier;J)Lcom/annimon/stream/function/LongSupplier;" bridge="false" native="false" return="com.annimon.stream.function.LongSupplier" jni-return="Lcom/annimon/stream/function/LongSupplier;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="throwableSupplier" type="com.annimon.stream.function.ThrowableLongSupplier&lt;java.lang.Throwable&gt;" jni-type="Lcom/annimon/stream/function/ThrowableLongSupplier&lt;Ljava/lang/Throwable;&gt;;"></parameter>
        <parameter name="resultIfFailed" type="long" jni-type="J"></parameter>
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="true" name="LongSupplier.Util.1" static="true" visibility="" jni-signature="Lcom/annimon/stream/function/LongSupplier$Util$1;">
      <implements name="com.annimon.stream.function.LongSupplier" name-generic-aware="com.annimon.stream.function.LongSupplier" jni-type="Lcom/annimon/stream/function/LongSupplier;"></implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="getAsLong" jni-signature="()J" bridge="false" native="false" return="long" jni-return="J" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <interface abstract="true" deprecated="not deprecated" final="false" name="LongToDoubleFunction" static="false" visibility="public" jni-signature="Lcom/annimon/stream/function/LongToDoubleFunction;">
      <method abstract="true" deprecated="not deprecated" final="false" name="applyAsDouble" jni-signature="(J)D" bridge="false" native="false" return="double" jni-return="D" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="p0" type="long" jni-type="J"></parameter>
      </method>
    </interface>
    <interface abstract="true" deprecated="not deprecated" final="false" name="LongToIntFunction" static="false" visibility="public" jni-signature="Lcom/annimon/stream/function/LongToIntFunction;">
      <method abstract="true" deprecated="not deprecated" final="false" name="applyAsInt" jni-signature="(J)I" bridge="false" native="false" return="int" jni-return="I" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="p0" type="long" jni-type="J"></parameter>
      </method>
    </interface>
    <interface abstract="true" deprecated="not deprecated" final="false" name="LongUnaryOperator" static="false" visibility="public" jni-signature="Lcom/annimon/stream/function/LongUnaryOperator;">
      <method abstract="true" deprecated="not deprecated" final="false" name="applyAsLong" jni-signature="(J)J" bridge="false" native="false" return="long" jni-return="J" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="p0" type="long" jni-type="J"></parameter>
      </method>
    </interface>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="false" name="LongUnaryOperator.Util" static="true" visibility="public" jni-signature="Lcom/annimon/stream/function/LongUnaryOperator$Util;">
      <method abstract="false" deprecated="not deprecated" final="false" name="identity" jni-signature="()Lcom/annimon/stream/function/LongUnaryOperator;" bridge="false" native="false" return="com.annimon.stream.function.LongUnaryOperator" jni-return="Lcom/annimon/stream/function/LongUnaryOperator;" static="true" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="true" name="LongUnaryOperator.Util.1" static="true" visibility="" jni-signature="Lcom/annimon/stream/function/LongUnaryOperator$Util$1;">
      <implements name="com.annimon.stream.function.LongUnaryOperator" name-generic-aware="com.annimon.stream.function.LongUnaryOperator" jni-type="Lcom/annimon/stream/function/LongUnaryOperator;"></implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="applyAsLong" jni-signature="(J)J" bridge="false" native="false" return="long" jni-return="J" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="operand" type="long" jni-type="J"></parameter>
      </method>
    </class>
    <interface abstract="true" deprecated="not deprecated" final="false" name="ObjDoubleConsumer" static="false" visibility="public" jni-signature="Lcom/annimon/stream/function/ObjDoubleConsumer;">
      <typeParameters>
        <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
      </typeParameters>
      <method abstract="true" deprecated="not deprecated" final="false" name="accept" jni-signature="(Ljava/lang/Object;D)V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="p0" type="T" jni-type="TT;"></parameter>
        <parameter name="p1" type="double" jni-type="D"></parameter>
      </method>
    </interface>
    <interface abstract="true" deprecated="not deprecated" final="false" name="ObjIntConsumer" static="false" visibility="public" jni-signature="Lcom/annimon/stream/function/ObjIntConsumer;">
      <typeParameters>
        <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
      </typeParameters>
      <method abstract="true" deprecated="not deprecated" final="false" name="accept" jni-signature="(Ljava/lang/Object;I)V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="p0" type="T" jni-type="TT;"></parameter>
        <parameter name="p1" type="int" jni-type="I"></parameter>
      </method>
    </interface>
    <interface abstract="true" deprecated="not deprecated" final="false" name="ObjLongConsumer" static="false" visibility="public" jni-signature="Lcom/annimon/stream/function/ObjLongConsumer;">
      <typeParameters>
        <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
      </typeParameters>
      <method abstract="true" deprecated="not deprecated" final="false" name="accept" jni-signature="(Ljava/lang/Object;J)V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="p0" type="T" jni-type="TT;"></parameter>
        <parameter name="p1" type="long" jni-type="J"></parameter>
      </method>
    </interface>
    <interface abstract="true" deprecated="not deprecated" final="false" name="Predicate" static="false" visibility="public" jni-signature="Lcom/annimon/stream/function/Predicate;">
      <typeParameters>
        <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
      </typeParameters>
      <method abstract="true" deprecated="not deprecated" final="false" name="test" jni-signature="(Ljava/lang/Object;)Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="p0" type="T" jni-type="TT;"></parameter>
      </method>
    </interface>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="false" name="Predicate.Util" static="true" visibility="public" jni-signature="Lcom/annimon/stream/function/Predicate$Util;">
      <method abstract="false" deprecated="not deprecated" final="false" name="and" jni-signature="(Lcom/annimon/stream/function/Predicate;Lcom/annimon/stream/function/Predicate;)Lcom/annimon/stream/function/Predicate;" bridge="false" native="false" return="com.annimon.stream.function.Predicate&lt;T&gt;" jni-return="Lcom/annimon/stream/function/Predicate&lt;TT;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="p1" type="com.annimon.stream.function.Predicate&lt;? super T&gt;" jni-type="Lcom/annimon/stream/function/Predicate&lt;-TT;&gt;;"></parameter>
        <parameter name="p2" type="com.annimon.stream.function.Predicate&lt;? super T&gt;" jni-type="Lcom/annimon/stream/function/Predicate&lt;-TT;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="and" jni-signature="(Lcom/annimon/stream/function/Predicate;Lcom/annimon/stream/function/Predicate;[Lcom/annimon/stream/function/Predicate;)Lcom/annimon/stream/function/Predicate;" bridge="false" native="false" return="com.annimon.stream.function.Predicate&lt;T&gt;" jni-return="Lcom/annimon/stream/function/Predicate&lt;TT;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="p1" type="com.annimon.stream.function.Predicate&lt;? super T&gt;" jni-type="Lcom/annimon/stream/function/Predicate&lt;-TT;&gt;;"></parameter>
        <parameter name="p2" type="com.annimon.stream.function.Predicate&lt;? super T&gt;" jni-type="Lcom/annimon/stream/function/Predicate&lt;-TT;&gt;;"></parameter>
        <parameter name="rest" type="com.annimon.stream.function.Predicate&lt;? super T&gt;..." jni-type="[Lcom/annimon/stream/function/Predicate&lt;-TT;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="negate" jni-signature="(Lcom/annimon/stream/function/Predicate;)Lcom/annimon/stream/function/Predicate;" bridge="false" native="false" return="com.annimon.stream.function.Predicate&lt;T&gt;" jni-return="Lcom/annimon/stream/function/Predicate&lt;TT;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="p1" type="com.annimon.stream.function.Predicate&lt;? super T&gt;" jni-type="Lcom/annimon/stream/function/Predicate&lt;-TT;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="notNull" jni-signature="()Lcom/annimon/stream/function/Predicate;" bridge="false" native="false" return="com.annimon.stream.function.Predicate&lt;T&gt;" jni-return="Lcom/annimon/stream/function/Predicate&lt;TT;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="or" jni-signature="(Lcom/annimon/stream/function/Predicate;Lcom/annimon/stream/function/Predicate;)Lcom/annimon/stream/function/Predicate;" bridge="false" native="false" return="com.annimon.stream.function.Predicate&lt;T&gt;" jni-return="Lcom/annimon/stream/function/Predicate&lt;TT;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="p1" type="com.annimon.stream.function.Predicate&lt;? super T&gt;" jni-type="Lcom/annimon/stream/function/Predicate&lt;-TT;&gt;;"></parameter>
        <parameter name="p2" type="com.annimon.stream.function.Predicate&lt;? super T&gt;" jni-type="Lcom/annimon/stream/function/Predicate&lt;-TT;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="or" jni-signature="(Lcom/annimon/stream/function/Predicate;Lcom/annimon/stream/function/Predicate;[Lcom/annimon/stream/function/Predicate;)Lcom/annimon/stream/function/Predicate;" bridge="false" native="false" return="com.annimon.stream.function.Predicate&lt;T&gt;" jni-return="Lcom/annimon/stream/function/Predicate&lt;TT;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="p1" type="com.annimon.stream.function.Predicate&lt;? super T&gt;" jni-type="Lcom/annimon/stream/function/Predicate&lt;-TT;&gt;;"></parameter>
        <parameter name="p2" type="com.annimon.stream.function.Predicate&lt;? super T&gt;" jni-type="Lcom/annimon/stream/function/Predicate&lt;-TT;&gt;;"></parameter>
        <parameter name="rest" type="com.annimon.stream.function.Predicate&lt;? super T&gt;..." jni-type="[Lcom/annimon/stream/function/Predicate&lt;-TT;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="safe" jni-signature="(Lcom/annimon/stream/function/ThrowablePredicate;)Lcom/annimon/stream/function/Predicate;" bridge="false" native="false" return="com.annimon.stream.function.Predicate&lt;T&gt;" jni-return="Lcom/annimon/stream/function/Predicate&lt;TT;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="throwablePredicate" type="com.annimon.stream.function.ThrowablePredicate&lt;? super T, java.lang.Throwable&gt;" jni-type="Lcom/annimon/stream/function/ThrowablePredicate&lt;-TT;Ljava/lang/Throwable;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="safe" jni-signature="(Lcom/annimon/stream/function/ThrowablePredicate;Z)Lcom/annimon/stream/function/Predicate;" bridge="false" native="false" return="com.annimon.stream.function.Predicate&lt;T&gt;" jni-return="Lcom/annimon/stream/function/Predicate&lt;TT;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="throwablePredicate" type="com.annimon.stream.function.ThrowablePredicate&lt;? super T, java.lang.Throwable&gt;" jni-type="Lcom/annimon/stream/function/ThrowablePredicate&lt;-TT;Ljava/lang/Throwable;&gt;;"></parameter>
        <parameter name="resultIfFailed" type="boolean" jni-type="Z"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="xor" jni-signature="(Lcom/annimon/stream/function/Predicate;Lcom/annimon/stream/function/Predicate;)Lcom/annimon/stream/function/Predicate;" bridge="false" native="false" return="com.annimon.stream.function.Predicate&lt;T&gt;" jni-return="Lcom/annimon/stream/function/Predicate&lt;TT;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="p1" type="com.annimon.stream.function.Predicate&lt;? super T&gt;" jni-type="Lcom/annimon/stream/function/Predicate&lt;-TT;&gt;;"></parameter>
        <parameter name="p2" type="com.annimon.stream.function.Predicate&lt;? super T&gt;" jni-type="Lcom/annimon/stream/function/Predicate&lt;-TT;&gt;;"></parameter>
      </method>
    </class>
    <interface abstract="true" deprecated="not deprecated" final="false" name="Supplier" static="false" visibility="public" jni-signature="Lcom/annimon/stream/function/Supplier;">
      <typeParameters>
        <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
      </typeParameters>
      <method abstract="true" deprecated="not deprecated" final="false" name="get" jni-signature="()Ljava/lang/Object;" bridge="false" native="false" return="T" jni-return="TT;" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </interface>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="false" name="Supplier.Util" static="true" visibility="public" jni-signature="Lcom/annimon/stream/function/Supplier$Util;">
      <method abstract="false" deprecated="not deprecated" final="false" name="safe" jni-signature="(Lcom/annimon/stream/function/ThrowableSupplier;)Lcom/annimon/stream/function/Supplier;" bridge="false" native="false" return="com.annimon.stream.function.Supplier&lt;T&gt;" jni-return="Lcom/annimon/stream/function/Supplier&lt;TT;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="throwableSupplier" type="com.annimon.stream.function.ThrowableSupplier&lt;? extends T, java.lang.Throwable&gt;" jni-type="Lcom/annimon/stream/function/ThrowableSupplier&lt;+TT;Ljava/lang/Throwable;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="safe" jni-signature="(Lcom/annimon/stream/function/ThrowableSupplier;Ljava/lang/Object;)Lcom/annimon/stream/function/Supplier;" bridge="false" native="false" return="com.annimon.stream.function.Supplier&lt;T&gt;" jni-return="Lcom/annimon/stream/function/Supplier&lt;TT;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="throwableSupplier" type="com.annimon.stream.function.ThrowableSupplier&lt;? extends T, java.lang.Throwable&gt;" jni-type="Lcom/annimon/stream/function/ThrowableSupplier&lt;+TT;Ljava/lang/Throwable;&gt;;"></parameter>
        <parameter name="resultIfFailed" type="T" jni-type="TT;"></parameter>
      </method>
    </class>
    <interface abstract="true" deprecated="not deprecated" final="false" name="ThrowableConsumer" static="false" visibility="public" jni-signature="Lcom/annimon/stream/function/ThrowableConsumer;">
      <typeParameters>
        <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        <typeParameter name="E" classBound="java.lang.Throwable" jni-classBound="Ljava/lang/Throwable;">
          <genericConstraints>
            <genericConstraint type="java.lang.Throwable"></genericConstraint>
          </genericConstraints>
        </typeParameter>
      </typeParameters>
      <method abstract="true" deprecated="not deprecated" final="false" name="accept" jni-signature="(Ljava/lang/Object;)V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="p0" type="T" jni-type="TT;"></parameter>
        <exception name="Throwable" type="E"></exception>
      </method>
    </interface>
    <interface abstract="true" deprecated="not deprecated" final="false" name="ThrowableDoubleConsumer" static="false" visibility="public" jni-signature="Lcom/annimon/stream/function/ThrowableDoubleConsumer;">
      <typeParameters>
        <typeParameter name="E" classBound="java.lang.Throwable" jni-classBound="Ljava/lang/Throwable;">
          <genericConstraints>
            <genericConstraint type="java.lang.Throwable"></genericConstraint>
          </genericConstraints>
        </typeParameter>
      </typeParameters>
      <method abstract="true" deprecated="not deprecated" final="false" name="accept" jni-signature="(D)V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="p0" type="double" jni-type="D"></parameter>
        <exception name="Throwable" type="E"></exception>
      </method>
    </interface>
    <interface abstract="true" deprecated="not deprecated" final="false" name="ThrowableDoubleFunction" static="false" visibility="public" jni-signature="Lcom/annimon/stream/function/ThrowableDoubleFunction;">
      <typeParameters>
        <typeParameter name="R" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        <typeParameter name="E" classBound="java.lang.Throwable" jni-classBound="Ljava/lang/Throwable;">
          <genericConstraints>
            <genericConstraint type="java.lang.Throwable"></genericConstraint>
          </genericConstraints>
        </typeParameter>
      </typeParameters>
      <method abstract="true" deprecated="not deprecated" final="false" name="apply" jni-signature="(D)Ljava/lang/Object;" bridge="false" native="false" return="R" jni-return="TR;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="p0" type="double" jni-type="D"></parameter>
        <exception name="Throwable" type="E"></exception>
      </method>
    </interface>
    <interface abstract="true" deprecated="not deprecated" final="false" name="ThrowableDoublePredicate" static="false" visibility="public" jni-signature="Lcom/annimon/stream/function/ThrowableDoublePredicate;">
      <typeParameters>
        <typeParameter name="E" classBound="java.lang.Throwable" jni-classBound="Ljava/lang/Throwable;">
          <genericConstraints>
            <genericConstraint type="java.lang.Throwable"></genericConstraint>
          </genericConstraints>
        </typeParameter>
      </typeParameters>
      <method abstract="true" deprecated="not deprecated" final="false" name="test" jni-signature="(D)Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="p0" type="double" jni-type="D"></parameter>
        <exception name="Throwable" type="E"></exception>
      </method>
    </interface>
    <interface abstract="true" deprecated="not deprecated" final="false" name="ThrowableDoubleSupplier" static="false" visibility="public" jni-signature="Lcom/annimon/stream/function/ThrowableDoubleSupplier;">
      <typeParameters>
        <typeParameter name="E" classBound="java.lang.Throwable" jni-classBound="Ljava/lang/Throwable;">
          <genericConstraints>
            <genericConstraint type="java.lang.Throwable"></genericConstraint>
          </genericConstraints>
        </typeParameter>
      </typeParameters>
      <method abstract="true" deprecated="not deprecated" final="false" name="getAsDouble" jni-signature="()D" bridge="false" native="false" return="double" jni-return="D" static="false" synchronized="false" synthetic="false" visibility="public">
        <exception name="Throwable" type="E"></exception>
      </method>
    </interface>
    <interface abstract="true" deprecated="not deprecated" final="false" name="ThrowableFunction" static="false" visibility="public" jni-signature="Lcom/annimon/stream/function/ThrowableFunction;">
      <typeParameters>
        <typeParameter name="I" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        <typeParameter name="R" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        <typeParameter name="E" classBound="java.lang.Throwable" jni-classBound="Ljava/lang/Throwable;">
          <genericConstraints>
            <genericConstraint type="java.lang.Throwable"></genericConstraint>
          </genericConstraints>
        </typeParameter>
      </typeParameters>
      <method abstract="true" deprecated="not deprecated" final="false" name="apply" jni-signature="(Ljava/lang/Object;)Ljava/lang/Object;" bridge="false" native="false" return="R" jni-return="TR;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="p0" type="I" jni-type="TI;"></parameter>
        <exception name="Throwable" type="E"></exception>
      </method>
    </interface>
    <interface abstract="true" deprecated="not deprecated" final="false" name="ThrowableIntConsumer" static="false" visibility="public" jni-signature="Lcom/annimon/stream/function/ThrowableIntConsumer;">
      <typeParameters>
        <typeParameter name="E" classBound="java.lang.Throwable" jni-classBound="Ljava/lang/Throwable;">
          <genericConstraints>
            <genericConstraint type="java.lang.Throwable"></genericConstraint>
          </genericConstraints>
        </typeParameter>
      </typeParameters>
      <method abstract="true" deprecated="not deprecated" final="false" name="accept" jni-signature="(I)V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="p0" type="int" jni-type="I"></parameter>
        <exception name="Throwable" type="E"></exception>
      </method>
    </interface>
    <interface abstract="true" deprecated="not deprecated" final="false" name="ThrowableIntFunction" static="false" visibility="public" jni-signature="Lcom/annimon/stream/function/ThrowableIntFunction;">
      <typeParameters>
        <typeParameter name="R" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        <typeParameter name="E" classBound="java.lang.Throwable" jni-classBound="Ljava/lang/Throwable;">
          <genericConstraints>
            <genericConstraint type="java.lang.Throwable"></genericConstraint>
          </genericConstraints>
        </typeParameter>
      </typeParameters>
      <method abstract="true" deprecated="not deprecated" final="false" name="apply" jni-signature="(I)Ljava/lang/Object;" bridge="false" native="false" return="R" jni-return="TR;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="p0" type="int" jni-type="I"></parameter>
        <exception name="Throwable" type="E"></exception>
      </method>
    </interface>
    <interface abstract="true" deprecated="not deprecated" final="false" name="ThrowableIntPredicate" static="false" visibility="public" jni-signature="Lcom/annimon/stream/function/ThrowableIntPredicate;">
      <typeParameters>
        <typeParameter name="E" classBound="java.lang.Throwable" jni-classBound="Ljava/lang/Throwable;">
          <genericConstraints>
            <genericConstraint type="java.lang.Throwable"></genericConstraint>
          </genericConstraints>
        </typeParameter>
      </typeParameters>
      <method abstract="true" deprecated="not deprecated" final="false" name="test" jni-signature="(I)Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="p0" type="int" jni-type="I"></parameter>
        <exception name="Throwable" type="E"></exception>
      </method>
    </interface>
    <interface abstract="true" deprecated="not deprecated" final="false" name="ThrowableIntSupplier" static="false" visibility="public" jni-signature="Lcom/annimon/stream/function/ThrowableIntSupplier;">
      <typeParameters>
        <typeParameter name="E" classBound="java.lang.Throwable" jni-classBound="Ljava/lang/Throwable;">
          <genericConstraints>
            <genericConstraint type="java.lang.Throwable"></genericConstraint>
          </genericConstraints>
        </typeParameter>
      </typeParameters>
      <method abstract="true" deprecated="not deprecated" final="false" name="getAsInt" jni-signature="()I" bridge="false" native="false" return="int" jni-return="I" static="false" synchronized="false" synthetic="false" visibility="public">
        <exception name="Throwable" type="E"></exception>
      </method>
    </interface>
    <interface abstract="true" deprecated="not deprecated" final="false" name="ThrowableLongConsumer" static="false" visibility="public" jni-signature="Lcom/annimon/stream/function/ThrowableLongConsumer;">
      <typeParameters>
        <typeParameter name="E" classBound="java.lang.Throwable" jni-classBound="Ljava/lang/Throwable;">
          <genericConstraints>
            <genericConstraint type="java.lang.Throwable"></genericConstraint>
          </genericConstraints>
        </typeParameter>
      </typeParameters>
      <method abstract="true" deprecated="not deprecated" final="false" name="accept" jni-signature="(J)V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="p0" type="long" jni-type="J"></parameter>
        <exception name="Throwable" type="E"></exception>
      </method>
    </interface>
    <interface abstract="true" deprecated="not deprecated" final="false" name="ThrowableLongFunction" static="false" visibility="public" jni-signature="Lcom/annimon/stream/function/ThrowableLongFunction;">
      <typeParameters>
        <typeParameter name="R" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        <typeParameter name="E" classBound="java.lang.Throwable" jni-classBound="Ljava/lang/Throwable;">
          <genericConstraints>
            <genericConstraint type="java.lang.Throwable"></genericConstraint>
          </genericConstraints>
        </typeParameter>
      </typeParameters>
      <method abstract="true" deprecated="not deprecated" final="false" name="apply" jni-signature="(J)Ljava/lang/Object;" bridge="false" native="false" return="R" jni-return="TR;" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="p0" type="long" jni-type="J"></parameter>
        <exception name="Throwable" type="E"></exception>
      </method>
    </interface>
    <interface abstract="true" deprecated="not deprecated" final="false" name="ThrowableLongPredicate" static="false" visibility="public" jni-signature="Lcom/annimon/stream/function/ThrowableLongPredicate;">
      <typeParameters>
        <typeParameter name="E" classBound="java.lang.Throwable" jni-classBound="Ljava/lang/Throwable;">
          <genericConstraints>
            <genericConstraint type="java.lang.Throwable"></genericConstraint>
          </genericConstraints>
        </typeParameter>
      </typeParameters>
      <method abstract="true" deprecated="not deprecated" final="false" name="test" jni-signature="(J)Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="p0" type="long" jni-type="J"></parameter>
        <exception name="Throwable" type="E"></exception>
      </method>
    </interface>
    <interface abstract="true" deprecated="not deprecated" final="false" name="ThrowableLongSupplier" static="false" visibility="public" jni-signature="Lcom/annimon/stream/function/ThrowableLongSupplier;">
      <typeParameters>
        <typeParameter name="E" classBound="java.lang.Throwable" jni-classBound="Ljava/lang/Throwable;">
          <genericConstraints>
            <genericConstraint type="java.lang.Throwable"></genericConstraint>
          </genericConstraints>
        </typeParameter>
      </typeParameters>
      <method abstract="true" deprecated="not deprecated" final="false" name="getAsLong" jni-signature="()J" bridge="false" native="false" return="long" jni-return="J" static="false" synchronized="false" synthetic="false" visibility="public">
        <exception name="Throwable" type="E"></exception>
      </method>
    </interface>
    <interface abstract="true" deprecated="not deprecated" final="false" name="ThrowablePredicate" static="false" visibility="public" jni-signature="Lcom/annimon/stream/function/ThrowablePredicate;">
      <typeParameters>
        <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        <typeParameter name="E" classBound="java.lang.Throwable" jni-classBound="Ljava/lang/Throwable;">
          <genericConstraints>
            <genericConstraint type="java.lang.Throwable"></genericConstraint>
          </genericConstraints>
        </typeParameter>
      </typeParameters>
      <method abstract="true" deprecated="not deprecated" final="false" name="test" jni-signature="(Ljava/lang/Object;)Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="p0" type="T" jni-type="TT;"></parameter>
        <exception name="Throwable" type="E"></exception>
      </method>
    </interface>
    <interface abstract="true" deprecated="not deprecated" final="false" name="ThrowableSupplier" static="false" visibility="public" jni-signature="Lcom/annimon/stream/function/ThrowableSupplier;">
      <typeParameters>
        <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        <typeParameter name="E" classBound="java.lang.Throwable" jni-classBound="Ljava/lang/Throwable;">
          <genericConstraints>
            <genericConstraint type="java.lang.Throwable"></genericConstraint>
          </genericConstraints>
        </typeParameter>
      </typeParameters>
      <method abstract="true" deprecated="not deprecated" final="false" name="get" jni-signature="()Ljava/lang/Object;" bridge="false" native="false" return="T" jni-return="TT;" static="false" synchronized="false" synthetic="false" visibility="public">
        <exception name="Throwable" type="E"></exception>
      </method>
    </interface>
    <interface abstract="true" deprecated="not deprecated" final="false" name="ToBooleanFunction" static="false" visibility="public" jni-signature="Lcom/annimon/stream/function/ToBooleanFunction;">
      <typeParameters>
        <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
      </typeParameters>
      <method abstract="true" deprecated="not deprecated" final="false" name="applyAsBoolean" jni-signature="(Ljava/lang/Object;)Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="p0" type="T" jni-type="TT;"></parameter>
      </method>
    </interface>
    <interface abstract="true" deprecated="not deprecated" final="false" name="ToDoubleFunction" static="false" visibility="public" jni-signature="Lcom/annimon/stream/function/ToDoubleFunction;">
      <typeParameters>
        <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
      </typeParameters>
      <method abstract="true" deprecated="not deprecated" final="false" name="applyAsDouble" jni-signature="(Ljava/lang/Object;)D" bridge="false" native="false" return="double" jni-return="D" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="p0" type="T" jni-type="TT;"></parameter>
      </method>
    </interface>
    <interface abstract="true" deprecated="not deprecated" final="false" name="ToIntFunction" static="false" visibility="public" jni-signature="Lcom/annimon/stream/function/ToIntFunction;">
      <typeParameters>
        <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
      </typeParameters>
      <method abstract="true" deprecated="not deprecated" final="false" name="applyAsInt" jni-signature="(Ljava/lang/Object;)I" bridge="false" native="false" return="int" jni-return="I" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="p0" type="T" jni-type="TT;"></parameter>
      </method>
    </interface>
    <interface abstract="true" deprecated="not deprecated" final="false" name="ToLongFunction" static="false" visibility="public" jni-signature="Lcom/annimon/stream/function/ToLongFunction;">
      <typeParameters>
        <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
      </typeParameters>
      <method abstract="true" deprecated="not deprecated" final="false" name="applyAsLong" jni-signature="(Ljava/lang/Object;)J" bridge="false" native="false" return="long" jni-return="J" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="p0" type="T" jni-type="TT;"></parameter>
      </method>
    </interface>
    <interface abstract="true" deprecated="not deprecated" final="false" name="UnaryOperator" static="false" visibility="public" jni-signature="Lcom/annimon/stream/function/UnaryOperator;">
      <implements name="com.annimon.stream.function.Function" name-generic-aware="com.annimon.stream.function.Function&lt;T, T&gt;" jni-type="Lcom/annimon/stream/function/Function&lt;TT;TT;&gt;;"></implements>
      <typeParameters>
        <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
      </typeParameters>
    </interface>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="false" name="UnaryOperator.Util" static="true" visibility="public" jni-signature="Lcom/annimon/stream/function/UnaryOperator$Util;">
      <method abstract="false" deprecated="not deprecated" final="false" name="identity" jni-signature="()Lcom/annimon/stream/function/UnaryOperator;" bridge="false" native="false" return="com.annimon.stream.function.UnaryOperator&lt;T&gt;" jni-return="Lcom/annimon/stream/function/UnaryOperator&lt;TT;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
      </method>
    </class>
  </package>
  <package name="com.annimon.stream.internal" jni-name="com/annimon/stream/internal">
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="true" name="Compat" static="false" visibility="public" jni-signature="Lcom/annimon/stream/internal/Compat;">
      <constructor deprecated="not deprecated" final="false" name="Compat" jni-signature="()V" bridge="false" static="false" type="com.annimon.stream.internal.Compat" synthetic="false" visibility="public"></constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="newArray" jni-signature="(I[Ljava/lang/Object;)[Ljava/lang/Object;" bridge="false" native="false" return="E[]" jni-return="[TE;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="E" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="length" type="int" jni-type="I"></parameter>
        <parameter name="array" type="E..." jni-type="[TE;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="newArrayCompat" jni-signature="([Ljava/lang/Object;I)[Ljava/lang/Object;" bridge="false" native="false" return="E[]" jni-return="[TE;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="E" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="array" type="E[]" jni-type="[TE;"></parameter>
        <parameter name="length" type="int" jni-type="I"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="queue" jni-signature="()Ljava/util/Queue;" bridge="false" native="false" return="java.util.Queue&lt;T&gt;" jni-return="Ljava/util/Queue&lt;TT;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="true" name="Compose" static="false" visibility="public" jni-signature="Lcom/annimon/stream/internal/Compose;">
      <method abstract="false" deprecated="not deprecated" final="false" name="closeables" jni-signature="(Ljava/io/Closeable;Ljava/io/Closeable;)Ljava/lang/Runnable;" bridge="false" native="false" return="java.lang.Runnable" jni-return="Ljava/lang/Runnable;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="a" type="java.io.Closeable" jni-type="Ljava/io/Closeable;"></parameter>
        <parameter name="b" type="java.io.Closeable" jni-type="Ljava/io/Closeable;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="runnables" jni-signature="(Ljava/lang/Runnable;Ljava/lang/Runnable;)Ljava/lang/Runnable;" bridge="false" native="false" return="java.lang.Runnable" jni-return="Ljava/lang/Runnable;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="a" type="java.lang.Runnable" jni-type="Ljava/lang/Runnable;"></parameter>
        <parameter name="b" type="java.lang.Runnable" jni-type="Ljava/lang/Runnable;"></parameter>
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="true" name="Compose.1" static="true" visibility="" jni-signature="Lcom/annimon/stream/internal/Compose$1;">
      <implements name="java.lang.Runnable" name-generic-aware="java.lang.Runnable" jni-type="Ljava/lang/Runnable;"></implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="run" jni-signature="()V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="true" name="Compose.2" static="true" visibility="" jni-signature="Lcom/annimon/stream/internal/Compose$2;">
      <implements name="java.lang.Runnable" name-generic-aware="java.lang.Runnable" jni-type="Ljava/lang/Runnable;"></implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="run" jni-signature="()V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="true" name="Operators" static="false" visibility="public" jni-signature="Lcom/annimon/stream/internal/Operators;">
      <method abstract="false" deprecated="not deprecated" final="false" name="toArray" jni-signature="(Ljava/util/Iterator;Lcom/annimon/stream/function/IntFunction;)[Ljava/lang/Object;" bridge="false" native="false" return="R[]" jni-return="[TR;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
          <typeParameter name="R" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="iterator" type="java.util.Iterator&lt;? extends T&gt;" jni-type="Ljava/util/Iterator&lt;+TT;&gt;;"></parameter>
        <parameter name="generator" type="com.annimon.stream.function.IntFunction&lt;R[]&gt;" jni-type="Lcom/annimon/stream/function/IntFunction&lt;[TR;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="toDoubleArray" jni-signature="(Lcom/annimon/stream/iterator/PrimitiveIterator$OfDouble;)[D" bridge="false" native="false" return="double[]" jni-return="[D" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="iterator" type="com.annimon.stream.iterator.PrimitiveIterator.OfDouble" jni-type="Lcom/annimon/stream/iterator/PrimitiveIterator$OfDouble;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="toIntArray" jni-signature="(Lcom/annimon/stream/iterator/PrimitiveIterator$OfInt;)[I" bridge="false" native="false" return="int[]" jni-return="[I" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="iterator" type="com.annimon.stream.iterator.PrimitiveIterator.OfInt" jni-type="Lcom/annimon/stream/iterator/PrimitiveIterator$OfInt;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="toList" jni-signature="(Ljava/util/Iterator;)Ljava/util/List;" bridge="false" native="false" return="java.util.List&lt;T&gt;" jni-return="Ljava/util/List&lt;TT;&gt;;" static="true" synchronized="false" synthetic="false" visibility="public">
        <typeParameters>
          <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        </typeParameters>
        <parameter name="iterator" type="java.util.Iterator&lt;? extends T&gt;" jni-type="Ljava/util/Iterator&lt;+TT;&gt;;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="toLongArray" jni-signature="(Lcom/annimon/stream/iterator/PrimitiveIterator$OfLong;)[J" bridge="false" native="false" return="long[]" jni-return="[J" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="iterator" type="com.annimon.stream.iterator.PrimitiveIterator.OfLong" jni-type="Lcom/annimon/stream/iterator/PrimitiveIterator$OfLong;"></parameter>
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="true" name="Params" static="false" visibility="public" jni-signature="Lcom/annimon/stream/internal/Params;">
      <constructor deprecated="not deprecated" final="false" name="Params" jni-signature="()V" bridge="false" static="false" type="com.annimon.stream.internal.Params" synthetic="false" visibility="public"></constructor>
      <field deprecated="not deprecated" final="false" name="closeHandler" jni-signature="Ljava/lang/Runnable;" static="false" transient="false" type="java.lang.Runnable" type-generic-aware="java.lang.Runnable" visibility="public" volatile="false"></field>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="true" name="SpinedBuffer" static="false" visibility="" jni-signature="Lcom/annimon/stream/internal/SpinedBuffer;"></class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.internal.SpinedBuffer.OfPrimitive" extends-generic-aware="com.annimon.stream.internal.SpinedBuffer.OfPrimitive&lt;java.lang.Double, double[], com.annimon.stream.function.DoubleConsumer&gt;" jni-extends="Lcom/annimon/stream/internal/SpinedBuffer$OfPrimitive;" final="false" name="SpinedBuffer.OfDouble" static="true" visibility="" jni-signature="Lcom/annimon/stream/internal/SpinedBuffer$OfDouble;">
      <implements name="com.annimon.stream.function.DoubleConsumer" name-generic-aware="com.annimon.stream.function.DoubleConsumer" jni-type="Lcom/annimon/stream/function/DoubleConsumer;"></implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="accept" jni-signature="(D)V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="i" type="double" jni-type="D"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="arrayLength" jni-signature="([D)I" bridge="false" native="false" return="int" jni-return="I" static="false" synchronized="false" synthetic="false" visibility="protected">
        <parameter name="array" type="double[]" jni-type="[D"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="get" jni-signature="(J)D" bridge="false" native="false" return="double" jni-return="D" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="index" type="long" jni-type="J"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="iterator" jni-signature="()Lcom/annimon/stream/iterator/PrimitiveIterator$OfDouble;" bridge="false" native="false" return="com.annimon.stream.iterator.PrimitiveIterator.OfDouble" jni-return="Lcom/annimon/stream/iterator/PrimitiveIterator$OfDouble;" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="iterator" jni-signature="()Ljava/util/Iterator;" bridge="true" native="false" return="java.util.Iterator" jni-return="Ljava/util/Iterator;" static="false" synchronized="false" synthetic="true" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="newArray" jni-signature="(I)[D" bridge="false" native="false" return="double[]" jni-return="[D" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="size" type="int" jni-type="I"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="newArray" jni-signature="(I)Ljava/lang/Object;" bridge="true" native="false" return="java.lang.Object" jni-return="Ljava/lang/Object;" static="false" synchronized="false" synthetic="true" visibility="public">
        <parameter name="p0" type="int" jni-type="I"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="newArrayArray" jni-signature="(I)[[D" bridge="false" native="false" return="double[][]" jni-return="[[D" static="false" synchronized="false" synthetic="false" visibility="protected">
        <parameter name="size" type="int" jni-type="I"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="newArrayArray" jni-signature="(I)[Ljava/lang/Object;" bridge="true" native="false" return="java.lang.Object[]" jni-return="[Ljava/lang/Object;" static="false" synchronized="false" synthetic="true" visibility="protected">
        <parameter name="p0" type="int" jni-type="I"></parameter>
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.PrimitiveIterator.OfDouble" extends-generic-aware="com.annimon.stream.iterator.PrimitiveIterator.OfDouble" jni-extends="Lcom/annimon/stream/iterator/PrimitiveIterator$OfDouble;" final="false" name="SpinedBuffer.OfDouble.1" static="false" visibility="" jni-signature="Lcom/annimon/stream/internal/SpinedBuffer$OfDouble$1;">
      <method abstract="false" deprecated="not deprecated" final="false" name="hasNext" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextDouble" jni-signature="()D" bridge="false" native="false" return="double" jni-return="D" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.internal.SpinedBuffer.OfPrimitive" extends-generic-aware="com.annimon.stream.internal.SpinedBuffer.OfPrimitive&lt;java.lang.Integer, int[], com.annimon.stream.function.IntConsumer&gt;" jni-extends="Lcom/annimon/stream/internal/SpinedBuffer$OfPrimitive;" final="false" name="SpinedBuffer.OfInt" static="true" visibility="" jni-signature="Lcom/annimon/stream/internal/SpinedBuffer$OfInt;">
      <implements name="com.annimon.stream.function.IntConsumer" name-generic-aware="com.annimon.stream.function.IntConsumer" jni-type="Lcom/annimon/stream/function/IntConsumer;"></implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="accept" jni-signature="(I)V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="i" type="int" jni-type="I"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="arrayLength" jni-signature="([I)I" bridge="false" native="false" return="int" jni-return="I" static="false" synchronized="false" synthetic="false" visibility="protected">
        <parameter name="array" type="int[]" jni-type="[I"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="get" jni-signature="(J)I" bridge="false" native="false" return="int" jni-return="I" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="index" type="long" jni-type="J"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="iterator" jni-signature="()Lcom/annimon/stream/iterator/PrimitiveIterator$OfInt;" bridge="false" native="false" return="com.annimon.stream.iterator.PrimitiveIterator.OfInt" jni-return="Lcom/annimon/stream/iterator/PrimitiveIterator$OfInt;" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="iterator" jni-signature="()Ljava/util/Iterator;" bridge="true" native="false" return="java.util.Iterator" jni-return="Ljava/util/Iterator;" static="false" synchronized="false" synthetic="true" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="newArray" jni-signature="(I)[I" bridge="false" native="false" return="int[]" jni-return="[I" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="size" type="int" jni-type="I"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="newArray" jni-signature="(I)Ljava/lang/Object;" bridge="true" native="false" return="java.lang.Object" jni-return="Ljava/lang/Object;" static="false" synchronized="false" synthetic="true" visibility="public">
        <parameter name="p0" type="int" jni-type="I"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="newArrayArray" jni-signature="(I)[[I" bridge="false" native="false" return="int[][]" jni-return="[[I" static="false" synchronized="false" synthetic="false" visibility="protected">
        <parameter name="size" type="int" jni-type="I"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="newArrayArray" jni-signature="(I)[Ljava/lang/Object;" bridge="true" native="false" return="java.lang.Object[]" jni-return="[Ljava/lang/Object;" static="false" synchronized="false" synthetic="true" visibility="protected">
        <parameter name="p0" type="int" jni-type="I"></parameter>
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.PrimitiveIterator.OfInt" extends-generic-aware="com.annimon.stream.iterator.PrimitiveIterator.OfInt" jni-extends="Lcom/annimon/stream/iterator/PrimitiveIterator$OfInt;" final="false" name="SpinedBuffer.OfInt.1" static="false" visibility="" jni-signature="Lcom/annimon/stream/internal/SpinedBuffer$OfInt$1;">
      <method abstract="false" deprecated="not deprecated" final="false" name="hasNext" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextInt" jni-signature="()I" bridge="false" native="false" return="int" jni-return="I" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.internal.SpinedBuffer.OfPrimitive" extends-generic-aware="com.annimon.stream.internal.SpinedBuffer.OfPrimitive&lt;java.lang.Long, long[], com.annimon.stream.function.LongConsumer&gt;" jni-extends="Lcom/annimon/stream/internal/SpinedBuffer$OfPrimitive;" final="false" name="SpinedBuffer.OfLong" static="true" visibility="" jni-signature="Lcom/annimon/stream/internal/SpinedBuffer$OfLong;">
      <implements name="com.annimon.stream.function.LongConsumer" name-generic-aware="com.annimon.stream.function.LongConsumer" jni-type="Lcom/annimon/stream/function/LongConsumer;"></implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="accept" jni-signature="(J)V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="i" type="long" jni-type="J"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="arrayLength" jni-signature="([J)I" bridge="false" native="false" return="int" jni-return="I" static="false" synchronized="false" synthetic="false" visibility="protected">
        <parameter name="array" type="long[]" jni-type="[J"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="get" jni-signature="(J)J" bridge="false" native="false" return="long" jni-return="J" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="index" type="long" jni-type="J"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="iterator" jni-signature="()Lcom/annimon/stream/iterator/PrimitiveIterator$OfLong;" bridge="false" native="false" return="com.annimon.stream.iterator.PrimitiveIterator.OfLong" jni-return="Lcom/annimon/stream/iterator/PrimitiveIterator$OfLong;" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="iterator" jni-signature="()Ljava/util/Iterator;" bridge="true" native="false" return="java.util.Iterator" jni-return="Ljava/util/Iterator;" static="false" synchronized="false" synthetic="true" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="newArray" jni-signature="(I)[J" bridge="false" native="false" return="long[]" jni-return="[J" static="false" synchronized="false" synthetic="false" visibility="public">
        <parameter name="size" type="int" jni-type="I"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="newArray" jni-signature="(I)Ljava/lang/Object;" bridge="true" native="false" return="java.lang.Object" jni-return="Ljava/lang/Object;" static="false" synchronized="false" synthetic="true" visibility="public">
        <parameter name="p0" type="int" jni-type="I"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="newArrayArray" jni-signature="(I)[[J" bridge="false" native="false" return="long[][]" jni-return="[[J" static="false" synchronized="false" synthetic="false" visibility="protected">
        <parameter name="size" type="int" jni-type="I"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="newArrayArray" jni-signature="(I)[Ljava/lang/Object;" bridge="true" native="false" return="java.lang.Object[]" jni-return="[Ljava/lang/Object;" static="false" synchronized="false" synthetic="true" visibility="protected">
        <parameter name="p0" type="int" jni-type="I"></parameter>
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.PrimitiveIterator.OfLong" extends-generic-aware="com.annimon.stream.iterator.PrimitiveIterator.OfLong" jni-extends="Lcom/annimon/stream/iterator/PrimitiveIterator$OfLong;" final="false" name="SpinedBuffer.OfLong.1" static="false" visibility="" jni-signature="Lcom/annimon/stream/internal/SpinedBuffer$OfLong$1;">
      <method abstract="false" deprecated="not deprecated" final="false" name="hasNext" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextLong" jni-signature="()J" bridge="false" native="false" return="long" jni-return="J" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="true" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="false" name="SpinedBuffer.OfPrimitive" static="true" visibility="" jni-signature="Lcom/annimon/stream/internal/SpinedBuffer$OfPrimitive;">
      <implements name="java.lang.Iterable" name-generic-aware="java.lang.Iterable&lt;E&gt;" jni-type="Ljava/lang/Iterable&lt;TE;&gt;;"></implements>
      <typeParameters>
        <typeParameter name="E" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        <typeParameter name="T_ARR" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        <typeParameter name="T_CONS" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
      </typeParameters>
      <method abstract="true" deprecated="not deprecated" final="false" name="arrayLength" jni-signature="(Ljava/lang/Object;)I" bridge="false" native="false" return="int" jni-return="I" static="false" synchronized="false" synthetic="false" visibility="protected">
        <parameter name="p0" type="T_ARR" jni-type="TT_ARR;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="asPrimitiveArray" jni-signature="()Ljava/lang/Object;" bridge="false" native="false" return="T_ARR" jni-return="TT_ARR;" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="clear" jni-signature="()V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="count" jni-signature="()J" bridge="false" native="false" return="long" jni-return="J" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="isEmpty" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="true" deprecated="not deprecated" final="false" name="iterator" jni-signature="()Ljava/util/Iterator;" bridge="false" native="false" return="java.util.Iterator&lt;E&gt;" jni-return="Ljava/util/Iterator&lt;TE;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="true" deprecated="not deprecated" final="false" name="newArray" jni-signature="(I)Ljava/lang/Object;" bridge="false" native="false" return="T_ARR" jni-return="TT_ARR;" static="false" synchronized="false" synthetic="false" visibility="protected">
        <parameter name="p0" type="int" jni-type="I"></parameter>
      </method>
      <method abstract="true" deprecated="not deprecated" final="false" name="newArrayArray" jni-signature="(I)[Ljava/lang/Object;" bridge="false" native="false" return="T_ARR[]" jni-return="[TT_ARR;" static="false" synchronized="false" synthetic="false" visibility="protected">
        <parameter name="p0" type="int" jni-type="I"></parameter>
      </method>
    </class>
  </package>
  <package name="com.annimon.stream.iterator" jni-name="com/annimon/stream/iterator">
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="false" name="IndexedIterator" static="false" visibility="public" jni-signature="Lcom/annimon/stream/iterator/IndexedIterator;">
      <implements name="java.util.Iterator" name-generic-aware="java.util.Iterator&lt;T&gt;" jni-type="Ljava/util/Iterator&lt;TT;&gt;;"></implements>
      <typeParameters>
        <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
      </typeParameters>
      <constructor deprecated="not deprecated" final="false" name="IndexedIterator" jni-signature="(IILjava/util/Iterator;)V" bridge="false" static="false" type="com.annimon.stream.iterator.IndexedIterator" synthetic="false" visibility="public">
        <parameter name="start" type="int" jni-type="I"></parameter>
        <parameter name="step" type="int" jni-type="I"></parameter>
        <parameter name="iterator" type="java.util.Iterator&lt;? extends T&gt;" jni-type="Ljava/util/Iterator&lt;+TT;&gt;;"></parameter>
      </constructor>
      <constructor deprecated="not deprecated" final="false" name="IndexedIterator" jni-signature="(Ljava/util/Iterator;)V" bridge="false" static="false" type="com.annimon.stream.iterator.IndexedIterator" synthetic="false" visibility="public">
        <parameter name="iterator" type="java.util.Iterator&lt;? extends T&gt;" jni-type="Ljava/util/Iterator&lt;+TT;&gt;;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="getIndex" jni-signature="()I" bridge="false" native="false" return="int" jni-return="I" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="hasNext" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="next" jni-signature="()Ljava/lang/Object;" bridge="false" native="false" return="T" jni-return="TT;" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="remove" jni-signature="()V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="false" name="LazyIterator" static="false" visibility="public" jni-signature="Lcom/annimon/stream/iterator/LazyIterator;">
      <implements name="java.util.Iterator" name-generic-aware="java.util.Iterator&lt;T&gt;" jni-type="Ljava/util/Iterator&lt;TT;&gt;;"></implements>
      <typeParameters>
        <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
      </typeParameters>
      <constructor deprecated="not deprecated" final="false" name="LazyIterator" jni-signature="(Ljava/lang/Iterable;)V" bridge="false" static="false" type="com.annimon.stream.iterator.LazyIterator" synthetic="false" visibility="public">
        <parameter name="iterable" type="java.lang.Iterable&lt;? extends T&gt;" jni-type="Ljava/lang/Iterable&lt;+TT;&gt;;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="hasNext" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="next" jni-signature="()Ljava/lang/Object;" bridge="false" native="false" return="T" jni-return="TT;" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="remove" jni-signature="()V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="true" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="false" name="LsaExtIterator" static="false" visibility="public" jni-signature="Lcom/annimon/stream/iterator/LsaExtIterator;">
      <implements name="java.util.Iterator" name-generic-aware="java.util.Iterator&lt;T&gt;" jni-type="Ljava/util/Iterator&lt;TT;&gt;;"></implements>
      <typeParameters>
        <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
      </typeParameters>
      <constructor deprecated="not deprecated" final="false" name="LsaExtIterator" jni-signature="()V" bridge="false" static="false" type="com.annimon.stream.iterator.LsaExtIterator" synthetic="false" visibility="public"></constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="hasNext" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="next" jni-signature="()Ljava/lang/Object;" bridge="false" native="false" return="T" jni-return="TT;" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="true" deprecated="not deprecated" final="false" name="nextIteration" jni-signature="()V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="protected"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="remove" jni-signature="()V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <field deprecated="not deprecated" final="false" name="hasNext" jni-signature="Z" static="false" transient="false" type="boolean" type-generic-aware="boolean" visibility="protected" volatile="false"></field>
      <field deprecated="not deprecated" final="false" name="isInit" jni-signature="Z" static="false" transient="false" type="boolean" type-generic-aware="boolean" visibility="protected" volatile="false"></field>
      <field deprecated="not deprecated" final="false" name="next" jni-signature="Ljava/lang/Object;" static="false" transient="false" type="java.lang.Object" type-generic-aware="T" visibility="protected" volatile="false"></field>
    </class>
    <class abstract="true" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="false" name="LsaIterator" static="false" visibility="public" jni-signature="Lcom/annimon/stream/iterator/LsaIterator;">
      <implements name="java.util.Iterator" name-generic-aware="java.util.Iterator&lt;T&gt;" jni-type="Ljava/util/Iterator&lt;TT;&gt;;"></implements>
      <typeParameters>
        <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
      </typeParameters>
      <constructor deprecated="not deprecated" final="false" name="LsaIterator" jni-signature="()V" bridge="false" static="false" type="com.annimon.stream.iterator.LsaIterator" synthetic="false" visibility="public"></constructor>
      <method abstract="false" deprecated="not deprecated" final="true" name="next" jni-signature="()Ljava/lang/Object;" bridge="false" native="false" return="T" jni-return="TT;" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="true" deprecated="not deprecated" final="false" name="nextIteration" jni-signature="()Ljava/lang/Object;" bridge="false" native="false" return="T" jni-return="TT;" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="remove" jni-signature="()V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="true" name="PrimitiveExtIterator" static="false" visibility="public" jni-signature="Lcom/annimon/stream/iterator/PrimitiveExtIterator;"></class>
    <class abstract="true" deprecated="not deprecated" extends="com.annimon.stream.iterator.PrimitiveIterator.OfDouble" extends-generic-aware="com.annimon.stream.iterator.PrimitiveIterator.OfDouble" jni-extends="Lcom/annimon/stream/iterator/PrimitiveIterator$OfDouble;" final="false" name="PrimitiveExtIterator.OfDouble" static="true" visibility="public" jni-signature="Lcom/annimon/stream/iterator/PrimitiveExtIterator$OfDouble;">
      <constructor deprecated="not deprecated" final="false" name="PrimitiveExtIterator.OfDouble" jni-signature="()V" bridge="false" static="false" type="com.annimon.stream.iterator.PrimitiveExtIterator.OfDouble" synthetic="false" visibility="public"></constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="hasNext" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextDouble" jni-signature="()D" bridge="false" native="false" return="double" jni-return="D" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="true" deprecated="not deprecated" final="false" name="nextIteration" jni-signature="()V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="protected"></method>
      <field deprecated="not deprecated" final="false" name="hasNext" jni-signature="Z" static="false" transient="false" type="boolean" type-generic-aware="boolean" visibility="protected" volatile="false"></field>
      <field deprecated="not deprecated" final="false" name="isInit" jni-signature="Z" static="false" transient="false" type="boolean" type-generic-aware="boolean" visibility="protected" volatile="false"></field>
      <field deprecated="not deprecated" final="false" name="next" jni-signature="D" static="false" transient="false" type="double" type-generic-aware="double" visibility="protected" volatile="false"></field>
    </class>
    <class abstract="true" deprecated="not deprecated" extends="com.annimon.stream.iterator.PrimitiveIterator.OfInt" extends-generic-aware="com.annimon.stream.iterator.PrimitiveIterator.OfInt" jni-extends="Lcom/annimon/stream/iterator/PrimitiveIterator$OfInt;" final="false" name="PrimitiveExtIterator.OfInt" static="true" visibility="public" jni-signature="Lcom/annimon/stream/iterator/PrimitiveExtIterator$OfInt;">
      <constructor deprecated="not deprecated" final="false" name="PrimitiveExtIterator.OfInt" jni-signature="()V" bridge="false" static="false" type="com.annimon.stream.iterator.PrimitiveExtIterator.OfInt" synthetic="false" visibility="public"></constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="hasNext" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextInt" jni-signature="()I" bridge="false" native="false" return="int" jni-return="I" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="true" deprecated="not deprecated" final="false" name="nextIteration" jni-signature="()V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="protected"></method>
      <field deprecated="not deprecated" final="false" name="hasNext" jni-signature="Z" static="false" transient="false" type="boolean" type-generic-aware="boolean" visibility="protected" volatile="false"></field>
      <field deprecated="not deprecated" final="false" name="isInit" jni-signature="Z" static="false" transient="false" type="boolean" type-generic-aware="boolean" visibility="protected" volatile="false"></field>
      <field deprecated="not deprecated" final="false" name="next" jni-signature="I" static="false" transient="false" type="int" type-generic-aware="int" visibility="protected" volatile="false"></field>
    </class>
    <class abstract="true" deprecated="not deprecated" extends="com.annimon.stream.iterator.PrimitiveIterator.OfLong" extends-generic-aware="com.annimon.stream.iterator.PrimitiveIterator.OfLong" jni-extends="Lcom/annimon/stream/iterator/PrimitiveIterator$OfLong;" final="false" name="PrimitiveExtIterator.OfLong" static="true" visibility="public" jni-signature="Lcom/annimon/stream/iterator/PrimitiveExtIterator$OfLong;">
      <constructor deprecated="not deprecated" final="false" name="PrimitiveExtIterator.OfLong" jni-signature="()V" bridge="false" static="false" type="com.annimon.stream.iterator.PrimitiveExtIterator.OfLong" synthetic="false" visibility="public"></constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="hasNext" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="true" deprecated="not deprecated" final="false" name="nextIteration" jni-signature="()V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="protected"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextLong" jni-signature="()J" bridge="false" native="false" return="long" jni-return="J" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <field deprecated="not deprecated" final="false" name="hasNext" jni-signature="Z" static="false" transient="false" type="boolean" type-generic-aware="boolean" visibility="protected" volatile="false"></field>
      <field deprecated="not deprecated" final="false" name="isInit" jni-signature="Z" static="false" transient="false" type="boolean" type-generic-aware="boolean" visibility="protected" volatile="false"></field>
      <field deprecated="not deprecated" final="false" name="next" jni-signature="J" static="false" transient="false" type="long" type-generic-aware="long" visibility="protected" volatile="false"></field>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="true" name="PrimitiveIndexedIterator" static="false" visibility="public" jni-signature="Lcom/annimon/stream/iterator/PrimitiveIndexedIterator;"></class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.PrimitiveIterator.OfDouble" extends-generic-aware="com.annimon.stream.iterator.PrimitiveIterator.OfDouble" jni-extends="Lcom/annimon/stream/iterator/PrimitiveIterator$OfDouble;" final="false" name="PrimitiveIndexedIterator.OfDouble" static="true" visibility="public" jni-signature="Lcom/annimon/stream/iterator/PrimitiveIndexedIterator$OfDouble;">
      <constructor deprecated="not deprecated" final="false" name="PrimitiveIndexedIterator.OfDouble" jni-signature="(Lcom/annimon/stream/iterator/PrimitiveIterator$OfDouble;)V" bridge="false" static="false" type="com.annimon.stream.iterator.PrimitiveIndexedIterator.OfDouble" synthetic="false" visibility="public">
        <parameter name="iterator" type="com.annimon.stream.iterator.PrimitiveIterator.OfDouble" jni-type="Lcom/annimon/stream/iterator/PrimitiveIterator$OfDouble;"></parameter>
      </constructor>
      <constructor deprecated="not deprecated" final="false" name="PrimitiveIndexedIterator.OfDouble" jni-signature="(IILcom/annimon/stream/iterator/PrimitiveIterator$OfDouble;)V" bridge="false" static="false" type="com.annimon.stream.iterator.PrimitiveIndexedIterator.OfDouble" synthetic="false" visibility="public">
        <parameter name="start" type="int" jni-type="I"></parameter>
        <parameter name="step" type="int" jni-type="I"></parameter>
        <parameter name="iterator" type="com.annimon.stream.iterator.PrimitiveIterator.OfDouble" jni-type="Lcom/annimon/stream/iterator/PrimitiveIterator$OfDouble;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="getIndex" jni-signature="()I" bridge="false" native="false" return="int" jni-return="I" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="hasNext" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextDouble" jni-signature="()D" bridge="false" native="false" return="double" jni-return="D" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.PrimitiveIterator.OfInt" extends-generic-aware="com.annimon.stream.iterator.PrimitiveIterator.OfInt" jni-extends="Lcom/annimon/stream/iterator/PrimitiveIterator$OfInt;" final="false" name="PrimitiveIndexedIterator.OfInt" static="true" visibility="public" jni-signature="Lcom/annimon/stream/iterator/PrimitiveIndexedIterator$OfInt;">
      <constructor deprecated="not deprecated" final="false" name="PrimitiveIndexedIterator.OfInt" jni-signature="(Lcom/annimon/stream/iterator/PrimitiveIterator$OfInt;)V" bridge="false" static="false" type="com.annimon.stream.iterator.PrimitiveIndexedIterator.OfInt" synthetic="false" visibility="public">
        <parameter name="iterator" type="com.annimon.stream.iterator.PrimitiveIterator.OfInt" jni-type="Lcom/annimon/stream/iterator/PrimitiveIterator$OfInt;"></parameter>
      </constructor>
      <constructor deprecated="not deprecated" final="false" name="PrimitiveIndexedIterator.OfInt" jni-signature="(IILcom/annimon/stream/iterator/PrimitiveIterator$OfInt;)V" bridge="false" static="false" type="com.annimon.stream.iterator.PrimitiveIndexedIterator.OfInt" synthetic="false" visibility="public">
        <parameter name="start" type="int" jni-type="I"></parameter>
        <parameter name="step" type="int" jni-type="I"></parameter>
        <parameter name="iterator" type="com.annimon.stream.iterator.PrimitiveIterator.OfInt" jni-type="Lcom/annimon/stream/iterator/PrimitiveIterator$OfInt;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="getIndex" jni-signature="()I" bridge="false" native="false" return="int" jni-return="I" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="hasNext" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextInt" jni-signature="()I" bridge="false" native="false" return="int" jni-return="I" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.PrimitiveIterator.OfLong" extends-generic-aware="com.annimon.stream.iterator.PrimitiveIterator.OfLong" jni-extends="Lcom/annimon/stream/iterator/PrimitiveIterator$OfLong;" final="false" name="PrimitiveIndexedIterator.OfLong" static="true" visibility="public" jni-signature="Lcom/annimon/stream/iterator/PrimitiveIndexedIterator$OfLong;">
      <constructor deprecated="not deprecated" final="false" name="PrimitiveIndexedIterator.OfLong" jni-signature="(Lcom/annimon/stream/iterator/PrimitiveIterator$OfLong;)V" bridge="false" static="false" type="com.annimon.stream.iterator.PrimitiveIndexedIterator.OfLong" synthetic="false" visibility="public">
        <parameter name="iterator" type="com.annimon.stream.iterator.PrimitiveIterator.OfLong" jni-type="Lcom/annimon/stream/iterator/PrimitiveIterator$OfLong;"></parameter>
      </constructor>
      <constructor deprecated="not deprecated" final="false" name="PrimitiveIndexedIterator.OfLong" jni-signature="(IILcom/annimon/stream/iterator/PrimitiveIterator$OfLong;)V" bridge="false" static="false" type="com.annimon.stream.iterator.PrimitiveIndexedIterator.OfLong" synthetic="false" visibility="public">
        <parameter name="start" type="int" jni-type="I"></parameter>
        <parameter name="step" type="int" jni-type="I"></parameter>
        <parameter name="iterator" type="com.annimon.stream.iterator.PrimitiveIterator.OfLong" jni-type="Lcom/annimon/stream/iterator/PrimitiveIterator$OfLong;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="getIndex" jni-signature="()I" bridge="false" native="false" return="int" jni-return="I" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="hasNext" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextLong" jni-signature="()J" bridge="false" native="false" return="long" jni-return="J" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="true" name="PrimitiveIterator" static="false" visibility="public" jni-signature="Lcom/annimon/stream/iterator/PrimitiveIterator;"></class>
    <class abstract="true" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="false" name="PrimitiveIterator.OfDouble" static="true" visibility="public" jni-signature="Lcom/annimon/stream/iterator/PrimitiveIterator$OfDouble;">
      <implements name="java.util.Iterator" name-generic-aware="java.util.Iterator&lt;java.lang.Double&gt;" jni-type="Ljava/util/Iterator&lt;Ljava/lang/Double;&gt;;"></implements>
      <constructor deprecated="not deprecated" final="false" name="PrimitiveIterator.OfDouble" jni-signature="()V" bridge="false" static="false" type="com.annimon.stream.iterator.PrimitiveIterator.OfDouble" synthetic="false" visibility="public"></constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="next" jni-signature="()Ljava/lang/Double;" bridge="false" native="false" return="java.lang.Double" jni-return="Ljava/lang/Double;" static="false" synchronized="false" synthetic="false" visibility="public" managedReturn="Java.Lang.Object"></method>
      <method abstract="true" deprecated="not deprecated" final="false" name="nextDouble" jni-signature="()D" bridge="false" native="false" return="double" jni-return="D" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="remove" jni-signature="()V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="true" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="false" name="PrimitiveIterator.OfInt" static="true" visibility="public" jni-signature="Lcom/annimon/stream/iterator/PrimitiveIterator$OfInt;">
      <implements name="java.util.Iterator" name-generic-aware="java.util.Iterator&lt;java.lang.Integer&gt;" jni-type="Ljava/util/Iterator&lt;Ljava/lang/Integer;&gt;;"></implements>
      <constructor deprecated="not deprecated" final="false" name="PrimitiveIterator.OfInt" jni-signature="()V" bridge="false" static="false" type="com.annimon.stream.iterator.PrimitiveIterator.OfInt" synthetic="false" visibility="public"></constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="next" jni-signature="()Ljava/lang/Integer;" bridge="false" native="false" return="java.lang.Integer" jni-return="Ljava/lang/Integer;" static="false" synchronized="false" synthetic="false" visibility="public" managedReturn="Java.Lang.Object"></method>
      <method abstract="true" deprecated="not deprecated" final="false" name="nextInt" jni-signature="()I" bridge="false" native="false" return="int" jni-return="I" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="remove" jni-signature="()V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="true" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="false" name="PrimitiveIterator.OfLong" static="true" visibility="public" jni-signature="Lcom/annimon/stream/iterator/PrimitiveIterator$OfLong;">
      <implements name="java.util.Iterator" name-generic-aware="java.util.Iterator&lt;java.lang.Long&gt;" jni-type="Ljava/util/Iterator&lt;Ljava/lang/Long;&gt;;"></implements>
      <constructor deprecated="not deprecated" final="false" name="PrimitiveIterator.OfLong" jni-signature="()V" bridge="false" static="false" type="com.annimon.stream.iterator.PrimitiveIterator.OfLong" synthetic="false" visibility="public"></constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="next" jni-signature="()Ljava/lang/Long;" bridge="false" native="false" return="java.lang.Long" jni-return="Ljava/lang/Long;" static="false" synchronized="false" synthetic="false" visibility="public" managedReturn="Java.Lang.Object"></method>
      <method abstract="true" deprecated="not deprecated" final="false" name="nextLong" jni-signature="()J" bridge="false" native="false" return="long" jni-return="J" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="remove" jni-signature="()V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
  </package>
  <package name="com.annimon.stream.operator" jni-name="com/annimon/stream/operator">
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.PrimitiveIterator.OfDouble" extends-generic-aware="com.annimon.stream.iterator.PrimitiveIterator.OfDouble" jni-extends="Lcom/annimon/stream/iterator/PrimitiveIterator$OfDouble;" final="false" name="DoubleArray" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/DoubleArray;">
      <constructor deprecated="not deprecated" final="false" name="DoubleArray" jni-signature="([D)V" bridge="false" static="false" type="com.annimon.stream.operator.DoubleArray" synthetic="false" visibility="public">
        <parameter name="values" type="double[]" jni-type="[D"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="hasNext" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextDouble" jni-signature="()D" bridge="false" native="false" return="double" jni-return="D" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.PrimitiveIterator.OfDouble" extends-generic-aware="com.annimon.stream.iterator.PrimitiveIterator.OfDouble" jni-extends="Lcom/annimon/stream/iterator/PrimitiveIterator$OfDouble;" final="false" name="DoubleConcat" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/DoubleConcat;">
      <constructor deprecated="not deprecated" final="false" name="DoubleConcat" jni-signature="(Lcom/annimon/stream/iterator/PrimitiveIterator$OfDouble;Lcom/annimon/stream/iterator/PrimitiveIterator$OfDouble;)V" bridge="false" static="false" type="com.annimon.stream.operator.DoubleConcat" synthetic="false" visibility="public">
        <parameter name="iterator1" type="com.annimon.stream.iterator.PrimitiveIterator.OfDouble" jni-type="Lcom/annimon/stream/iterator/PrimitiveIterator$OfDouble;"></parameter>
        <parameter name="iterator2" type="com.annimon.stream.iterator.PrimitiveIterator.OfDouble" jni-type="Lcom/annimon/stream/iterator/PrimitiveIterator$OfDouble;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="hasNext" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextDouble" jni-signature="()D" bridge="false" native="false" return="double" jni-return="D" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.PrimitiveExtIterator.OfDouble" extends-generic-aware="com.annimon.stream.iterator.PrimitiveExtIterator.OfDouble" jni-extends="Lcom/annimon/stream/iterator/PrimitiveExtIterator$OfDouble;" final="false" name="DoubleDropWhile" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/DoubleDropWhile;">
      <constructor deprecated="not deprecated" final="false" name="DoubleDropWhile" jni-signature="(Lcom/annimon/stream/iterator/PrimitiveIterator$OfDouble;Lcom/annimon/stream/function/DoublePredicate;)V" bridge="false" static="false" type="com.annimon.stream.operator.DoubleDropWhile" synthetic="false" visibility="public">
        <parameter name="iterator" type="com.annimon.stream.iterator.PrimitiveIterator.OfDouble" jni-type="Lcom/annimon/stream/iterator/PrimitiveIterator$OfDouble;"></parameter>
        <parameter name="predicate" type="com.annimon.stream.function.DoublePredicate" jni-type="Lcom/annimon/stream/function/DoublePredicate;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextIteration" jni-signature="()V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="protected"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.PrimitiveIterator.OfDouble" extends-generic-aware="com.annimon.stream.iterator.PrimitiveIterator.OfDouble" jni-extends="Lcom/annimon/stream/iterator/PrimitiveIterator$OfDouble;" final="false" name="DoubleFilter" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/DoubleFilter;">
      <constructor deprecated="not deprecated" final="false" name="DoubleFilter" jni-signature="(Lcom/annimon/stream/iterator/PrimitiveIterator$OfDouble;Lcom/annimon/stream/function/DoublePredicate;)V" bridge="false" static="false" type="com.annimon.stream.operator.DoubleFilter" synthetic="false" visibility="public">
        <parameter name="iterator" type="com.annimon.stream.iterator.PrimitiveIterator.OfDouble" jni-type="Lcom/annimon/stream/iterator/PrimitiveIterator$OfDouble;"></parameter>
        <parameter name="predicate" type="com.annimon.stream.function.DoublePredicate" jni-type="Lcom/annimon/stream/function/DoublePredicate;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="hasNext" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextDouble" jni-signature="()D" bridge="false" native="false" return="double" jni-return="D" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.PrimitiveIterator.OfDouble" extends-generic-aware="com.annimon.stream.iterator.PrimitiveIterator.OfDouble" jni-extends="Lcom/annimon/stream/iterator/PrimitiveIterator$OfDouble;" final="false" name="DoubleFilterIndexed" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/DoubleFilterIndexed;">
      <constructor deprecated="not deprecated" final="false" name="DoubleFilterIndexed" jni-signature="(Lcom/annimon/stream/iterator/PrimitiveIndexedIterator$OfDouble;Lcom/annimon/stream/function/IndexedDoublePredicate;)V" bridge="false" static="false" type="com.annimon.stream.operator.DoubleFilterIndexed" synthetic="false" visibility="public">
        <parameter name="iterator" type="com.annimon.stream.iterator.PrimitiveIndexedIterator.OfDouble" jni-type="Lcom/annimon/stream/iterator/PrimitiveIndexedIterator$OfDouble;"></parameter>
        <parameter name="predicate" type="com.annimon.stream.function.IndexedDoublePredicate" jni-type="Lcom/annimon/stream/function/IndexedDoublePredicate;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="hasNext" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextDouble" jni-signature="()D" bridge="false" native="false" return="double" jni-return="D" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.PrimitiveIterator.OfDouble" extends-generic-aware="com.annimon.stream.iterator.PrimitiveIterator.OfDouble" jni-extends="Lcom/annimon/stream/iterator/PrimitiveIterator$OfDouble;" final="false" name="DoubleFlatMap" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/DoubleFlatMap;">
      <constructor deprecated="not deprecated" final="false" name="DoubleFlatMap" jni-signature="(Lcom/annimon/stream/iterator/PrimitiveIterator$OfDouble;Lcom/annimon/stream/function/DoubleFunction;)V" bridge="false" static="false" type="com.annimon.stream.operator.DoubleFlatMap" synthetic="false" visibility="public">
        <parameter name="iterator" type="com.annimon.stream.iterator.PrimitiveIterator.OfDouble" jni-type="Lcom/annimon/stream/iterator/PrimitiveIterator$OfDouble;"></parameter>
        <parameter name="mapper" type="com.annimon.stream.function.DoubleFunction&lt;? extends com.annimon.stream.DoubleStream&gt;" jni-type="Lcom/annimon/stream/function/DoubleFunction&lt;+Lcom/annimon/stream/DoubleStream;&gt;;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="hasNext" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextDouble" jni-signature="()D" bridge="false" native="false" return="double" jni-return="D" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.PrimitiveIterator.OfDouble" extends-generic-aware="com.annimon.stream.iterator.PrimitiveIterator.OfDouble" jni-extends="Lcom/annimon/stream/iterator/PrimitiveIterator$OfDouble;" final="false" name="DoubleGenerate" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/DoubleGenerate;">
      <constructor deprecated="not deprecated" final="false" name="DoubleGenerate" jni-signature="(Lcom/annimon/stream/function/DoubleSupplier;)V" bridge="false" static="false" type="com.annimon.stream.operator.DoubleGenerate" synthetic="false" visibility="public">
        <parameter name="supplier" type="com.annimon.stream.function.DoubleSupplier" jni-type="Lcom/annimon/stream/function/DoubleSupplier;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="hasNext" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextDouble" jni-signature="()D" bridge="false" native="false" return="double" jni-return="D" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.PrimitiveIterator.OfDouble" extends-generic-aware="com.annimon.stream.iterator.PrimitiveIterator.OfDouble" jni-extends="Lcom/annimon/stream/iterator/PrimitiveIterator$OfDouble;" final="false" name="DoubleIterate" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/DoubleIterate;">
      <constructor deprecated="not deprecated" final="false" name="DoubleIterate" jni-signature="(DLcom/annimon/stream/function/DoubleUnaryOperator;)V" bridge="false" static="false" type="com.annimon.stream.operator.DoubleIterate" synthetic="false" visibility="public">
        <parameter name="seed" type="double" jni-type="D"></parameter>
        <parameter name="f" type="com.annimon.stream.function.DoubleUnaryOperator" jni-type="Lcom/annimon/stream/function/DoubleUnaryOperator;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="hasNext" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextDouble" jni-signature="()D" bridge="false" native="false" return="double" jni-return="D" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.PrimitiveIterator.OfDouble" extends-generic-aware="com.annimon.stream.iterator.PrimitiveIterator.OfDouble" jni-extends="Lcom/annimon/stream/iterator/PrimitiveIterator$OfDouble;" final="false" name="DoubleLimit" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/DoubleLimit;">
      <constructor deprecated="not deprecated" final="false" name="DoubleLimit" jni-signature="(Lcom/annimon/stream/iterator/PrimitiveIterator$OfDouble;J)V" bridge="false" static="false" type="com.annimon.stream.operator.DoubleLimit" synthetic="false" visibility="public">
        <parameter name="iterator" type="com.annimon.stream.iterator.PrimitiveIterator.OfDouble" jni-type="Lcom/annimon/stream/iterator/PrimitiveIterator$OfDouble;"></parameter>
        <parameter name="maxSize" type="long" jni-type="J"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="hasNext" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextDouble" jni-signature="()D" bridge="false" native="false" return="double" jni-return="D" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.PrimitiveIterator.OfDouble" extends-generic-aware="com.annimon.stream.iterator.PrimitiveIterator.OfDouble" jni-extends="Lcom/annimon/stream/iterator/PrimitiveIterator$OfDouble;" final="false" name="DoubleMap" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/DoubleMap;">
      <constructor deprecated="not deprecated" final="false" name="DoubleMap" jni-signature="(Lcom/annimon/stream/iterator/PrimitiveIterator$OfDouble;Lcom/annimon/stream/function/DoubleUnaryOperator;)V" bridge="false" static="false" type="com.annimon.stream.operator.DoubleMap" synthetic="false" visibility="public">
        <parameter name="iterator" type="com.annimon.stream.iterator.PrimitiveIterator.OfDouble" jni-type="Lcom/annimon/stream/iterator/PrimitiveIterator$OfDouble;"></parameter>
        <parameter name="mapper" type="com.annimon.stream.function.DoubleUnaryOperator" jni-type="Lcom/annimon/stream/function/DoubleUnaryOperator;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="hasNext" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextDouble" jni-signature="()D" bridge="false" native="false" return="double" jni-return="D" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.PrimitiveIterator.OfDouble" extends-generic-aware="com.annimon.stream.iterator.PrimitiveIterator.OfDouble" jni-extends="Lcom/annimon/stream/iterator/PrimitiveIterator$OfDouble;" final="false" name="DoubleMapIndexed" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/DoubleMapIndexed;">
      <constructor deprecated="not deprecated" final="false" name="DoubleMapIndexed" jni-signature="(Lcom/annimon/stream/iterator/PrimitiveIndexedIterator$OfDouble;Lcom/annimon/stream/function/IndexedDoubleUnaryOperator;)V" bridge="false" static="false" type="com.annimon.stream.operator.DoubleMapIndexed" synthetic="false" visibility="public">
        <parameter name="iterator" type="com.annimon.stream.iterator.PrimitiveIndexedIterator.OfDouble" jni-type="Lcom/annimon/stream/iterator/PrimitiveIndexedIterator$OfDouble;"></parameter>
        <parameter name="mapper" type="com.annimon.stream.function.IndexedDoubleUnaryOperator" jni-type="Lcom/annimon/stream/function/IndexedDoubleUnaryOperator;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="hasNext" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextDouble" jni-signature="()D" bridge="false" native="false" return="double" jni-return="D" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.PrimitiveIterator.OfInt" extends-generic-aware="com.annimon.stream.iterator.PrimitiveIterator.OfInt" jni-extends="Lcom/annimon/stream/iterator/PrimitiveIterator$OfInt;" final="false" name="DoubleMapToInt" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/DoubleMapToInt;">
      <constructor deprecated="not deprecated" final="false" name="DoubleMapToInt" jni-signature="(Lcom/annimon/stream/iterator/PrimitiveIterator$OfDouble;Lcom/annimon/stream/function/DoubleToIntFunction;)V" bridge="false" static="false" type="com.annimon.stream.operator.DoubleMapToInt" synthetic="false" visibility="public">
        <parameter name="iterator" type="com.annimon.stream.iterator.PrimitiveIterator.OfDouble" jni-type="Lcom/annimon/stream/iterator/PrimitiveIterator$OfDouble;"></parameter>
        <parameter name="mapper" type="com.annimon.stream.function.DoubleToIntFunction" jni-type="Lcom/annimon/stream/function/DoubleToIntFunction;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="hasNext" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextInt" jni-signature="()I" bridge="false" native="false" return="int" jni-return="I" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.PrimitiveIterator.OfLong" extends-generic-aware="com.annimon.stream.iterator.PrimitiveIterator.OfLong" jni-extends="Lcom/annimon/stream/iterator/PrimitiveIterator$OfLong;" final="false" name="DoubleMapToLong" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/DoubleMapToLong;">
      <constructor deprecated="not deprecated" final="false" name="DoubleMapToLong" jni-signature="(Lcom/annimon/stream/iterator/PrimitiveIterator$OfDouble;Lcom/annimon/stream/function/DoubleToLongFunction;)V" bridge="false" static="false" type="com.annimon.stream.operator.DoubleMapToLong" synthetic="false" visibility="public">
        <parameter name="iterator" type="com.annimon.stream.iterator.PrimitiveIterator.OfDouble" jni-type="Lcom/annimon/stream/iterator/PrimitiveIterator$OfDouble;"></parameter>
        <parameter name="mapper" type="com.annimon.stream.function.DoubleToLongFunction" jni-type="Lcom/annimon/stream/function/DoubleToLongFunction;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="hasNext" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextLong" jni-signature="()J" bridge="false" native="false" return="long" jni-return="J" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.LsaIterator" extends-generic-aware="com.annimon.stream.iterator.LsaIterator&lt;R&gt;" jni-extends="Lcom/annimon/stream/iterator/LsaIterator;" final="false" name="DoubleMapToObj" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/DoubleMapToObj;">
      <typeParameters>
        <typeParameter name="R" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
      </typeParameters>
      <constructor deprecated="not deprecated" final="false" name="DoubleMapToObj" jni-signature="(Lcom/annimon/stream/iterator/PrimitiveIterator$OfDouble;Lcom/annimon/stream/function/DoubleFunction;)V" bridge="false" static="false" type="com.annimon.stream.operator.DoubleMapToObj" synthetic="false" visibility="public">
        <parameter name="iterator" type="com.annimon.stream.iterator.PrimitiveIterator.OfDouble" jni-type="Lcom/annimon/stream/iterator/PrimitiveIterator$OfDouble;"></parameter>
        <parameter name="mapper" type="com.annimon.stream.function.DoubleFunction&lt;? extends R&gt;" jni-type="Lcom/annimon/stream/function/DoubleFunction&lt;+TR;&gt;;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="hasNext" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextIteration" jni-signature="()Ljava/lang/Object;" bridge="false" native="false" return="R" jni-return="TR;" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.PrimitiveIterator.OfDouble" extends-generic-aware="com.annimon.stream.iterator.PrimitiveIterator.OfDouble" jni-extends="Lcom/annimon/stream/iterator/PrimitiveIterator$OfDouble;" final="false" name="DoublePeek" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/DoublePeek;">
      <constructor deprecated="not deprecated" final="false" name="DoublePeek" jni-signature="(Lcom/annimon/stream/iterator/PrimitiveIterator$OfDouble;Lcom/annimon/stream/function/DoubleConsumer;)V" bridge="false" static="false" type="com.annimon.stream.operator.DoublePeek" synthetic="false" visibility="public">
        <parameter name="iterator" type="com.annimon.stream.iterator.PrimitiveIterator.OfDouble" jni-type="Lcom/annimon/stream/iterator/PrimitiveIterator$OfDouble;"></parameter>
        <parameter name="action" type="com.annimon.stream.function.DoubleConsumer" jni-type="Lcom/annimon/stream/function/DoubleConsumer;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="hasNext" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextDouble" jni-signature="()D" bridge="false" native="false" return="double" jni-return="D" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.PrimitiveIterator.OfDouble" extends-generic-aware="com.annimon.stream.iterator.PrimitiveIterator.OfDouble" jni-extends="Lcom/annimon/stream/iterator/PrimitiveIterator$OfDouble;" final="false" name="DoubleSample" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/DoubleSample;">
      <constructor deprecated="not deprecated" final="false" name="DoubleSample" jni-signature="(Lcom/annimon/stream/iterator/PrimitiveIterator$OfDouble;I)V" bridge="false" static="false" type="com.annimon.stream.operator.DoubleSample" synthetic="false" visibility="public">
        <parameter name="iterator" type="com.annimon.stream.iterator.PrimitiveIterator.OfDouble" jni-type="Lcom/annimon/stream/iterator/PrimitiveIterator$OfDouble;"></parameter>
        <parameter name="stepWidth" type="int" jni-type="I"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="hasNext" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextDouble" jni-signature="()D" bridge="false" native="false" return="double" jni-return="D" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.PrimitiveExtIterator.OfDouble" extends-generic-aware="com.annimon.stream.iterator.PrimitiveExtIterator.OfDouble" jni-extends="Lcom/annimon/stream/iterator/PrimitiveExtIterator$OfDouble;" final="false" name="DoubleScan" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/DoubleScan;">
      <constructor deprecated="not deprecated" final="false" name="DoubleScan" jni-signature="(Lcom/annimon/stream/iterator/PrimitiveIterator$OfDouble;Lcom/annimon/stream/function/DoubleBinaryOperator;)V" bridge="false" static="false" type="com.annimon.stream.operator.DoubleScan" synthetic="false" visibility="public">
        <parameter name="iterator" type="com.annimon.stream.iterator.PrimitiveIterator.OfDouble" jni-type="Lcom/annimon/stream/iterator/PrimitiveIterator$OfDouble;"></parameter>
        <parameter name="accumulator" type="com.annimon.stream.function.DoubleBinaryOperator" jni-type="Lcom/annimon/stream/function/DoubleBinaryOperator;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextIteration" jni-signature="()V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="protected"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.PrimitiveExtIterator.OfDouble" extends-generic-aware="com.annimon.stream.iterator.PrimitiveExtIterator.OfDouble" jni-extends="Lcom/annimon/stream/iterator/PrimitiveExtIterator$OfDouble;" final="false" name="DoubleScanIdentity" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/DoubleScanIdentity;">
      <constructor deprecated="not deprecated" final="false" name="DoubleScanIdentity" jni-signature="(Lcom/annimon/stream/iterator/PrimitiveIterator$OfDouble;DLcom/annimon/stream/function/DoubleBinaryOperator;)V" bridge="false" static="false" type="com.annimon.stream.operator.DoubleScanIdentity" synthetic="false" visibility="public">
        <parameter name="iterator" type="com.annimon.stream.iterator.PrimitiveIterator.OfDouble" jni-type="Lcom/annimon/stream/iterator/PrimitiveIterator$OfDouble;"></parameter>
        <parameter name="identity" type="double" jni-type="D"></parameter>
        <parameter name="accumulator" type="com.annimon.stream.function.DoubleBinaryOperator" jni-type="Lcom/annimon/stream/function/DoubleBinaryOperator;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextIteration" jni-signature="()V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="protected"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.PrimitiveIterator.OfDouble" extends-generic-aware="com.annimon.stream.iterator.PrimitiveIterator.OfDouble" jni-extends="Lcom/annimon/stream/iterator/PrimitiveIterator$OfDouble;" final="false" name="DoubleSkip" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/DoubleSkip;">
      <constructor deprecated="not deprecated" final="false" name="DoubleSkip" jni-signature="(Lcom/annimon/stream/iterator/PrimitiveIterator$OfDouble;J)V" bridge="false" static="false" type="com.annimon.stream.operator.DoubleSkip" synthetic="false" visibility="public">
        <parameter name="iterator" type="com.annimon.stream.iterator.PrimitiveIterator.OfDouble" jni-type="Lcom/annimon/stream/iterator/PrimitiveIterator$OfDouble;"></parameter>
        <parameter name="n" type="long" jni-type="J"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="hasNext" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextDouble" jni-signature="()D" bridge="false" native="false" return="double" jni-return="D" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.PrimitiveExtIterator.OfDouble" extends-generic-aware="com.annimon.stream.iterator.PrimitiveExtIterator.OfDouble" jni-extends="Lcom/annimon/stream/iterator/PrimitiveExtIterator$OfDouble;" final="false" name="DoubleSorted" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/DoubleSorted;">
      <constructor deprecated="not deprecated" final="false" name="DoubleSorted" jni-signature="(Lcom/annimon/stream/iterator/PrimitiveIterator$OfDouble;)V" bridge="false" static="false" type="com.annimon.stream.operator.DoubleSorted" synthetic="false" visibility="public">
        <parameter name="iterator" type="com.annimon.stream.iterator.PrimitiveIterator.OfDouble" jni-type="Lcom/annimon/stream/iterator/PrimitiveIterator$OfDouble;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextIteration" jni-signature="()V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="protected"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.PrimitiveExtIterator.OfDouble" extends-generic-aware="com.annimon.stream.iterator.PrimitiveExtIterator.OfDouble" jni-extends="Lcom/annimon/stream/iterator/PrimitiveExtIterator$OfDouble;" final="false" name="DoubleTakeUntil" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/DoubleTakeUntil;">
      <constructor deprecated="not deprecated" final="false" name="DoubleTakeUntil" jni-signature="(Lcom/annimon/stream/iterator/PrimitiveIterator$OfDouble;Lcom/annimon/stream/function/DoublePredicate;)V" bridge="false" static="false" type="com.annimon.stream.operator.DoubleTakeUntil" synthetic="false" visibility="public">
        <parameter name="iterator" type="com.annimon.stream.iterator.PrimitiveIterator.OfDouble" jni-type="Lcom/annimon/stream/iterator/PrimitiveIterator$OfDouble;"></parameter>
        <parameter name="stopPredicate" type="com.annimon.stream.function.DoublePredicate" jni-type="Lcom/annimon/stream/function/DoublePredicate;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextIteration" jni-signature="()V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="protected"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.PrimitiveExtIterator.OfDouble" extends-generic-aware="com.annimon.stream.iterator.PrimitiveExtIterator.OfDouble" jni-extends="Lcom/annimon/stream/iterator/PrimitiveExtIterator$OfDouble;" final="false" name="DoubleTakeWhile" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/DoubleTakeWhile;">
      <constructor deprecated="not deprecated" final="false" name="DoubleTakeWhile" jni-signature="(Lcom/annimon/stream/iterator/PrimitiveIterator$OfDouble;Lcom/annimon/stream/function/DoublePredicate;)V" bridge="false" static="false" type="com.annimon.stream.operator.DoubleTakeWhile" synthetic="false" visibility="public">
        <parameter name="iterator" type="com.annimon.stream.iterator.PrimitiveIterator.OfDouble" jni-type="Lcom/annimon/stream/iterator/PrimitiveIterator$OfDouble;"></parameter>
        <parameter name="predicate" type="com.annimon.stream.function.DoublePredicate" jni-type="Lcom/annimon/stream/function/DoublePredicate;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextIteration" jni-signature="()V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="protected"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.PrimitiveIterator.OfInt" extends-generic-aware="com.annimon.stream.iterator.PrimitiveIterator.OfInt" jni-extends="Lcom/annimon/stream/iterator/PrimitiveIterator$OfInt;" final="false" name="IntArray" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/IntArray;">
      <constructor deprecated="not deprecated" final="false" name="IntArray" jni-signature="([I)V" bridge="false" static="false" type="com.annimon.stream.operator.IntArray" synthetic="false" visibility="public">
        <parameter name="values" type="int[]" jni-type="[I"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="hasNext" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextInt" jni-signature="()I" bridge="false" native="false" return="int" jni-return="I" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.PrimitiveIterator.OfInt" extends-generic-aware="com.annimon.stream.iterator.PrimitiveIterator.OfInt" jni-extends="Lcom/annimon/stream/iterator/PrimitiveIterator$OfInt;" final="false" name="IntCodePoints" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/IntCodePoints;">
      <constructor deprecated="not deprecated" final="false" name="IntCodePoints" jni-signature="(Ljava/lang/CharSequence;)V" bridge="false" static="false" type="com.annimon.stream.operator.IntCodePoints" synthetic="false" visibility="public">
        <parameter name="charSequence" type="java.lang.CharSequence" jni-type="Ljava/lang/CharSequence;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="hasNext" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextInt" jni-signature="()I" bridge="false" native="false" return="int" jni-return="I" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.PrimitiveIterator.OfInt" extends-generic-aware="com.annimon.stream.iterator.PrimitiveIterator.OfInt" jni-extends="Lcom/annimon/stream/iterator/PrimitiveIterator$OfInt;" final="false" name="IntConcat" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/IntConcat;">
      <constructor deprecated="not deprecated" final="false" name="IntConcat" jni-signature="(Lcom/annimon/stream/iterator/PrimitiveIterator$OfInt;Lcom/annimon/stream/iterator/PrimitiveIterator$OfInt;)V" bridge="false" static="false" type="com.annimon.stream.operator.IntConcat" synthetic="false" visibility="public">
        <parameter name="iterator1" type="com.annimon.stream.iterator.PrimitiveIterator.OfInt" jni-type="Lcom/annimon/stream/iterator/PrimitiveIterator$OfInt;"></parameter>
        <parameter name="iterator2" type="com.annimon.stream.iterator.PrimitiveIterator.OfInt" jni-type="Lcom/annimon/stream/iterator/PrimitiveIterator$OfInt;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="hasNext" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextInt" jni-signature="()I" bridge="false" native="false" return="int" jni-return="I" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.PrimitiveExtIterator.OfInt" extends-generic-aware="com.annimon.stream.iterator.PrimitiveExtIterator.OfInt" jni-extends="Lcom/annimon/stream/iterator/PrimitiveExtIterator$OfInt;" final="false" name="IntDropWhile" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/IntDropWhile;">
      <constructor deprecated="not deprecated" final="false" name="IntDropWhile" jni-signature="(Lcom/annimon/stream/iterator/PrimitiveIterator$OfInt;Lcom/annimon/stream/function/IntPredicate;)V" bridge="false" static="false" type="com.annimon.stream.operator.IntDropWhile" synthetic="false" visibility="public">
        <parameter name="iterator" type="com.annimon.stream.iterator.PrimitiveIterator.OfInt" jni-type="Lcom/annimon/stream/iterator/PrimitiveIterator$OfInt;"></parameter>
        <parameter name="predicate" type="com.annimon.stream.function.IntPredicate" jni-type="Lcom/annimon/stream/function/IntPredicate;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextIteration" jni-signature="()V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="protected"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.PrimitiveIterator.OfInt" extends-generic-aware="com.annimon.stream.iterator.PrimitiveIterator.OfInt" jni-extends="Lcom/annimon/stream/iterator/PrimitiveIterator$OfInt;" final="false" name="IntFilter" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/IntFilter;">
      <constructor deprecated="not deprecated" final="false" name="IntFilter" jni-signature="(Lcom/annimon/stream/iterator/PrimitiveIterator$OfInt;Lcom/annimon/stream/function/IntPredicate;)V" bridge="false" static="false" type="com.annimon.stream.operator.IntFilter" synthetic="false" visibility="public">
        <parameter name="iterator" type="com.annimon.stream.iterator.PrimitiveIterator.OfInt" jni-type="Lcom/annimon/stream/iterator/PrimitiveIterator$OfInt;"></parameter>
        <parameter name="predicate" type="com.annimon.stream.function.IntPredicate" jni-type="Lcom/annimon/stream/function/IntPredicate;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="hasNext" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextInt" jni-signature="()I" bridge="false" native="false" return="int" jni-return="I" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.PrimitiveIterator.OfInt" extends-generic-aware="com.annimon.stream.iterator.PrimitiveIterator.OfInt" jni-extends="Lcom/annimon/stream/iterator/PrimitiveIterator$OfInt;" final="false" name="IntFilterIndexed" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/IntFilterIndexed;">
      <constructor deprecated="not deprecated" final="false" name="IntFilterIndexed" jni-signature="(Lcom/annimon/stream/iterator/PrimitiveIndexedIterator$OfInt;Lcom/annimon/stream/function/IndexedIntPredicate;)V" bridge="false" static="false" type="com.annimon.stream.operator.IntFilterIndexed" synthetic="false" visibility="public">
        <parameter name="iterator" type="com.annimon.stream.iterator.PrimitiveIndexedIterator.OfInt" jni-type="Lcom/annimon/stream/iterator/PrimitiveIndexedIterator$OfInt;"></parameter>
        <parameter name="predicate" type="com.annimon.stream.function.IndexedIntPredicate" jni-type="Lcom/annimon/stream/function/IndexedIntPredicate;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="hasNext" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextInt" jni-signature="()I" bridge="false" native="false" return="int" jni-return="I" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.PrimitiveIterator.OfInt" extends-generic-aware="com.annimon.stream.iterator.PrimitiveIterator.OfInt" jni-extends="Lcom/annimon/stream/iterator/PrimitiveIterator$OfInt;" final="false" name="IntFlatMap" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/IntFlatMap;">
      <constructor deprecated="not deprecated" final="false" name="IntFlatMap" jni-signature="(Lcom/annimon/stream/iterator/PrimitiveIterator$OfInt;Lcom/annimon/stream/function/IntFunction;)V" bridge="false" static="false" type="com.annimon.stream.operator.IntFlatMap" synthetic="false" visibility="public">
        <parameter name="iterator" type="com.annimon.stream.iterator.PrimitiveIterator.OfInt" jni-type="Lcom/annimon/stream/iterator/PrimitiveIterator$OfInt;"></parameter>
        <parameter name="mapper" type="com.annimon.stream.function.IntFunction&lt;? extends com.annimon.stream.IntStream&gt;" jni-type="Lcom/annimon/stream/function/IntFunction&lt;+Lcom/annimon/stream/IntStream;&gt;;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="hasNext" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextInt" jni-signature="()I" bridge="false" native="false" return="int" jni-return="I" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.PrimitiveIterator.OfInt" extends-generic-aware="com.annimon.stream.iterator.PrimitiveIterator.OfInt" jni-extends="Lcom/annimon/stream/iterator/PrimitiveIterator$OfInt;" final="false" name="IntGenerate" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/IntGenerate;">
      <constructor deprecated="not deprecated" final="false" name="IntGenerate" jni-signature="(Lcom/annimon/stream/function/IntSupplier;)V" bridge="false" static="false" type="com.annimon.stream.operator.IntGenerate" synthetic="false" visibility="public">
        <parameter name="supplier" type="com.annimon.stream.function.IntSupplier" jni-type="Lcom/annimon/stream/function/IntSupplier;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="hasNext" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextInt" jni-signature="()I" bridge="false" native="false" return="int" jni-return="I" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.PrimitiveIterator.OfInt" extends-generic-aware="com.annimon.stream.iterator.PrimitiveIterator.OfInt" jni-extends="Lcom/annimon/stream/iterator/PrimitiveIterator$OfInt;" final="false" name="IntIterate" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/IntIterate;">
      <constructor deprecated="not deprecated" final="false" name="IntIterate" jni-signature="(ILcom/annimon/stream/function/IntUnaryOperator;)V" bridge="false" static="false" type="com.annimon.stream.operator.IntIterate" synthetic="false" visibility="public">
        <parameter name="seed" type="int" jni-type="I"></parameter>
        <parameter name="f" type="com.annimon.stream.function.IntUnaryOperator" jni-type="Lcom/annimon/stream/function/IntUnaryOperator;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="hasNext" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextInt" jni-signature="()I" bridge="false" native="false" return="int" jni-return="I" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.PrimitiveIterator.OfInt" extends-generic-aware="com.annimon.stream.iterator.PrimitiveIterator.OfInt" jni-extends="Lcom/annimon/stream/iterator/PrimitiveIterator$OfInt;" final="false" name="IntLimit" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/IntLimit;">
      <constructor deprecated="not deprecated" final="false" name="IntLimit" jni-signature="(Lcom/annimon/stream/iterator/PrimitiveIterator$OfInt;J)V" bridge="false" static="false" type="com.annimon.stream.operator.IntLimit" synthetic="false" visibility="public">
        <parameter name="iterator" type="com.annimon.stream.iterator.PrimitiveIterator.OfInt" jni-type="Lcom/annimon/stream/iterator/PrimitiveIterator$OfInt;"></parameter>
        <parameter name="maxSize" type="long" jni-type="J"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="hasNext" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextInt" jni-signature="()I" bridge="false" native="false" return="int" jni-return="I" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.PrimitiveIterator.OfInt" extends-generic-aware="com.annimon.stream.iterator.PrimitiveIterator.OfInt" jni-extends="Lcom/annimon/stream/iterator/PrimitiveIterator$OfInt;" final="false" name="IntMap" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/IntMap;">
      <constructor deprecated="not deprecated" final="false" name="IntMap" jni-signature="(Lcom/annimon/stream/iterator/PrimitiveIterator$OfInt;Lcom/annimon/stream/function/IntUnaryOperator;)V" bridge="false" static="false" type="com.annimon.stream.operator.IntMap" synthetic="false" visibility="public">
        <parameter name="iterator" type="com.annimon.stream.iterator.PrimitiveIterator.OfInt" jni-type="Lcom/annimon/stream/iterator/PrimitiveIterator$OfInt;"></parameter>
        <parameter name="mapper" type="com.annimon.stream.function.IntUnaryOperator" jni-type="Lcom/annimon/stream/function/IntUnaryOperator;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="hasNext" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextInt" jni-signature="()I" bridge="false" native="false" return="int" jni-return="I" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.PrimitiveIterator.OfInt" extends-generic-aware="com.annimon.stream.iterator.PrimitiveIterator.OfInt" jni-extends="Lcom/annimon/stream/iterator/PrimitiveIterator$OfInt;" final="false" name="IntMapIndexed" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/IntMapIndexed;">
      <constructor deprecated="not deprecated" final="false" name="IntMapIndexed" jni-signature="(Lcom/annimon/stream/iterator/PrimitiveIndexedIterator$OfInt;Lcom/annimon/stream/function/IntBinaryOperator;)V" bridge="false" static="false" type="com.annimon.stream.operator.IntMapIndexed" synthetic="false" visibility="public">
        <parameter name="iterator" type="com.annimon.stream.iterator.PrimitiveIndexedIterator.OfInt" jni-type="Lcom/annimon/stream/iterator/PrimitiveIndexedIterator$OfInt;"></parameter>
        <parameter name="mapper" type="com.annimon.stream.function.IntBinaryOperator" jni-type="Lcom/annimon/stream/function/IntBinaryOperator;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="hasNext" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextInt" jni-signature="()I" bridge="false" native="false" return="int" jni-return="I" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.PrimitiveIterator.OfDouble" extends-generic-aware="com.annimon.stream.iterator.PrimitiveIterator.OfDouble" jni-extends="Lcom/annimon/stream/iterator/PrimitiveIterator$OfDouble;" final="false" name="IntMapToDouble" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/IntMapToDouble;">
      <constructor deprecated="not deprecated" final="false" name="IntMapToDouble" jni-signature="(Lcom/annimon/stream/iterator/PrimitiveIterator$OfInt;Lcom/annimon/stream/function/IntToDoubleFunction;)V" bridge="false" static="false" type="com.annimon.stream.operator.IntMapToDouble" synthetic="false" visibility="public">
        <parameter name="iterator" type="com.annimon.stream.iterator.PrimitiveIterator.OfInt" jni-type="Lcom/annimon/stream/iterator/PrimitiveIterator$OfInt;"></parameter>
        <parameter name="mapper" type="com.annimon.stream.function.IntToDoubleFunction" jni-type="Lcom/annimon/stream/function/IntToDoubleFunction;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="hasNext" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextDouble" jni-signature="()D" bridge="false" native="false" return="double" jni-return="D" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.PrimitiveIterator.OfLong" extends-generic-aware="com.annimon.stream.iterator.PrimitiveIterator.OfLong" jni-extends="Lcom/annimon/stream/iterator/PrimitiveIterator$OfLong;" final="false" name="IntMapToLong" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/IntMapToLong;">
      <constructor deprecated="not deprecated" final="false" name="IntMapToLong" jni-signature="(Lcom/annimon/stream/iterator/PrimitiveIterator$OfInt;Lcom/annimon/stream/function/IntToLongFunction;)V" bridge="false" static="false" type="com.annimon.stream.operator.IntMapToLong" synthetic="false" visibility="public">
        <parameter name="iterator" type="com.annimon.stream.iterator.PrimitiveIterator.OfInt" jni-type="Lcom/annimon/stream/iterator/PrimitiveIterator$OfInt;"></parameter>
        <parameter name="mapper" type="com.annimon.stream.function.IntToLongFunction" jni-type="Lcom/annimon/stream/function/IntToLongFunction;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="hasNext" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextLong" jni-signature="()J" bridge="false" native="false" return="long" jni-return="J" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.LsaIterator" extends-generic-aware="com.annimon.stream.iterator.LsaIterator&lt;R&gt;" jni-extends="Lcom/annimon/stream/iterator/LsaIterator;" final="false" name="IntMapToObj" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/IntMapToObj;">
      <typeParameters>
        <typeParameter name="R" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
      </typeParameters>
      <constructor deprecated="not deprecated" final="false" name="IntMapToObj" jni-signature="(Lcom/annimon/stream/iterator/PrimitiveIterator$OfInt;Lcom/annimon/stream/function/IntFunction;)V" bridge="false" static="false" type="com.annimon.stream.operator.IntMapToObj" synthetic="false" visibility="public">
        <parameter name="iterator" type="com.annimon.stream.iterator.PrimitiveIterator.OfInt" jni-type="Lcom/annimon/stream/iterator/PrimitiveIterator$OfInt;"></parameter>
        <parameter name="mapper" type="com.annimon.stream.function.IntFunction&lt;? extends R&gt;" jni-type="Lcom/annimon/stream/function/IntFunction&lt;+TR;&gt;;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="hasNext" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextIteration" jni-signature="()Ljava/lang/Object;" bridge="false" native="false" return="R" jni-return="TR;" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.PrimitiveIterator.OfInt" extends-generic-aware="com.annimon.stream.iterator.PrimitiveIterator.OfInt" jni-extends="Lcom/annimon/stream/iterator/PrimitiveIterator$OfInt;" final="false" name="IntPeek" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/IntPeek;">
      <constructor deprecated="not deprecated" final="false" name="IntPeek" jni-signature="(Lcom/annimon/stream/iterator/PrimitiveIterator$OfInt;Lcom/annimon/stream/function/IntConsumer;)V" bridge="false" static="false" type="com.annimon.stream.operator.IntPeek" synthetic="false" visibility="public">
        <parameter name="iterator" type="com.annimon.stream.iterator.PrimitiveIterator.OfInt" jni-type="Lcom/annimon/stream/iterator/PrimitiveIterator$OfInt;"></parameter>
        <parameter name="action" type="com.annimon.stream.function.IntConsumer" jni-type="Lcom/annimon/stream/function/IntConsumer;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="hasNext" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextInt" jni-signature="()I" bridge="false" native="false" return="int" jni-return="I" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.PrimitiveIterator.OfInt" extends-generic-aware="com.annimon.stream.iterator.PrimitiveIterator.OfInt" jni-extends="Lcom/annimon/stream/iterator/PrimitiveIterator$OfInt;" final="false" name="IntRangeClosed" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/IntRangeClosed;">
      <constructor deprecated="not deprecated" final="false" name="IntRangeClosed" jni-signature="(II)V" bridge="false" static="false" type="com.annimon.stream.operator.IntRangeClosed" synthetic="false" visibility="public">
        <parameter name="startInclusive" type="int" jni-type="I"></parameter>
        <parameter name="endInclusive" type="int" jni-type="I"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="hasNext" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextInt" jni-signature="()I" bridge="false" native="false" return="int" jni-return="I" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.PrimitiveIterator.OfInt" extends-generic-aware="com.annimon.stream.iterator.PrimitiveIterator.OfInt" jni-extends="Lcom/annimon/stream/iterator/PrimitiveIterator$OfInt;" final="false" name="IntSample" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/IntSample;">
      <constructor deprecated="not deprecated" final="false" name="IntSample" jni-signature="(Lcom/annimon/stream/iterator/PrimitiveIterator$OfInt;I)V" bridge="false" static="false" type="com.annimon.stream.operator.IntSample" synthetic="false" visibility="public">
        <parameter name="iterator" type="com.annimon.stream.iterator.PrimitiveIterator.OfInt" jni-type="Lcom/annimon/stream/iterator/PrimitiveIterator$OfInt;"></parameter>
        <parameter name="stepWidth" type="int" jni-type="I"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="hasNext" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextInt" jni-signature="()I" bridge="false" native="false" return="int" jni-return="I" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.PrimitiveExtIterator.OfInt" extends-generic-aware="com.annimon.stream.iterator.PrimitiveExtIterator.OfInt" jni-extends="Lcom/annimon/stream/iterator/PrimitiveExtIterator$OfInt;" final="false" name="IntScan" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/IntScan;">
      <constructor deprecated="not deprecated" final="false" name="IntScan" jni-signature="(Lcom/annimon/stream/iterator/PrimitiveIterator$OfInt;Lcom/annimon/stream/function/IntBinaryOperator;)V" bridge="false" static="false" type="com.annimon.stream.operator.IntScan" synthetic="false" visibility="public">
        <parameter name="iterator" type="com.annimon.stream.iterator.PrimitiveIterator.OfInt" jni-type="Lcom/annimon/stream/iterator/PrimitiveIterator$OfInt;"></parameter>
        <parameter name="accumulator" type="com.annimon.stream.function.IntBinaryOperator" jni-type="Lcom/annimon/stream/function/IntBinaryOperator;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextIteration" jni-signature="()V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="protected"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.PrimitiveExtIterator.OfInt" extends-generic-aware="com.annimon.stream.iterator.PrimitiveExtIterator.OfInt" jni-extends="Lcom/annimon/stream/iterator/PrimitiveExtIterator$OfInt;" final="false" name="IntScanIdentity" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/IntScanIdentity;">
      <constructor deprecated="not deprecated" final="false" name="IntScanIdentity" jni-signature="(Lcom/annimon/stream/iterator/PrimitiveIterator$OfInt;ILcom/annimon/stream/function/IntBinaryOperator;)V" bridge="false" static="false" type="com.annimon.stream.operator.IntScanIdentity" synthetic="false" visibility="public">
        <parameter name="iterator" type="com.annimon.stream.iterator.PrimitiveIterator.OfInt" jni-type="Lcom/annimon/stream/iterator/PrimitiveIterator$OfInt;"></parameter>
        <parameter name="identity" type="int" jni-type="I"></parameter>
        <parameter name="accumulator" type="com.annimon.stream.function.IntBinaryOperator" jni-type="Lcom/annimon/stream/function/IntBinaryOperator;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextIteration" jni-signature="()V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="protected"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.PrimitiveIterator.OfInt" extends-generic-aware="com.annimon.stream.iterator.PrimitiveIterator.OfInt" jni-extends="Lcom/annimon/stream/iterator/PrimitiveIterator$OfInt;" final="false" name="IntSkip" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/IntSkip;">
      <constructor deprecated="not deprecated" final="false" name="IntSkip" jni-signature="(Lcom/annimon/stream/iterator/PrimitiveIterator$OfInt;J)V" bridge="false" static="false" type="com.annimon.stream.operator.IntSkip" synthetic="false" visibility="public">
        <parameter name="iterator" type="com.annimon.stream.iterator.PrimitiveIterator.OfInt" jni-type="Lcom/annimon/stream/iterator/PrimitiveIterator$OfInt;"></parameter>
        <parameter name="n" type="long" jni-type="J"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="hasNext" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextInt" jni-signature="()I" bridge="false" native="false" return="int" jni-return="I" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.PrimitiveExtIterator.OfInt" extends-generic-aware="com.annimon.stream.iterator.PrimitiveExtIterator.OfInt" jni-extends="Lcom/annimon/stream/iterator/PrimitiveExtIterator$OfInt;" final="false" name="IntSorted" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/IntSorted;">
      <constructor deprecated="not deprecated" final="false" name="IntSorted" jni-signature="(Lcom/annimon/stream/iterator/PrimitiveIterator$OfInt;)V" bridge="false" static="false" type="com.annimon.stream.operator.IntSorted" synthetic="false" visibility="public">
        <parameter name="iterator" type="com.annimon.stream.iterator.PrimitiveIterator.OfInt" jni-type="Lcom/annimon/stream/iterator/PrimitiveIterator$OfInt;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextIteration" jni-signature="()V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="protected"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.PrimitiveExtIterator.OfInt" extends-generic-aware="com.annimon.stream.iterator.PrimitiveExtIterator.OfInt" jni-extends="Lcom/annimon/stream/iterator/PrimitiveExtIterator$OfInt;" final="false" name="IntTakeUntil" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/IntTakeUntil;">
      <constructor deprecated="not deprecated" final="false" name="IntTakeUntil" jni-signature="(Lcom/annimon/stream/iterator/PrimitiveIterator$OfInt;Lcom/annimon/stream/function/IntPredicate;)V" bridge="false" static="false" type="com.annimon.stream.operator.IntTakeUntil" synthetic="false" visibility="public">
        <parameter name="iterator" type="com.annimon.stream.iterator.PrimitiveIterator.OfInt" jni-type="Lcom/annimon/stream/iterator/PrimitiveIterator$OfInt;"></parameter>
        <parameter name="stopPredicate" type="com.annimon.stream.function.IntPredicate" jni-type="Lcom/annimon/stream/function/IntPredicate;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextIteration" jni-signature="()V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="protected"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.PrimitiveExtIterator.OfInt" extends-generic-aware="com.annimon.stream.iterator.PrimitiveExtIterator.OfInt" jni-extends="Lcom/annimon/stream/iterator/PrimitiveExtIterator$OfInt;" final="false" name="IntTakeWhile" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/IntTakeWhile;">
      <constructor deprecated="not deprecated" final="false" name="IntTakeWhile" jni-signature="(Lcom/annimon/stream/iterator/PrimitiveIterator$OfInt;Lcom/annimon/stream/function/IntPredicate;)V" bridge="false" static="false" type="com.annimon.stream.operator.IntTakeWhile" synthetic="false" visibility="public">
        <parameter name="iterator" type="com.annimon.stream.iterator.PrimitiveIterator.OfInt" jni-type="Lcom/annimon/stream/iterator/PrimitiveIterator$OfInt;"></parameter>
        <parameter name="predicate" type="com.annimon.stream.function.IntPredicate" jni-type="Lcom/annimon/stream/function/IntPredicate;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextIteration" jni-signature="()V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="protected"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.PrimitiveIterator.OfLong" extends-generic-aware="com.annimon.stream.iterator.PrimitiveIterator.OfLong" jni-extends="Lcom/annimon/stream/iterator/PrimitiveIterator$OfLong;" final="false" name="LongArray" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/LongArray;">
      <constructor deprecated="not deprecated" final="false" name="LongArray" jni-signature="([J)V" bridge="false" static="false" type="com.annimon.stream.operator.LongArray" synthetic="false" visibility="public">
        <parameter name="values" type="long[]" jni-type="[J"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="hasNext" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextLong" jni-signature="()J" bridge="false" native="false" return="long" jni-return="J" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.PrimitiveIterator.OfLong" extends-generic-aware="com.annimon.stream.iterator.PrimitiveIterator.OfLong" jni-extends="Lcom/annimon/stream/iterator/PrimitiveIterator$OfLong;" final="false" name="LongConcat" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/LongConcat;">
      <constructor deprecated="not deprecated" final="false" name="LongConcat" jni-signature="(Lcom/annimon/stream/iterator/PrimitiveIterator$OfLong;Lcom/annimon/stream/iterator/PrimitiveIterator$OfLong;)V" bridge="false" static="false" type="com.annimon.stream.operator.LongConcat" synthetic="false" visibility="public">
        <parameter name="iterator1" type="com.annimon.stream.iterator.PrimitiveIterator.OfLong" jni-type="Lcom/annimon/stream/iterator/PrimitiveIterator$OfLong;"></parameter>
        <parameter name="iterator2" type="com.annimon.stream.iterator.PrimitiveIterator.OfLong" jni-type="Lcom/annimon/stream/iterator/PrimitiveIterator$OfLong;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="hasNext" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextLong" jni-signature="()J" bridge="false" native="false" return="long" jni-return="J" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.PrimitiveExtIterator.OfLong" extends-generic-aware="com.annimon.stream.iterator.PrimitiveExtIterator.OfLong" jni-extends="Lcom/annimon/stream/iterator/PrimitiveExtIterator$OfLong;" final="false" name="LongDropWhile" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/LongDropWhile;">
      <constructor deprecated="not deprecated" final="false" name="LongDropWhile" jni-signature="(Lcom/annimon/stream/iterator/PrimitiveIterator$OfLong;Lcom/annimon/stream/function/LongPredicate;)V" bridge="false" static="false" type="com.annimon.stream.operator.LongDropWhile" synthetic="false" visibility="public">
        <parameter name="iterator" type="com.annimon.stream.iterator.PrimitiveIterator.OfLong" jni-type="Lcom/annimon/stream/iterator/PrimitiveIterator$OfLong;"></parameter>
        <parameter name="predicate" type="com.annimon.stream.function.LongPredicate" jni-type="Lcom/annimon/stream/function/LongPredicate;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextIteration" jni-signature="()V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="protected"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.PrimitiveIterator.OfLong" extends-generic-aware="com.annimon.stream.iterator.PrimitiveIterator.OfLong" jni-extends="Lcom/annimon/stream/iterator/PrimitiveIterator$OfLong;" final="false" name="LongFilter" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/LongFilter;">
      <constructor deprecated="not deprecated" final="false" name="LongFilter" jni-signature="(Lcom/annimon/stream/iterator/PrimitiveIterator$OfLong;Lcom/annimon/stream/function/LongPredicate;)V" bridge="false" static="false" type="com.annimon.stream.operator.LongFilter" synthetic="false" visibility="public">
        <parameter name="iterator" type="com.annimon.stream.iterator.PrimitiveIterator.OfLong" jni-type="Lcom/annimon/stream/iterator/PrimitiveIterator$OfLong;"></parameter>
        <parameter name="predicate" type="com.annimon.stream.function.LongPredicate" jni-type="Lcom/annimon/stream/function/LongPredicate;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="hasNext" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextLong" jni-signature="()J" bridge="false" native="false" return="long" jni-return="J" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.PrimitiveIterator.OfLong" extends-generic-aware="com.annimon.stream.iterator.PrimitiveIterator.OfLong" jni-extends="Lcom/annimon/stream/iterator/PrimitiveIterator$OfLong;" final="false" name="LongFilterIndexed" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/LongFilterIndexed;">
      <constructor deprecated="not deprecated" final="false" name="LongFilterIndexed" jni-signature="(Lcom/annimon/stream/iterator/PrimitiveIndexedIterator$OfLong;Lcom/annimon/stream/function/IndexedLongPredicate;)V" bridge="false" static="false" type="com.annimon.stream.operator.LongFilterIndexed" synthetic="false" visibility="public">
        <parameter name="iterator" type="com.annimon.stream.iterator.PrimitiveIndexedIterator.OfLong" jni-type="Lcom/annimon/stream/iterator/PrimitiveIndexedIterator$OfLong;"></parameter>
        <parameter name="predicate" type="com.annimon.stream.function.IndexedLongPredicate" jni-type="Lcom/annimon/stream/function/IndexedLongPredicate;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="hasNext" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextLong" jni-signature="()J" bridge="false" native="false" return="long" jni-return="J" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.PrimitiveIterator.OfLong" extends-generic-aware="com.annimon.stream.iterator.PrimitiveIterator.OfLong" jni-extends="Lcom/annimon/stream/iterator/PrimitiveIterator$OfLong;" final="false" name="LongFlatMap" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/LongFlatMap;">
      <constructor deprecated="not deprecated" final="false" name="LongFlatMap" jni-signature="(Lcom/annimon/stream/iterator/PrimitiveIterator$OfLong;Lcom/annimon/stream/function/LongFunction;)V" bridge="false" static="false" type="com.annimon.stream.operator.LongFlatMap" synthetic="false" visibility="public">
        <parameter name="iterator" type="com.annimon.stream.iterator.PrimitiveIterator.OfLong" jni-type="Lcom/annimon/stream/iterator/PrimitiveIterator$OfLong;"></parameter>
        <parameter name="mapper" type="com.annimon.stream.function.LongFunction&lt;? extends com.annimon.stream.LongStream&gt;" jni-type="Lcom/annimon/stream/function/LongFunction&lt;+Lcom/annimon/stream/LongStream;&gt;;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="hasNext" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextLong" jni-signature="()J" bridge="false" native="false" return="long" jni-return="J" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.PrimitiveIterator.OfLong" extends-generic-aware="com.annimon.stream.iterator.PrimitiveIterator.OfLong" jni-extends="Lcom/annimon/stream/iterator/PrimitiveIterator$OfLong;" final="false" name="LongGenerate" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/LongGenerate;">
      <constructor deprecated="not deprecated" final="false" name="LongGenerate" jni-signature="(Lcom/annimon/stream/function/LongSupplier;)V" bridge="false" static="false" type="com.annimon.stream.operator.LongGenerate" synthetic="false" visibility="public">
        <parameter name="supplier" type="com.annimon.stream.function.LongSupplier" jni-type="Lcom/annimon/stream/function/LongSupplier;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="hasNext" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextLong" jni-signature="()J" bridge="false" native="false" return="long" jni-return="J" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.PrimitiveIterator.OfLong" extends-generic-aware="com.annimon.stream.iterator.PrimitiveIterator.OfLong" jni-extends="Lcom/annimon/stream/iterator/PrimitiveIterator$OfLong;" final="false" name="LongIterate" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/LongIterate;">
      <constructor deprecated="not deprecated" final="false" name="LongIterate" jni-signature="(JLcom/annimon/stream/function/LongUnaryOperator;)V" bridge="false" static="false" type="com.annimon.stream.operator.LongIterate" synthetic="false" visibility="public">
        <parameter name="seed" type="long" jni-type="J"></parameter>
        <parameter name="f" type="com.annimon.stream.function.LongUnaryOperator" jni-type="Lcom/annimon/stream/function/LongUnaryOperator;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="hasNext" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextLong" jni-signature="()J" bridge="false" native="false" return="long" jni-return="J" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.PrimitiveIterator.OfLong" extends-generic-aware="com.annimon.stream.iterator.PrimitiveIterator.OfLong" jni-extends="Lcom/annimon/stream/iterator/PrimitiveIterator$OfLong;" final="false" name="LongLimit" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/LongLimit;">
      <constructor deprecated="not deprecated" final="false" name="LongLimit" jni-signature="(Lcom/annimon/stream/iterator/PrimitiveIterator$OfLong;J)V" bridge="false" static="false" type="com.annimon.stream.operator.LongLimit" synthetic="false" visibility="public">
        <parameter name="iterator" type="com.annimon.stream.iterator.PrimitiveIterator.OfLong" jni-type="Lcom/annimon/stream/iterator/PrimitiveIterator$OfLong;"></parameter>
        <parameter name="maxSize" type="long" jni-type="J"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="hasNext" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextLong" jni-signature="()J" bridge="false" native="false" return="long" jni-return="J" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.PrimitiveIterator.OfLong" extends-generic-aware="com.annimon.stream.iterator.PrimitiveIterator.OfLong" jni-extends="Lcom/annimon/stream/iterator/PrimitiveIterator$OfLong;" final="false" name="LongMap" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/LongMap;">
      <constructor deprecated="not deprecated" final="false" name="LongMap" jni-signature="(Lcom/annimon/stream/iterator/PrimitiveIterator$OfLong;Lcom/annimon/stream/function/LongUnaryOperator;)V" bridge="false" static="false" type="com.annimon.stream.operator.LongMap" synthetic="false" visibility="public">
        <parameter name="iterator" type="com.annimon.stream.iterator.PrimitiveIterator.OfLong" jni-type="Lcom/annimon/stream/iterator/PrimitiveIterator$OfLong;"></parameter>
        <parameter name="mapper" type="com.annimon.stream.function.LongUnaryOperator" jni-type="Lcom/annimon/stream/function/LongUnaryOperator;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="hasNext" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextLong" jni-signature="()J" bridge="false" native="false" return="long" jni-return="J" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.PrimitiveIterator.OfLong" extends-generic-aware="com.annimon.stream.iterator.PrimitiveIterator.OfLong" jni-extends="Lcom/annimon/stream/iterator/PrimitiveIterator$OfLong;" final="false" name="LongMapIndexed" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/LongMapIndexed;">
      <constructor deprecated="not deprecated" final="false" name="LongMapIndexed" jni-signature="(Lcom/annimon/stream/iterator/PrimitiveIndexedIterator$OfLong;Lcom/annimon/stream/function/IndexedLongUnaryOperator;)V" bridge="false" static="false" type="com.annimon.stream.operator.LongMapIndexed" synthetic="false" visibility="public">
        <parameter name="iterator" type="com.annimon.stream.iterator.PrimitiveIndexedIterator.OfLong" jni-type="Lcom/annimon/stream/iterator/PrimitiveIndexedIterator$OfLong;"></parameter>
        <parameter name="mapper" type="com.annimon.stream.function.IndexedLongUnaryOperator" jni-type="Lcom/annimon/stream/function/IndexedLongUnaryOperator;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="hasNext" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextLong" jni-signature="()J" bridge="false" native="false" return="long" jni-return="J" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.PrimitiveIterator.OfDouble" extends-generic-aware="com.annimon.stream.iterator.PrimitiveIterator.OfDouble" jni-extends="Lcom/annimon/stream/iterator/PrimitiveIterator$OfDouble;" final="false" name="LongMapToDouble" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/LongMapToDouble;">
      <constructor deprecated="not deprecated" final="false" name="LongMapToDouble" jni-signature="(Lcom/annimon/stream/iterator/PrimitiveIterator$OfLong;Lcom/annimon/stream/function/LongToDoubleFunction;)V" bridge="false" static="false" type="com.annimon.stream.operator.LongMapToDouble" synthetic="false" visibility="public">
        <parameter name="iterator" type="com.annimon.stream.iterator.PrimitiveIterator.OfLong" jni-type="Lcom/annimon/stream/iterator/PrimitiveIterator$OfLong;"></parameter>
        <parameter name="mapper" type="com.annimon.stream.function.LongToDoubleFunction" jni-type="Lcom/annimon/stream/function/LongToDoubleFunction;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="hasNext" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextDouble" jni-signature="()D" bridge="false" native="false" return="double" jni-return="D" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.PrimitiveIterator.OfInt" extends-generic-aware="com.annimon.stream.iterator.PrimitiveIterator.OfInt" jni-extends="Lcom/annimon/stream/iterator/PrimitiveIterator$OfInt;" final="false" name="LongMapToInt" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/LongMapToInt;">
      <constructor deprecated="not deprecated" final="false" name="LongMapToInt" jni-signature="(Lcom/annimon/stream/iterator/PrimitiveIterator$OfLong;Lcom/annimon/stream/function/LongToIntFunction;)V" bridge="false" static="false" type="com.annimon.stream.operator.LongMapToInt" synthetic="false" visibility="public">
        <parameter name="iterator" type="com.annimon.stream.iterator.PrimitiveIterator.OfLong" jni-type="Lcom/annimon/stream/iterator/PrimitiveIterator$OfLong;"></parameter>
        <parameter name="mapper" type="com.annimon.stream.function.LongToIntFunction" jni-type="Lcom/annimon/stream/function/LongToIntFunction;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="hasNext" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextInt" jni-signature="()I" bridge="false" native="false" return="int" jni-return="I" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.LsaIterator" extends-generic-aware="com.annimon.stream.iterator.LsaIterator&lt;R&gt;" jni-extends="Lcom/annimon/stream/iterator/LsaIterator;" final="false" name="LongMapToObj" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/LongMapToObj;">
      <typeParameters>
        <typeParameter name="R" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
      </typeParameters>
      <constructor deprecated="not deprecated" final="false" name="LongMapToObj" jni-signature="(Lcom/annimon/stream/iterator/PrimitiveIterator$OfLong;Lcom/annimon/stream/function/LongFunction;)V" bridge="false" static="false" type="com.annimon.stream.operator.LongMapToObj" synthetic="false" visibility="public">
        <parameter name="iterator" type="com.annimon.stream.iterator.PrimitiveIterator.OfLong" jni-type="Lcom/annimon/stream/iterator/PrimitiveIterator$OfLong;"></parameter>
        <parameter name="mapper" type="com.annimon.stream.function.LongFunction&lt;? extends R&gt;" jni-type="Lcom/annimon/stream/function/LongFunction&lt;+TR;&gt;;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="hasNext" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextIteration" jni-signature="()Ljava/lang/Object;" bridge="false" native="false" return="R" jni-return="TR;" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.PrimitiveIterator.OfLong" extends-generic-aware="com.annimon.stream.iterator.PrimitiveIterator.OfLong" jni-extends="Lcom/annimon/stream/iterator/PrimitiveIterator$OfLong;" final="false" name="LongPeek" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/LongPeek;">
      <constructor deprecated="not deprecated" final="false" name="LongPeek" jni-signature="(Lcom/annimon/stream/iterator/PrimitiveIterator$OfLong;Lcom/annimon/stream/function/LongConsumer;)V" bridge="false" static="false" type="com.annimon.stream.operator.LongPeek" synthetic="false" visibility="public">
        <parameter name="iterator" type="com.annimon.stream.iterator.PrimitiveIterator.OfLong" jni-type="Lcom/annimon/stream/iterator/PrimitiveIterator$OfLong;"></parameter>
        <parameter name="action" type="com.annimon.stream.function.LongConsumer" jni-type="Lcom/annimon/stream/function/LongConsumer;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="hasNext" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextLong" jni-signature="()J" bridge="false" native="false" return="long" jni-return="J" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.PrimitiveIterator.OfLong" extends-generic-aware="com.annimon.stream.iterator.PrimitiveIterator.OfLong" jni-extends="Lcom/annimon/stream/iterator/PrimitiveIterator$OfLong;" final="false" name="LongRangeClosed" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/LongRangeClosed;">
      <constructor deprecated="not deprecated" final="false" name="LongRangeClosed" jni-signature="(JJ)V" bridge="false" static="false" type="com.annimon.stream.operator.LongRangeClosed" synthetic="false" visibility="public">
        <parameter name="startInclusive" type="long" jni-type="J"></parameter>
        <parameter name="endInclusive" type="long" jni-type="J"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="hasNext" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextLong" jni-signature="()J" bridge="false" native="false" return="long" jni-return="J" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.PrimitiveIterator.OfLong" extends-generic-aware="com.annimon.stream.iterator.PrimitiveIterator.OfLong" jni-extends="Lcom/annimon/stream/iterator/PrimitiveIterator$OfLong;" final="false" name="LongSample" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/LongSample;">
      <constructor deprecated="not deprecated" final="false" name="LongSample" jni-signature="(Lcom/annimon/stream/iterator/PrimitiveIterator$OfLong;I)V" bridge="false" static="false" type="com.annimon.stream.operator.LongSample" synthetic="false" visibility="public">
        <parameter name="iterator" type="com.annimon.stream.iterator.PrimitiveIterator.OfLong" jni-type="Lcom/annimon/stream/iterator/PrimitiveIterator$OfLong;"></parameter>
        <parameter name="stepWidth" type="int" jni-type="I"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="hasNext" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextLong" jni-signature="()J" bridge="false" native="false" return="long" jni-return="J" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.PrimitiveExtIterator.OfLong" extends-generic-aware="com.annimon.stream.iterator.PrimitiveExtIterator.OfLong" jni-extends="Lcom/annimon/stream/iterator/PrimitiveExtIterator$OfLong;" final="false" name="LongScan" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/LongScan;">
      <constructor deprecated="not deprecated" final="false" name="LongScan" jni-signature="(Lcom/annimon/stream/iterator/PrimitiveIterator$OfLong;Lcom/annimon/stream/function/LongBinaryOperator;)V" bridge="false" static="false" type="com.annimon.stream.operator.LongScan" synthetic="false" visibility="public">
        <parameter name="iterator" type="com.annimon.stream.iterator.PrimitiveIterator.OfLong" jni-type="Lcom/annimon/stream/iterator/PrimitiveIterator$OfLong;"></parameter>
        <parameter name="accumulator" type="com.annimon.stream.function.LongBinaryOperator" jni-type="Lcom/annimon/stream/function/LongBinaryOperator;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextIteration" jni-signature="()V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="protected"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.PrimitiveExtIterator.OfLong" extends-generic-aware="com.annimon.stream.iterator.PrimitiveExtIterator.OfLong" jni-extends="Lcom/annimon/stream/iterator/PrimitiveExtIterator$OfLong;" final="false" name="LongScanIdentity" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/LongScanIdentity;">
      <constructor deprecated="not deprecated" final="false" name="LongScanIdentity" jni-signature="(Lcom/annimon/stream/iterator/PrimitiveIterator$OfLong;JLcom/annimon/stream/function/LongBinaryOperator;)V" bridge="false" static="false" type="com.annimon.stream.operator.LongScanIdentity" synthetic="false" visibility="public">
        <parameter name="iterator" type="com.annimon.stream.iterator.PrimitiveIterator.OfLong" jni-type="Lcom/annimon/stream/iterator/PrimitiveIterator$OfLong;"></parameter>
        <parameter name="identity" type="long" jni-type="J"></parameter>
        <parameter name="accumulator" type="com.annimon.stream.function.LongBinaryOperator" jni-type="Lcom/annimon/stream/function/LongBinaryOperator;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextIteration" jni-signature="()V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="protected"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.PrimitiveIterator.OfLong" extends-generic-aware="com.annimon.stream.iterator.PrimitiveIterator.OfLong" jni-extends="Lcom/annimon/stream/iterator/PrimitiveIterator$OfLong;" final="false" name="LongSkip" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/LongSkip;">
      <constructor deprecated="not deprecated" final="false" name="LongSkip" jni-signature="(Lcom/annimon/stream/iterator/PrimitiveIterator$OfLong;J)V" bridge="false" static="false" type="com.annimon.stream.operator.LongSkip" synthetic="false" visibility="public">
        <parameter name="iterator" type="com.annimon.stream.iterator.PrimitiveIterator.OfLong" jni-type="Lcom/annimon/stream/iterator/PrimitiveIterator$OfLong;"></parameter>
        <parameter name="n" type="long" jni-type="J"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="hasNext" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextLong" jni-signature="()J" bridge="false" native="false" return="long" jni-return="J" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.PrimitiveExtIterator.OfLong" extends-generic-aware="com.annimon.stream.iterator.PrimitiveExtIterator.OfLong" jni-extends="Lcom/annimon/stream/iterator/PrimitiveExtIterator$OfLong;" final="false" name="LongSorted" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/LongSorted;">
      <constructor deprecated="not deprecated" final="false" name="LongSorted" jni-signature="(Lcom/annimon/stream/iterator/PrimitiveIterator$OfLong;)V" bridge="false" static="false" type="com.annimon.stream.operator.LongSorted" synthetic="false" visibility="public">
        <parameter name="iterator" type="com.annimon.stream.iterator.PrimitiveIterator.OfLong" jni-type="Lcom/annimon/stream/iterator/PrimitiveIterator$OfLong;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextIteration" jni-signature="()V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="protected"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.PrimitiveExtIterator.OfLong" extends-generic-aware="com.annimon.stream.iterator.PrimitiveExtIterator.OfLong" jni-extends="Lcom/annimon/stream/iterator/PrimitiveExtIterator$OfLong;" final="false" name="LongTakeUntil" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/LongTakeUntil;">
      <constructor deprecated="not deprecated" final="false" name="LongTakeUntil" jni-signature="(Lcom/annimon/stream/iterator/PrimitiveIterator$OfLong;Lcom/annimon/stream/function/LongPredicate;)V" bridge="false" static="false" type="com.annimon.stream.operator.LongTakeUntil" synthetic="false" visibility="public">
        <parameter name="iterator" type="com.annimon.stream.iterator.PrimitiveIterator.OfLong" jni-type="Lcom/annimon/stream/iterator/PrimitiveIterator$OfLong;"></parameter>
        <parameter name="stopPredicate" type="com.annimon.stream.function.LongPredicate" jni-type="Lcom/annimon/stream/function/LongPredicate;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextIteration" jni-signature="()V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="protected"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.PrimitiveExtIterator.OfLong" extends-generic-aware="com.annimon.stream.iterator.PrimitiveExtIterator.OfLong" jni-extends="Lcom/annimon/stream/iterator/PrimitiveExtIterator$OfLong;" final="false" name="LongTakeWhile" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/LongTakeWhile;">
      <constructor deprecated="not deprecated" final="false" name="LongTakeWhile" jni-signature="(Lcom/annimon/stream/iterator/PrimitiveIterator$OfLong;Lcom/annimon/stream/function/LongPredicate;)V" bridge="false" static="false" type="com.annimon.stream.operator.LongTakeWhile" synthetic="false" visibility="public">
        <parameter name="iterator" type="com.annimon.stream.iterator.PrimitiveIterator.OfLong" jni-type="Lcom/annimon/stream/iterator/PrimitiveIterator$OfLong;"></parameter>
        <parameter name="predicate" type="com.annimon.stream.function.LongPredicate" jni-type="Lcom/annimon/stream/function/LongPredicate;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextIteration" jni-signature="()V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="protected"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.LsaIterator" extends-generic-aware="com.annimon.stream.iterator.LsaIterator&lt;T&gt;" jni-extends="Lcom/annimon/stream/iterator/LsaIterator;" final="false" name="ObjArray" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/ObjArray;">
      <typeParameters>
        <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
      </typeParameters>
      <constructor deprecated="not deprecated" final="false" name="ObjArray" jni-signature="([Ljava/lang/Object;)V" bridge="false" static="false" type="com.annimon.stream.operator.ObjArray" synthetic="false" visibility="public">
        <parameter name="elements" type="T[]" jni-type="[TT;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="hasNext" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextIteration" jni-signature="()Ljava/lang/Object;" bridge="false" native="false" return="T" jni-return="TT;" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.LsaIterator" extends-generic-aware="com.annimon.stream.iterator.LsaIterator&lt;java.util.List&lt;T&gt;&gt;" jni-extends="Lcom/annimon/stream/iterator/LsaIterator;" final="false" name="ObjChunkBy" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/ObjChunkBy;">
      <typeParameters>
        <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        <typeParameter name="K" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
      </typeParameters>
      <constructor deprecated="not deprecated" final="false" name="ObjChunkBy" jni-signature="(Ljava/util/Iterator;Lcom/annimon/stream/function/Function;)V" bridge="false" static="false" type="com.annimon.stream.operator.ObjChunkBy" synthetic="false" visibility="public">
        <parameter name="iterator" type="java.util.Iterator&lt;? extends T&gt;" jni-type="Ljava/util/Iterator&lt;+TT;&gt;;"></parameter>
        <parameter name="classifier" type="com.annimon.stream.function.Function&lt;? super T, ? extends K&gt;" jni-type="Lcom/annimon/stream/function/Function&lt;-TT;+TK;&gt;;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="hasNext" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextIteration" jni-signature="()Ljava/util/List;" bridge="false" native="false" return="java.util.List&lt;T&gt;" jni-return="Ljava/util/List&lt;TT;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public" managedReturn="Java.Lang.Object" managedType="Java.Lang.Object"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.LsaExtIterator" extends-generic-aware="com.annimon.stream.iterator.LsaExtIterator&lt;T&gt;" jni-extends="Lcom/annimon/stream/iterator/LsaExtIterator;" final="false" name="ObjConcat" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/ObjConcat;">
      <typeParameters>
        <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
      </typeParameters>
      <constructor deprecated="not deprecated" final="false" name="ObjConcat" jni-signature="(Ljava/util/Iterator;Ljava/util/Iterator;)V" bridge="false" static="false" type="com.annimon.stream.operator.ObjConcat" synthetic="false" visibility="public">
        <parameter name="iterator1" type="java.util.Iterator&lt;? extends T&gt;" jni-type="Ljava/util/Iterator&lt;+TT;&gt;;"></parameter>
        <parameter name="iterator2" type="java.util.Iterator&lt;? extends T&gt;" jni-type="Ljava/util/Iterator&lt;+TT;&gt;;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextIteration" jni-signature="()V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="protected"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.LsaExtIterator" extends-generic-aware="com.annimon.stream.iterator.LsaExtIterator&lt;T&gt;" jni-extends="Lcom/annimon/stream/iterator/LsaExtIterator;" final="false" name="ObjDistinct" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/ObjDistinct;">
      <typeParameters>
        <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
      </typeParameters>
      <constructor deprecated="not deprecated" final="false" name="ObjDistinct" jni-signature="(Ljava/util/Iterator;)V" bridge="false" static="false" type="com.annimon.stream.operator.ObjDistinct" synthetic="false" visibility="public">
        <parameter name="iterator" type="java.util.Iterator&lt;? extends T&gt;" jni-type="Ljava/util/Iterator&lt;+TT;&gt;;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextIteration" jni-signature="()V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="protected"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.LsaExtIterator" extends-generic-aware="com.annimon.stream.iterator.LsaExtIterator&lt;T&gt;" jni-extends="Lcom/annimon/stream/iterator/LsaExtIterator;" final="false" name="ObjDistinctBy" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/ObjDistinctBy;">
      <typeParameters>
        <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        <typeParameter name="K" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
      </typeParameters>
      <constructor deprecated="not deprecated" final="false" name="ObjDistinctBy" jni-signature="(Ljava/util/Iterator;Lcom/annimon/stream/function/Function;)V" bridge="false" static="false" type="com.annimon.stream.operator.ObjDistinctBy" synthetic="false" visibility="public">
        <parameter name="iterator" type="java.util.Iterator&lt;? extends T&gt;" jni-type="Ljava/util/Iterator&lt;+TT;&gt;;"></parameter>
        <parameter name="classifier" type="com.annimon.stream.function.Function&lt;? super T, ? extends K&gt;" jni-type="Lcom/annimon/stream/function/Function&lt;-TT;+TK;&gt;;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextIteration" jni-signature="()V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="protected"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.LsaExtIterator" extends-generic-aware="com.annimon.stream.iterator.LsaExtIterator&lt;T&gt;" jni-extends="Lcom/annimon/stream/iterator/LsaExtIterator;" final="false" name="ObjDropWhile" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/ObjDropWhile;">
      <typeParameters>
        <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
      </typeParameters>
      <constructor deprecated="not deprecated" final="false" name="ObjDropWhile" jni-signature="(Ljava/util/Iterator;Lcom/annimon/stream/function/Predicate;)V" bridge="false" static="false" type="com.annimon.stream.operator.ObjDropWhile" synthetic="false" visibility="public">
        <parameter name="iterator" type="java.util.Iterator&lt;? extends T&gt;" jni-type="Ljava/util/Iterator&lt;+TT;&gt;;"></parameter>
        <parameter name="predicate" type="com.annimon.stream.function.Predicate&lt;? super T&gt;" jni-type="Lcom/annimon/stream/function/Predicate&lt;-TT;&gt;;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextIteration" jni-signature="()V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="protected"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.LsaExtIterator" extends-generic-aware="com.annimon.stream.iterator.LsaExtIterator&lt;T&gt;" jni-extends="Lcom/annimon/stream/iterator/LsaExtIterator;" final="false" name="ObjDropWhileIndexed" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/ObjDropWhileIndexed;">
      <typeParameters>
        <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
      </typeParameters>
      <constructor deprecated="not deprecated" final="false" name="ObjDropWhileIndexed" jni-signature="(Lcom/annimon/stream/iterator/IndexedIterator;Lcom/annimon/stream/function/IndexedPredicate;)V" bridge="false" static="false" type="com.annimon.stream.operator.ObjDropWhileIndexed" synthetic="false" visibility="public">
        <parameter name="iterator" type="com.annimon.stream.iterator.IndexedIterator&lt;? extends T&gt;" jni-type="Lcom/annimon/stream/iterator/IndexedIterator&lt;+TT;&gt;;"></parameter>
        <parameter name="predicate" type="com.annimon.stream.function.IndexedPredicate&lt;? super T&gt;" jni-type="Lcom/annimon/stream/function/IndexedPredicate&lt;-TT;&gt;;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextIteration" jni-signature="()V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="protected"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="false" name="ObjFilter" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/ObjFilter;">
      <implements name="java.util.Iterator" name-generic-aware="java.util.Iterator&lt;T&gt;" jni-type="Ljava/util/Iterator&lt;TT;&gt;;"></implements>
      <typeParameters>
        <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
      </typeParameters>
      <constructor deprecated="not deprecated" final="false" name="ObjFilter" jni-signature="(Ljava/util/Iterator;Lcom/annimon/stream/function/Predicate;)V" bridge="false" static="false" type="com.annimon.stream.operator.ObjFilter" synthetic="false" visibility="public">
        <parameter name="iterator" type="java.util.Iterator&lt;? extends T&gt;" jni-type="Ljava/util/Iterator&lt;+TT;&gt;;"></parameter>
        <parameter name="predicate" type="com.annimon.stream.function.Predicate&lt;? super T&gt;" jni-type="Lcom/annimon/stream/function/Predicate&lt;-TT;&gt;;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="hasNext" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="next" jni-signature="()Ljava/lang/Object;" bridge="false" native="false" return="T" jni-return="TT;" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="remove" jni-signature="()V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="false" name="ObjFilterIndexed" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/ObjFilterIndexed;">
      <implements name="java.util.Iterator" name-generic-aware="java.util.Iterator&lt;T&gt;" jni-type="Ljava/util/Iterator&lt;TT;&gt;;"></implements>
      <typeParameters>
        <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
      </typeParameters>
      <constructor deprecated="not deprecated" final="false" name="ObjFilterIndexed" jni-signature="(Lcom/annimon/stream/iterator/IndexedIterator;Lcom/annimon/stream/function/IndexedPredicate;)V" bridge="false" static="false" type="com.annimon.stream.operator.ObjFilterIndexed" synthetic="false" visibility="public">
        <parameter name="iterator" type="com.annimon.stream.iterator.IndexedIterator&lt;? extends T&gt;" jni-type="Lcom/annimon/stream/iterator/IndexedIterator&lt;+TT;&gt;;"></parameter>
        <parameter name="predicate" type="com.annimon.stream.function.IndexedPredicate&lt;? super T&gt;" jni-type="Lcom/annimon/stream/function/IndexedPredicate&lt;-TT;&gt;;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="hasNext" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="next" jni-signature="()Ljava/lang/Object;" bridge="false" native="false" return="T" jni-return="TT;" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="remove" jni-signature="()V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.LsaExtIterator" extends-generic-aware="com.annimon.stream.iterator.LsaExtIterator&lt;R&gt;" jni-extends="Lcom/annimon/stream/iterator/LsaExtIterator;" final="false" name="ObjFlatMap" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/ObjFlatMap;">
      <typeParameters>
        <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        <typeParameter name="R" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
      </typeParameters>
      <constructor deprecated="not deprecated" final="false" name="ObjFlatMap" jni-signature="(Ljava/util/Iterator;Lcom/annimon/stream/function/Function;)V" bridge="false" static="false" type="com.annimon.stream.operator.ObjFlatMap" synthetic="false" visibility="public">
        <parameter name="iterator" type="java.util.Iterator&lt;? extends T&gt;" jni-type="Ljava/util/Iterator&lt;+TT;&gt;;"></parameter>
        <parameter name="mapper" type="com.annimon.stream.function.Function&lt;? super T, ? extends com.annimon.stream.Stream&lt;? extends R&gt;&gt;" jni-type="Lcom/annimon/stream/function/Function&lt;-TT;+Lcom/annimon/stream/Stream&lt;+TR;&gt;;&gt;;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextIteration" jni-signature="()V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="protected"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.PrimitiveExtIterator.OfDouble" extends-generic-aware="com.annimon.stream.iterator.PrimitiveExtIterator.OfDouble" jni-extends="Lcom/annimon/stream/iterator/PrimitiveExtIterator$OfDouble;" final="false" name="ObjFlatMapToDouble" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/ObjFlatMapToDouble;">
      <typeParameters>
        <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
      </typeParameters>
      <constructor deprecated="not deprecated" final="false" name="ObjFlatMapToDouble" jni-signature="(Ljava/util/Iterator;Lcom/annimon/stream/function/Function;)V" bridge="false" static="false" type="com.annimon.stream.operator.ObjFlatMapToDouble" synthetic="false" visibility="public">
        <parameter name="iterator" type="java.util.Iterator&lt;? extends T&gt;" jni-type="Ljava/util/Iterator&lt;+TT;&gt;;"></parameter>
        <parameter name="mapper" type="com.annimon.stream.function.Function&lt;? super T, ? extends com.annimon.stream.DoubleStream&gt;" jni-type="Lcom/annimon/stream/function/Function&lt;-TT;+Lcom/annimon/stream/DoubleStream;&gt;;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextIteration" jni-signature="()V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="protected"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.PrimitiveExtIterator.OfInt" extends-generic-aware="com.annimon.stream.iterator.PrimitiveExtIterator.OfInt" jni-extends="Lcom/annimon/stream/iterator/PrimitiveExtIterator$OfInt;" final="false" name="ObjFlatMapToInt" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/ObjFlatMapToInt;">
      <typeParameters>
        <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
      </typeParameters>
      <constructor deprecated="not deprecated" final="false" name="ObjFlatMapToInt" jni-signature="(Ljava/util/Iterator;Lcom/annimon/stream/function/Function;)V" bridge="false" static="false" type="com.annimon.stream.operator.ObjFlatMapToInt" synthetic="false" visibility="public">
        <parameter name="iterator" type="java.util.Iterator&lt;? extends T&gt;" jni-type="Ljava/util/Iterator&lt;+TT;&gt;;"></parameter>
        <parameter name="mapper" type="com.annimon.stream.function.Function&lt;? super T, ? extends com.annimon.stream.IntStream&gt;" jni-type="Lcom/annimon/stream/function/Function&lt;-TT;+Lcom/annimon/stream/IntStream;&gt;;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextIteration" jni-signature="()V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="protected"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.PrimitiveExtIterator.OfLong" extends-generic-aware="com.annimon.stream.iterator.PrimitiveExtIterator.OfLong" jni-extends="Lcom/annimon/stream/iterator/PrimitiveExtIterator$OfLong;" final="false" name="ObjFlatMapToLong" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/ObjFlatMapToLong;">
      <typeParameters>
        <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
      </typeParameters>
      <constructor deprecated="not deprecated" final="false" name="ObjFlatMapToLong" jni-signature="(Ljava/util/Iterator;Lcom/annimon/stream/function/Function;)V" bridge="false" static="false" type="com.annimon.stream.operator.ObjFlatMapToLong" synthetic="false" visibility="public">
        <parameter name="iterator" type="java.util.Iterator&lt;? extends T&gt;" jni-type="Ljava/util/Iterator&lt;+TT;&gt;;"></parameter>
        <parameter name="mapper" type="com.annimon.stream.function.Function&lt;? super T, ? extends com.annimon.stream.LongStream&gt;" jni-type="Lcom/annimon/stream/function/Function&lt;-TT;+Lcom/annimon/stream/LongStream;&gt;;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextIteration" jni-signature="()V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="protected"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.LsaIterator" extends-generic-aware="com.annimon.stream.iterator.LsaIterator&lt;T&gt;" jni-extends="Lcom/annimon/stream/iterator/LsaIterator;" final="false" name="ObjGenerate" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/ObjGenerate;">
      <typeParameters>
        <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
      </typeParameters>
      <constructor deprecated="not deprecated" final="false" name="ObjGenerate" jni-signature="(Lcom/annimon/stream/function/Supplier;)V" bridge="false" static="false" type="com.annimon.stream.operator.ObjGenerate" synthetic="false" visibility="public">
        <parameter name="supplier" type="com.annimon.stream.function.Supplier&lt;T&gt;" jni-type="Lcom/annimon/stream/function/Supplier&lt;TT;&gt;;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="hasNext" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextIteration" jni-signature="()Ljava/lang/Object;" bridge="false" native="false" return="T" jni-return="TT;" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.LsaIterator" extends-generic-aware="com.annimon.stream.iterator.LsaIterator&lt;T&gt;" jni-extends="Lcom/annimon/stream/iterator/LsaIterator;" final="false" name="ObjIterate" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/ObjIterate;">
      <typeParameters>
        <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
      </typeParameters>
      <constructor deprecated="not deprecated" final="false" name="ObjIterate" jni-signature="(Ljava/lang/Object;Lcom/annimon/stream/function/UnaryOperator;)V" bridge="false" static="false" type="com.annimon.stream.operator.ObjIterate" synthetic="false" visibility="public">
        <parameter name="seed" type="T" jni-type="TT;"></parameter>
        <parameter name="op" type="com.annimon.stream.function.UnaryOperator&lt;T&gt;" jni-type="Lcom/annimon/stream/function/UnaryOperator&lt;TT;&gt;;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="hasNext" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextIteration" jni-signature="()Ljava/lang/Object;" bridge="false" native="false" return="T" jni-return="TT;" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.LsaIterator" extends-generic-aware="com.annimon.stream.iterator.LsaIterator&lt;T&gt;" jni-extends="Lcom/annimon/stream/iterator/LsaIterator;" final="false" name="ObjLimit" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/ObjLimit;">
      <typeParameters>
        <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
      </typeParameters>
      <constructor deprecated="not deprecated" final="false" name="ObjLimit" jni-signature="(Ljava/util/Iterator;J)V" bridge="false" static="false" type="com.annimon.stream.operator.ObjLimit" synthetic="false" visibility="public">
        <parameter name="iterator" type="java.util.Iterator&lt;? extends T&gt;" jni-type="Ljava/util/Iterator&lt;+TT;&gt;;"></parameter>
        <parameter name="maxSize" type="long" jni-type="J"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="hasNext" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextIteration" jni-signature="()Ljava/lang/Object;" bridge="false" native="false" return="T" jni-return="TT;" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.LsaIterator" extends-generic-aware="com.annimon.stream.iterator.LsaIterator&lt;R&gt;" jni-extends="Lcom/annimon/stream/iterator/LsaIterator;" final="false" name="ObjMap" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/ObjMap;">
      <typeParameters>
        <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        <typeParameter name="R" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
      </typeParameters>
      <constructor deprecated="not deprecated" final="false" name="ObjMap" jni-signature="(Ljava/util/Iterator;Lcom/annimon/stream/function/Function;)V" bridge="false" static="false" type="com.annimon.stream.operator.ObjMap" synthetic="false" visibility="public">
        <parameter name="iterator" type="java.util.Iterator&lt;? extends T&gt;" jni-type="Ljava/util/Iterator&lt;+TT;&gt;;"></parameter>
        <parameter name="mapper" type="com.annimon.stream.function.Function&lt;? super T, ? extends R&gt;" jni-type="Lcom/annimon/stream/function/Function&lt;-TT;+TR;&gt;;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="hasNext" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextIteration" jni-signature="()Ljava/lang/Object;" bridge="false" native="false" return="R" jni-return="TR;" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.LsaIterator" extends-generic-aware="com.annimon.stream.iterator.LsaIterator&lt;R&gt;" jni-extends="Lcom/annimon/stream/iterator/LsaIterator;" final="false" name="ObjMapIndexed" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/ObjMapIndexed;">
      <typeParameters>
        <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        <typeParameter name="R" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
      </typeParameters>
      <constructor deprecated="not deprecated" final="false" name="ObjMapIndexed" jni-signature="(Lcom/annimon/stream/iterator/IndexedIterator;Lcom/annimon/stream/function/IndexedFunction;)V" bridge="false" static="false" type="com.annimon.stream.operator.ObjMapIndexed" synthetic="false" visibility="public">
        <parameter name="iterator" type="com.annimon.stream.iterator.IndexedIterator&lt;? extends T&gt;" jni-type="Lcom/annimon/stream/iterator/IndexedIterator&lt;+TT;&gt;;"></parameter>
        <parameter name="mapper" type="com.annimon.stream.function.IndexedFunction&lt;? super T, ? extends R&gt;" jni-type="Lcom/annimon/stream/function/IndexedFunction&lt;-TT;+TR;&gt;;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="hasNext" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextIteration" jni-signature="()Ljava/lang/Object;" bridge="false" native="false" return="R" jni-return="TR;" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.PrimitiveIterator.OfDouble" extends-generic-aware="com.annimon.stream.iterator.PrimitiveIterator.OfDouble" jni-extends="Lcom/annimon/stream/iterator/PrimitiveIterator$OfDouble;" final="false" name="ObjMapToDouble" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/ObjMapToDouble;">
      <typeParameters>
        <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
      </typeParameters>
      <constructor deprecated="not deprecated" final="false" name="ObjMapToDouble" jni-signature="(Ljava/util/Iterator;Lcom/annimon/stream/function/ToDoubleFunction;)V" bridge="false" static="false" type="com.annimon.stream.operator.ObjMapToDouble" synthetic="false" visibility="public">
        <parameter name="iterator" type="java.util.Iterator&lt;? extends T&gt;" jni-type="Ljava/util/Iterator&lt;+TT;&gt;;"></parameter>
        <parameter name="mapper" type="com.annimon.stream.function.ToDoubleFunction&lt;? super T&gt;" jni-type="Lcom/annimon/stream/function/ToDoubleFunction&lt;-TT;&gt;;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="hasNext" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextDouble" jni-signature="()D" bridge="false" native="false" return="double" jni-return="D" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.PrimitiveIterator.OfInt" extends-generic-aware="com.annimon.stream.iterator.PrimitiveIterator.OfInt" jni-extends="Lcom/annimon/stream/iterator/PrimitiveIterator$OfInt;" final="false" name="ObjMapToInt" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/ObjMapToInt;">
      <typeParameters>
        <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
      </typeParameters>
      <constructor deprecated="not deprecated" final="false" name="ObjMapToInt" jni-signature="(Ljava/util/Iterator;Lcom/annimon/stream/function/ToIntFunction;)V" bridge="false" static="false" type="com.annimon.stream.operator.ObjMapToInt" synthetic="false" visibility="public">
        <parameter name="iterator" type="java.util.Iterator&lt;? extends T&gt;" jni-type="Ljava/util/Iterator&lt;+TT;&gt;;"></parameter>
        <parameter name="mapper" type="com.annimon.stream.function.ToIntFunction&lt;? super T&gt;" jni-type="Lcom/annimon/stream/function/ToIntFunction&lt;-TT;&gt;;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="hasNext" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextInt" jni-signature="()I" bridge="false" native="false" return="int" jni-return="I" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.PrimitiveIterator.OfLong" extends-generic-aware="com.annimon.stream.iterator.PrimitiveIterator.OfLong" jni-extends="Lcom/annimon/stream/iterator/PrimitiveIterator$OfLong;" final="false" name="ObjMapToLong" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/ObjMapToLong;">
      <typeParameters>
        <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
      </typeParameters>
      <constructor deprecated="not deprecated" final="false" name="ObjMapToLong" jni-signature="(Ljava/util/Iterator;Lcom/annimon/stream/function/ToLongFunction;)V" bridge="false" static="false" type="com.annimon.stream.operator.ObjMapToLong" synthetic="false" visibility="public">
        <parameter name="iterator" type="java.util.Iterator&lt;? extends T&gt;" jni-type="Ljava/util/Iterator&lt;+TT;&gt;;"></parameter>
        <parameter name="mapper" type="com.annimon.stream.function.ToLongFunction&lt;? super T&gt;" jni-type="Lcom/annimon/stream/function/ToLongFunction&lt;-TT;&gt;;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="hasNext" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextLong" jni-signature="()J" bridge="false" native="false" return="long" jni-return="J" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.LsaIterator" extends-generic-aware="com.annimon.stream.iterator.LsaIterator&lt;T&gt;" jni-extends="Lcom/annimon/stream/iterator/LsaIterator;" final="false" name="ObjMerge" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/ObjMerge;">
      <typeParameters>
        <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
      </typeParameters>
      <constructor deprecated="not deprecated" final="false" name="ObjMerge" jni-signature="(Ljava/util/Iterator;Ljava/util/Iterator;Lcom/annimon/stream/function/BiFunction;)V" bridge="false" static="false" type="com.annimon.stream.operator.ObjMerge" synthetic="false" visibility="public">
        <parameter name="iterator1" type="java.util.Iterator&lt;? extends T&gt;" jni-type="Ljava/util/Iterator&lt;+TT;&gt;;"></parameter>
        <parameter name="iterator2" type="java.util.Iterator&lt;? extends T&gt;" jni-type="Ljava/util/Iterator&lt;+TT;&gt;;"></parameter>
        <parameter name="selector" type="com.annimon.stream.function.BiFunction&lt;? super T, ? super T, com.annimon.stream.operator.ObjMerge.MergeResult&gt;" jni-type="Lcom/annimon/stream/function/BiFunction&lt;-TT;-TT;Lcom/annimon/stream/operator/ObjMerge$MergeResult;&gt;;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="hasNext" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextIteration" jni-signature="()Ljava/lang/Object;" bridge="false" native="false" return="T" jni-return="TT;" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" jni-extends="Ljava/lang/Object;" final="false" name="ObjMerge.1" static="true" visibility="" jni-signature="Lcom/annimon/stream/operator/ObjMerge$1;"></class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Enum" extends-generic-aware="java.lang.Enum&lt;com.annimon.stream.operator.ObjMerge.MergeResult&gt;" jni-extends="Ljava/lang/Enum;" final="true" name="ObjMerge.MergeResult" static="true" visibility="public" jni-signature="Lcom/annimon/stream/operator/ObjMerge$MergeResult;">
      <method abstract="false" deprecated="not deprecated" final="false" name="valueOf" jni-signature="(Ljava/lang/String;)Lcom/annimon/stream/operator/ObjMerge$MergeResult;" bridge="false" native="false" return="com.annimon.stream.operator.ObjMerge.MergeResult" jni-return="Lcom/annimon/stream/operator/ObjMerge$MergeResult;" static="true" synchronized="false" synthetic="false" visibility="public">
        <parameter name="name" type="java.lang.String" jni-type="Ljava/lang/String;"></parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="values" jni-signature="()[Lcom/annimon/stream/operator/ObjMerge$MergeResult;" bridge="false" native="false" return="com.annimon.stream.operator.ObjMerge.MergeResult[]" jni-return="[Lcom/annimon/stream/operator/ObjMerge$MergeResult;" static="true" synchronized="false" synthetic="false" visibility="public"></method>
      <field deprecated="not deprecated" final="true" name="TAKE_FIRST" jni-signature="Lcom/annimon/stream/operator/ObjMerge$MergeResult;" static="true" transient="false" type="com.annimon.stream.operator.ObjMerge.MergeResult" type-generic-aware="com.annimon.stream.operator.ObjMerge.MergeResult" visibility="public" volatile="false"></field>
      <field deprecated="not deprecated" final="true" name="TAKE_SECOND" jni-signature="Lcom/annimon/stream/operator/ObjMerge$MergeResult;" static="true" transient="false" type="com.annimon.stream.operator.ObjMerge.MergeResult" type-generic-aware="com.annimon.stream.operator.ObjMerge.MergeResult" visibility="public" volatile="false"></field>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.LsaIterator" extends-generic-aware="com.annimon.stream.iterator.LsaIterator&lt;T&gt;" jni-extends="Lcom/annimon/stream/iterator/LsaIterator;" final="false" name="ObjPeek" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/ObjPeek;">
      <typeParameters>
        <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
      </typeParameters>
      <constructor deprecated="not deprecated" final="false" name="ObjPeek" jni-signature="(Ljava/util/Iterator;Lcom/annimon/stream/function/Consumer;)V" bridge="false" static="false" type="com.annimon.stream.operator.ObjPeek" synthetic="false" visibility="public">
        <parameter name="iterator" type="java.util.Iterator&lt;? extends T&gt;" jni-type="Ljava/util/Iterator&lt;+TT;&gt;;"></parameter>
        <parameter name="action" type="com.annimon.stream.function.Consumer&lt;? super T&gt;" jni-type="Lcom/annimon/stream/function/Consumer&lt;-TT;&gt;;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="hasNext" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextIteration" jni-signature="()Ljava/lang/Object;" bridge="false" native="false" return="T" jni-return="TT;" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.LsaExtIterator" extends-generic-aware="com.annimon.stream.iterator.LsaExtIterator&lt;T&gt;" jni-extends="Lcom/annimon/stream/iterator/LsaExtIterator;" final="false" name="ObjScan" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/ObjScan;">
      <typeParameters>
        <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
      </typeParameters>
      <constructor deprecated="not deprecated" final="false" name="ObjScan" jni-signature="(Ljava/util/Iterator;Lcom/annimon/stream/function/BiFunction;)V" bridge="false" static="false" type="com.annimon.stream.operator.ObjScan" synthetic="false" visibility="public">
        <parameter name="iterator" type="java.util.Iterator&lt;? extends T&gt;" jni-type="Ljava/util/Iterator&lt;+TT;&gt;;"></parameter>
        <parameter name="accumulator" type="com.annimon.stream.function.BiFunction&lt;T, T, T&gt;" jni-type="Lcom/annimon/stream/function/BiFunction&lt;TT;TT;TT;&gt;;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextIteration" jni-signature="()V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="protected"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.LsaExtIterator" extends-generic-aware="com.annimon.stream.iterator.LsaExtIterator&lt;R&gt;" jni-extends="Lcom/annimon/stream/iterator/LsaExtIterator;" final="false" name="ObjScanIdentity" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/ObjScanIdentity;">
      <typeParameters>
        <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        <typeParameter name="R" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
      </typeParameters>
      <constructor deprecated="not deprecated" final="false" name="ObjScanIdentity" jni-signature="(Ljava/util/Iterator;Ljava/lang/Object;Lcom/annimon/stream/function/BiFunction;)V" bridge="false" static="false" type="com.annimon.stream.operator.ObjScanIdentity" synthetic="false" visibility="public">
        <parameter name="iterator" type="java.util.Iterator&lt;? extends T&gt;" jni-type="Ljava/util/Iterator&lt;+TT;&gt;;"></parameter>
        <parameter name="identity" type="R" jni-type="TR;"></parameter>
        <parameter name="accumulator" type="com.annimon.stream.function.BiFunction&lt;? super R, ? super T, ? extends R&gt;" jni-type="Lcom/annimon/stream/function/BiFunction&lt;-TR;-TT;+TR;&gt;;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextIteration" jni-signature="()V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="protected"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.LsaIterator" extends-generic-aware="com.annimon.stream.iterator.LsaIterator&lt;T&gt;" jni-extends="Lcom/annimon/stream/iterator/LsaIterator;" final="false" name="ObjSkip" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/ObjSkip;">
      <typeParameters>
        <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
      </typeParameters>
      <constructor deprecated="not deprecated" final="false" name="ObjSkip" jni-signature="(Ljava/util/Iterator;J)V" bridge="false" static="false" type="com.annimon.stream.operator.ObjSkip" synthetic="false" visibility="public">
        <parameter name="iterator" type="java.util.Iterator&lt;? extends T&gt;" jni-type="Ljava/util/Iterator&lt;+TT;&gt;;"></parameter>
        <parameter name="n" type="long" jni-type="J"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="hasNext" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextIteration" jni-signature="()Ljava/lang/Object;" bridge="false" native="false" return="T" jni-return="TT;" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.LsaIterator" extends-generic-aware="com.annimon.stream.iterator.LsaIterator&lt;java.util.List&lt;T&gt;&gt;" jni-extends="Lcom/annimon/stream/iterator/LsaIterator;" final="false" name="ObjSlidingWindow" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/ObjSlidingWindow;">
      <typeParameters>
        <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
      </typeParameters>
      <constructor deprecated="not deprecated" final="false" name="ObjSlidingWindow" jni-signature="(Ljava/util/Iterator;II)V" bridge="false" static="false" type="com.annimon.stream.operator.ObjSlidingWindow" synthetic="false" visibility="public">
        <parameter name="iterator" type="java.util.Iterator&lt;? extends T&gt;" jni-type="Ljava/util/Iterator&lt;+TT;&gt;;"></parameter>
        <parameter name="windowSize" type="int" jni-type="I"></parameter>
        <parameter name="stepWidth" type="int" jni-type="I"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="hasNext" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextIteration" jni-signature="()Ljava/util/List;" bridge="false" native="false" return="java.util.List&lt;T&gt;" jni-return="Ljava/util/List&lt;TT;&gt;;" static="false" synchronized="false" synthetic="false" visibility="public" managedReturn="Java.Lang.Object" managedType="Java.Lang.Object"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.LsaExtIterator" extends-generic-aware="com.annimon.stream.iterator.LsaExtIterator&lt;T&gt;" jni-extends="Lcom/annimon/stream/iterator/LsaExtIterator;" final="false" name="ObjSorted" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/ObjSorted;">
      <typeParameters>
        <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
      </typeParameters>
      <constructor deprecated="not deprecated" final="false" name="ObjSorted" jni-signature="(Ljava/util/Iterator;Ljava/util/Comparator;)V" bridge="false" static="false" type="com.annimon.stream.operator.ObjSorted" synthetic="false" visibility="public">
        <parameter name="iterator" type="java.util.Iterator&lt;? extends T&gt;" jni-type="Ljava/util/Iterator&lt;+TT;&gt;;"></parameter>
        <parameter name="comparator" type="java.util.Comparator&lt;? super T&gt;" jni-type="Ljava/util/Comparator&lt;-TT;&gt;;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextIteration" jni-signature="()V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="protected"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.LsaExtIterator" extends-generic-aware="com.annimon.stream.iterator.LsaExtIterator&lt;T&gt;" jni-extends="Lcom/annimon/stream/iterator/LsaExtIterator;" final="false" name="ObjTakeUntil" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/ObjTakeUntil;">
      <typeParameters>
        <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
      </typeParameters>
      <constructor deprecated="not deprecated" final="false" name="ObjTakeUntil" jni-signature="(Ljava/util/Iterator;Lcom/annimon/stream/function/Predicate;)V" bridge="false" static="false" type="com.annimon.stream.operator.ObjTakeUntil" synthetic="false" visibility="public">
        <parameter name="iterator" type="java.util.Iterator&lt;? extends T&gt;" jni-type="Ljava/util/Iterator&lt;+TT;&gt;;"></parameter>
        <parameter name="predicate" type="com.annimon.stream.function.Predicate&lt;? super T&gt;" jni-type="Lcom/annimon/stream/function/Predicate&lt;-TT;&gt;;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextIteration" jni-signature="()V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="protected"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.LsaExtIterator" extends-generic-aware="com.annimon.stream.iterator.LsaExtIterator&lt;T&gt;" jni-extends="Lcom/annimon/stream/iterator/LsaExtIterator;" final="false" name="ObjTakeUntilIndexed" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/ObjTakeUntilIndexed;">
      <typeParameters>
        <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
      </typeParameters>
      <constructor deprecated="not deprecated" final="false" name="ObjTakeUntilIndexed" jni-signature="(Lcom/annimon/stream/iterator/IndexedIterator;Lcom/annimon/stream/function/IndexedPredicate;)V" bridge="false" static="false" type="com.annimon.stream.operator.ObjTakeUntilIndexed" synthetic="false" visibility="public">
        <parameter name="iterator" type="com.annimon.stream.iterator.IndexedIterator&lt;? extends T&gt;" jni-type="Lcom/annimon/stream/iterator/IndexedIterator&lt;+TT;&gt;;"></parameter>
        <parameter name="predicate" type="com.annimon.stream.function.IndexedPredicate&lt;? super T&gt;" jni-type="Lcom/annimon/stream/function/IndexedPredicate&lt;-TT;&gt;;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextIteration" jni-signature="()V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="protected"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.LsaExtIterator" extends-generic-aware="com.annimon.stream.iterator.LsaExtIterator&lt;T&gt;" jni-extends="Lcom/annimon/stream/iterator/LsaExtIterator;" final="false" name="ObjTakeWhile" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/ObjTakeWhile;">
      <typeParameters>
        <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
      </typeParameters>
      <constructor deprecated="not deprecated" final="false" name="ObjTakeWhile" jni-signature="(Ljava/util/Iterator;Lcom/annimon/stream/function/Predicate;)V" bridge="false" static="false" type="com.annimon.stream.operator.ObjTakeWhile" synthetic="false" visibility="public">
        <parameter name="iterator" type="java.util.Iterator&lt;? extends T&gt;" jni-type="Ljava/util/Iterator&lt;+TT;&gt;;"></parameter>
        <parameter name="predicate" type="com.annimon.stream.function.Predicate&lt;? super T&gt;" jni-type="Lcom/annimon/stream/function/Predicate&lt;-TT;&gt;;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextIteration" jni-signature="()V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="protected"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.LsaExtIterator" extends-generic-aware="com.annimon.stream.iterator.LsaExtIterator&lt;T&gt;" jni-extends="Lcom/annimon/stream/iterator/LsaExtIterator;" final="false" name="ObjTakeWhileIndexed" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/ObjTakeWhileIndexed;">
      <typeParameters>
        <typeParameter name="T" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
      </typeParameters>
      <constructor deprecated="not deprecated" final="false" name="ObjTakeWhileIndexed" jni-signature="(Lcom/annimon/stream/iterator/IndexedIterator;Lcom/annimon/stream/function/IndexedPredicate;)V" bridge="false" static="false" type="com.annimon.stream.operator.ObjTakeWhileIndexed" synthetic="false" visibility="public">
        <parameter name="iterator" type="com.annimon.stream.iterator.IndexedIterator&lt;? extends T&gt;" jni-type="Lcom/annimon/stream/iterator/IndexedIterator&lt;+TT;&gt;;"></parameter>
        <parameter name="predicate" type="com.annimon.stream.function.IndexedPredicate&lt;? super T&gt;" jni-type="Lcom/annimon/stream/function/IndexedPredicate&lt;-TT;&gt;;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextIteration" jni-signature="()V" bridge="false" native="false" return="void" jni-return="V" static="false" synchronized="false" synthetic="false" visibility="protected"></method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="com.annimon.stream.iterator.LsaIterator" extends-generic-aware="com.annimon.stream.iterator.LsaIterator&lt;R&gt;" jni-extends="Lcom/annimon/stream/iterator/LsaIterator;" final="false" name="ObjZip" static="false" visibility="public" jni-signature="Lcom/annimon/stream/operator/ObjZip;">
      <typeParameters>
        <typeParameter name="F" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        <typeParameter name="S" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
        <typeParameter name="R" classBound="java.lang.Object" jni-classBound="Ljava/lang/Object;"></typeParameter>
      </typeParameters>
      <constructor deprecated="not deprecated" final="false" name="ObjZip" jni-signature="(Ljava/util/Iterator;Ljava/util/Iterator;Lcom/annimon/stream/function/BiFunction;)V" bridge="false" static="false" type="com.annimon.stream.operator.ObjZip" synthetic="false" visibility="public">
        <parameter name="iterator1" type="java.util.Iterator&lt;? extends F&gt;" jni-type="Ljava/util/Iterator&lt;+TF;&gt;;"></parameter>
        <parameter name="iterator2" type="java.util.Iterator&lt;? extends S&gt;" jni-type="Ljava/util/Iterator&lt;+TS;&gt;;"></parameter>
        <parameter name="combiner" type="com.annimon.stream.function.BiFunction&lt;? super F, ? super S, ? extends R&gt;" jni-type="Lcom/annimon/stream/function/BiFunction&lt;-TF;-TS;+TR;&gt;;"></parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="hasNext" jni-signature="()Z" bridge="false" native="false" return="boolean" jni-return="Z" static="false" synchronized="false" synthetic="false" visibility="public"></method>
      <method abstract="false" deprecated="not deprecated" final="false" name="nextIteration" jni-signature="()Ljava/lang/Object;" bridge="false" native="false" return="R" jni-return="TR;" static="false" synchronized="false" synthetic="false" visibility="public"></method>
    </class>
  </package>
</api>