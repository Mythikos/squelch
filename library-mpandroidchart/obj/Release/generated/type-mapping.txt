com/github/mikephil/charting/animation/ChartAnimator = MikePhil.Charting.Animation.ChartAnimator
  <init>()V = .ctor()
  <init>(Landroid/animation/ValueAnimator$AnimatorUpdateListener;)V = .ctor(Android.Animation.ValueAnimator.IAnimatorUpdateListener)
  mPhaseX = MPhaseX
  mPhaseY = MPhaseY
  getPhaseX()F = PhaseX
  setPhaseX(F)V = PhaseX
  getPhaseY()F = PhaseY
  setPhaseY(F)V = PhaseY
  animateX(I)V = AnimateX(int)
  animateX(ILcom/github/mikephil/charting/animation/Easing$EasingFunction;)V = AnimateX(int, MikePhil.Charting.Animation.Easing.IEasingFunction)
  animateX(ILcom/github/mikephil/charting/animation/Easing$EasingOption;)V = AnimateX(int, MikePhil.Charting.Animation.Easing.EasingOption)
  animateXY(II)V = AnimateXY(int, int)
  animateXY(IILcom/github/mikephil/charting/animation/Easing$EasingFunction;)V = AnimateXY(int, int, MikePhil.Charting.Animation.Easing.IEasingFunction)
  animateXY(IILcom/github/mikephil/charting/animation/Easing$EasingFunction;Lcom/github/mikephil/charting/animation/Easing$EasingFunction;)V = AnimateXY(int, int, MikePhil.Charting.Animation.Easing.IEasingFunction, MikePhil.Charting.Animation.Easing.IEasingFunction)
  animateXY(IILcom/github/mikephil/charting/animation/Easing$EasingOption;Lcom/github/mikephil/charting/animation/Easing$EasingOption;)V = AnimateXY(int, int, MikePhil.Charting.Animation.Easing.EasingOption, MikePhil.Charting.Animation.Easing.EasingOption)
  animateY(I)V = AnimateY(int)
  animateY(ILcom/github/mikephil/charting/animation/Easing$EasingFunction;)V = AnimateY(int, MikePhil.Charting.Animation.Easing.IEasingFunction)
  animateY(ILcom/github/mikephil/charting/animation/Easing$EasingOption;)V = AnimateY(int, MikePhil.Charting.Animation.Easing.EasingOption)
com/github/mikephil/charting/animation/Easing = MikePhil.Charting.Animation.Easing
  <init>()V = .ctor()
  EaseInBack = EaseInBack
  EaseInBounce = EaseInBounce
  EaseInCirc = EaseInCirc
  EaseInCubic = EaseInCubic
  EaseInElastic = EaseInElastic
  EaseInExpo = EaseInExpo
  EaseInOutBack = EaseInOutBack
  EaseInOutBounce = EaseInOutBounce
  EaseInOutCirc = EaseInOutCirc
  EaseInOutCubic = EaseInOutCubic
  EaseInOutElastic = EaseInOutElastic
  EaseInOutExpo = EaseInOutExpo
  EaseInOutQuad = EaseInOutQuad
  EaseInOutQuart = EaseInOutQuart
  EaseInOutSine = EaseInOutSine
  EaseInQuad = EaseInQuad
  EaseInQuart = EaseInQuart
  EaseInSine = EaseInSine
  EaseOutBack = EaseOutBack
  EaseOutBounce = EaseOutBounce
  EaseOutCirc = EaseOutCirc
  EaseOutCubic = EaseOutCubic
  EaseOutElastic = EaseOutElastic
  EaseOutExpo = EaseOutExpo
  EaseOutQuad = EaseOutQuad
  EaseOutQuart = EaseOutQuart
  EaseOutSine = EaseOutSine
  Linear = Linear
  getEasingFunctionFromOption(Lcom/github/mikephil/charting/animation/Easing$EasingOption;)Lcom/github/mikephil/charting/animation/Easing$EasingFunction; = GetEasingFunctionFromOption(MikePhil.Charting.Animation.Easing.EasingOption)
com/github/mikephil/charting/buffer/AbstractBuffer = MikePhil.Charting.Buffer.AbstractBuffer
  <init>(I)V = .ctor(int)
  buffer = Buffer
  index = Index
  mFrom = MFrom
  mTo = MTo
  phaseX = PhaseX
  phaseY = PhaseY
  feed(Ljava/lang/Object;)V = Feed(Java.Lang.Object)
  limitFrom(I)V = LimitFrom(int)
  limitTo(I)V = LimitTo(int)
  reset()V = Reset()
  setPhases(FF)V = SetPhases(float, float)
  size()I = Size()
com/github/mikephil/charting/buffer/BarBuffer = MikePhil.Charting.Buffer.BarBuffer
  <init>(IIZ)V = .ctor(int, int, bool)
  mBarWidth = MBarWidth
  mContainsStacks = MContainsStacks
  mDataSetCount = MDataSetCount
  mDataSetIndex = MDataSetIndex
  mInverted = MInverted
  addBar(FFFF)V = AddBar(float, float, float, float)
  feed(Lcom/github/mikephil/charting/interfaces/datasets/IBarDataSet;)V = Feed(MikePhil.Charting.Interfaces.Datasets.IBarDataSet)
  setBarWidth(F)V = SetBarWidth(float)
  setDataSet(I)V = SetDataSet(int)
  setInverted(Z)V = SetInverted(bool)
com/github/mikephil/charting/buffer/HorizontalBarBuffer = MikePhil.Charting.Buffer.HorizontalBarBuffer
  <init>(IIZ)V = .ctor(int, int, bool)
com/github/mikephil/charting/BuildConfig = MikePhil.Charting.BuildConfig
  <init>()V = .ctor()
  APPLICATION_ID = ApplicationId
  BUILD_TYPE = BuildType
  DEBUG = Debug
  FLAVOR = Flavor
  VERSION_CODE = VersionCode
  VERSION_NAME = VersionName
com/github/mikephil/charting/charts/BarChart = MikePhil.Charting.Charts.BarChart
  <init>(Landroid/content/Context;)V = .ctor(Android.Content.Context)
  <init>(Landroid/content/Context;Landroid/util/AttributeSet;)V = .ctor(Android.Content.Context, Android.Util.IAttributeSet)
  <init>(Landroid/content/Context;Landroid/util/AttributeSet;I)V = .ctor(Android.Content.Context, Android.Util.IAttributeSet, int)
  mHighlightFullBarEnabled = MHighlightFullBarEnabled
  getBarData()Lcom/github/mikephil/charting/data/BarData; = BarData
  isDrawBarShadowEnabled()Z = IsDrawBarShadowEnabled
  isDrawValueAboveBarEnabled()Z = IsDrawValueAboveBarEnabled
  isHighlightFullBarEnabled()Z = IsHighlightFullBarEnabled
  getBarBounds(Lcom/github/mikephil/charting/data/BarEntry;)Landroid/graphics/RectF; = GetBarBounds(MikePhil.Charting.Data.BarEntry)
  getBarBounds(Lcom/github/mikephil/charting/data/BarEntry;Landroid/graphics/RectF;)V = GetBarBounds(MikePhil.Charting.Data.BarEntry, Android.Graphics.RectF)
  groupBars(FFF)V = GroupBars(float, float, float)
  highlightValue(FII)V = HighlightValue(float, int, int)
  setDrawBarShadow(Z)V = SetDrawBarShadow(bool)
  setDrawValueAboveBar(Z)V = SetDrawValueAboveBar(bool)
  setFitBars(Z)V = SetFitBars(bool)
  setHighlightFullBarEnabled(Z)V = SetHighlightFullBarEnabled(bool)
com/github/mikephil/charting/charts/BarLineChartBase = MikePhil.Charting.Charts.BarLineChartBase
  <init>(Landroid/content/Context;)V = .ctor(Android.Content.Context)
  <init>(Landroid/content/Context;Landroid/util/AttributeSet;)V = .ctor(Android.Content.Context, Android.Util.IAttributeSet)
  <init>(Landroid/content/Context;Landroid/util/AttributeSet;I)V = .ctor(Android.Content.Context, Android.Util.IAttributeSet, int)
  mAutoScaleMinMaxEnabled = MAutoScaleMinMaxEnabled
  mAxisLeft = MAxisLeft
  mAxisRendererLeft = MAxisRendererLeft
  mAxisRendererRight = MAxisRendererRight
  mAxisRight = MAxisRight
  mBorderPaint = MBorderPaint
  mClipValuesToContent = MClipValuesToContent
  mDoubleTapToZoomEnabled = MDoubleTapToZoomEnabled
  mDrawBorders = MDrawBorders
  mDrawGridBackground = MDrawGridBackground
  mDrawListener = MDrawListener
  mFitScreenMatrixBuffer = MFitScreenMatrixBuffer
  mGetPositionBuffer = MGetPositionBuffer
  mGridBackgroundPaint = MGridBackgroundPaint
  mHighlightPerDragEnabled = MHighlightPerDragEnabled
  mKeepPositionOnRotation = MKeepPositionOnRotation
  mLeftAxisTransformer = MLeftAxisTransformer
  mMaxVisibleCount = MMaxVisibleCount
  mMinOffset = MMinOffset
  mOnSizeChangedBuffer = MOnSizeChangedBuffer
  mPinchZoomEnabled = MPinchZoomEnabled
  mRightAxisTransformer = MRightAxisTransformer
  mXAxisRenderer = MXAxisRenderer
  mZoomMatrixBuffer = MZoomMatrixBuffer
  posForGetHighestVisibleX = PosForGetHighestVisibleX
  posForGetLowestVisibleX = PosForGetLowestVisibleX
  isAutoScaleMinMaxEnabled()Z = AutoScaleMinMaxEnabled
  setAutoScaleMinMaxEnabled(Z)V = AutoScaleMinMaxEnabled
  getAxisLeft()Lcom/github/mikephil/charting/components/YAxis; = AxisLeft
  getAxisRight()Lcom/github/mikephil/charting/components/YAxis; = AxisRight
  isDoubleTapToZoomEnabled()Z = DoubleTapToZoomEnabled
  setDoubleTapToZoomEnabled(Z)V = DoubleTapToZoomEnabled
  isDragEnabled()Z = DragEnabled
  setDragEnabled(Z)V = DragEnabled
  isDragXEnabled()Z = DragXEnabled
  setDragXEnabled(Z)V = DragXEnabled
  isDragYEnabled()Z = DragYEnabled
  setDragYEnabled(Z)V = DragYEnabled
  getDrawListener()Lcom/github/mikephil/charting/listener/OnDrawListener; = DrawListener
  hasNoDragOffset()Z = HasNoDragOffset
  getHighestVisibleX()F = HighestVisibleX
  isHighlightPerDragEnabled()Z = HighlightPerDragEnabled
  setHighlightPerDragEnabled(Z)V = HighlightPerDragEnabled
  isAnyAxisInverted()Z = IsAnyAxisInverted
  isClipValuesToContentEnabled()Z = IsClipValuesToContentEnabled
  isDrawBordersEnabled()Z = IsDrawBordersEnabled
  isFullyZoomedOut()Z = IsFullyZoomedOut
  isPinchZoomEnabled()Z = IsPinchZoomEnabled
  isKeepPositionOnRotation()Z = KeepPositionOnRotation
  setKeepPositionOnRotation(Z)V = KeepPositionOnRotation
  getLowestVisibleX()F = LowestVisibleX
  getMaxVisibleCount()I = MaxVisibleCount
  getMinOffset()F = MinOffset
  setMinOffset(F)V = MinOffset
  getRendererLeftYAxis()Lcom/github/mikephil/charting/renderer/YAxisRenderer; = RendererLeftYAxis
  setRendererLeftYAxis(Lcom/github/mikephil/charting/renderer/YAxisRenderer;)V = RendererLeftYAxis
  getRendererRightYAxis()Lcom/github/mikephil/charting/renderer/YAxisRenderer; = RendererRightYAxis
  setRendererRightYAxis(Lcom/github/mikephil/charting/renderer/YAxisRenderer;)V = RendererRightYAxis
  getRendererXAxis()Lcom/github/mikephil/charting/renderer/XAxisRenderer; = RendererXAxis
  isScaleXEnabled()Z = ScaleXEnabled
  setScaleXEnabled(Z)V = ScaleXEnabled
  isScaleYEnabled()Z = ScaleYEnabled
  setScaleYEnabled(Z)V = ScaleYEnabled
  getVisibleXRange()F = VisibleXRange
  getYChartMax()F = YChartMax
  getYChartMin()F = YChartMin
  autoScale()V = AutoScale()
  calcMinMax()V = CalcMinMax()
  calculateLegendOffsets(Landroid/graphics/RectF;)V = CalculateLegendOffsets(Android.Graphics.RectF)
  calculateOffsets()V = CalculateOffsets()
  centerViewTo(FFLcom/github/mikephil/charting/components/YAxis$AxisDependency;)V = CenterViewTo(float, float, MikePhil.Charting.Components.YAxis.AxisDependency)
  centerViewToAnimated(FFLcom/github/mikephil/charting/components/YAxis$AxisDependency;J)V = CenterViewToAnimated(float, float, MikePhil.Charting.Components.YAxis.AxisDependency, long)
  centerViewToY(FLcom/github/mikephil/charting/components/YAxis$AxisDependency;)V = CenterViewToY(float, MikePhil.Charting.Components.YAxis.AxisDependency)
  drawGridBackground(Landroid/graphics/Canvas;)V = DrawGridBackground(Android.Graphics.Canvas)
  fitScreen()V = FitScreen()
  getAxis(Lcom/github/mikephil/charting/components/YAxis$AxisDependency;)Lcom/github/mikephil/charting/components/YAxis; = GetAxis(MikePhil.Charting.Components.YAxis.AxisDependency)
  getAxisRange(Lcom/github/mikephil/charting/components/YAxis$AxisDependency;)F = GetAxisRange(MikePhil.Charting.Components.YAxis.AxisDependency)
  getDataSetByTouchPoint(FF)Lcom/github/mikephil/charting/interfaces/datasets/IBarLineScatterCandleBubbleDataSet; = GetDataSetByTouchPoint(float, float)
  getEntryByTouchPoint(FF)Lcom/github/mikephil/charting/data/Entry; = GetEntryByTouchPoint(float, float)
  getPixelForValues(FFLcom/github/mikephil/charting/components/YAxis$AxisDependency;)Lcom/github/mikephil/charting/utils/MPPointD; = GetPixelForValues(float, float, MikePhil.Charting.Components.YAxis.AxisDependency)
  getPosition(Lcom/github/mikephil/charting/data/Entry;Lcom/github/mikephil/charting/components/YAxis$AxisDependency;)Lcom/github/mikephil/charting/utils/MPPointF; = GetPosition(MikePhil.Charting.Data.Entry, MikePhil.Charting.Components.YAxis.AxisDependency)
  getTransformer(Lcom/github/mikephil/charting/components/YAxis$AxisDependency;)Lcom/github/mikephil/charting/utils/Transformer; = GetTransformer(MikePhil.Charting.Components.YAxis.AxisDependency)
  getValuesByTouchPoint(FFLcom/github/mikephil/charting/components/YAxis$AxisDependency;)Lcom/github/mikephil/charting/utils/MPPointD; = GetValuesByTouchPoint(float, float, MikePhil.Charting.Components.YAxis.AxisDependency)
  getValuesByTouchPoint(FFLcom/github/mikephil/charting/components/YAxis$AxisDependency;Lcom/github/mikephil/charting/utils/MPPointD;)V = GetValuesByTouchPoint(float, float, MikePhil.Charting.Components.YAxis.AxisDependency, MikePhil.Charting.Util.MPPointD)
  isInverted(Lcom/github/mikephil/charting/components/YAxis$AxisDependency;)Z = IsInverted(MikePhil.Charting.Components.YAxis.AxisDependency)
  moveViewTo(FFLcom/github/mikephil/charting/components/YAxis$AxisDependency;)V = MoveViewTo(float, float, MikePhil.Charting.Components.YAxis.AxisDependency)
  moveViewToAnimated(FFLcom/github/mikephil/charting/components/YAxis$AxisDependency;J)V = MoveViewToAnimated(float, float, MikePhil.Charting.Components.YAxis.AxisDependency, long)
  moveViewToX(F)V = MoveViewToX(float)
  notifyDataSetChanged()V = NotifyDataSetChanged()
  prepareOffsetMatrix()V = PrepareOffsetMatrix()
  prepareValuePxMatrix()V = PrepareValuePxMatrix()
  resetTracking()V = ResetTracking()
  resetViewPortOffsets()V = ResetViewPortOffsets()
  resetZoom()V = ResetZoom()
  setBorderColor(I)V = SetBorderColor(int)
  setBorderWidth(F)V = SetBorderWidth(float)
  setClipValuesToContent(Z)V = SetClipValuesToContent(bool)
  setDragOffsetX(F)V = SetDragOffsetX(float)
  setDragOffsetY(F)V = SetDragOffsetY(float)
  setDrawBorders(Z)V = SetDrawBorders(bool)
  setDrawGridBackground(Z)V = SetDrawGridBackground(bool)
  setGridBackgroundColor(I)V = SetGridBackgroundColor(int)
  setMaxVisibleValueCount(I)V = SetMaxVisibleValueCount(int)
  setOnDrawListener(Lcom/github/mikephil/charting/listener/OnDrawListener;)V = SetOnDrawListener(MikePhil.Charting.Listener.IOnDrawListenerSupport)
  setPinchZoom(Z)V = SetPinchZoom(bool)
  setScaleEnabled(Z)V = SetScaleEnabled(bool)
  setScaleMinima(FF)V = SetScaleMinima(float, float)
  setViewPortOffsets(FFFF)V = SetViewPortOffsets(float, float, float, float)
  setVisibleXRange(FF)V = SetVisibleXRange(float, float)
  setVisibleXRangeMaximum(F)V = SetVisibleXRangeMaximum(float)
  setVisibleXRangeMinimum(F)V = SetVisibleXRangeMinimum(float)
  setVisibleYRange(FFLcom/github/mikephil/charting/components/YAxis$AxisDependency;)V = SetVisibleYRange(float, float, MikePhil.Charting.Components.YAxis.AxisDependency)
  setVisibleYRangeMaximum(FLcom/github/mikephil/charting/components/YAxis$AxisDependency;)V = SetVisibleYRangeMaximum(float, MikePhil.Charting.Components.YAxis.AxisDependency)
  setVisibleYRangeMinimum(FLcom/github/mikephil/charting/components/YAxis$AxisDependency;)V = SetVisibleYRangeMinimum(float, MikePhil.Charting.Components.YAxis.AxisDependency)
  setXAxisRenderer(Lcom/github/mikephil/charting/renderer/XAxisRenderer;)V = SetXAxisRenderer(MikePhil.Charting.Renderer.XAxisRenderer)
  zoom(FFFF)V = Zoom(float, float, float, float)
  zoom(FFFFLcom/github/mikephil/charting/components/YAxis$AxisDependency;)V = Zoom(float, float, float, float, MikePhil.Charting.Components.YAxis.AxisDependency)
  zoomAndCenterAnimated(FFFFLcom/github/mikephil/charting/components/YAxis$AxisDependency;J)V = ZoomAndCenterAnimated(float, float, float, float, MikePhil.Charting.Components.YAxis.AxisDependency, long)
  zoomIn()V = ZoomIn()
  zoomOut()V = ZoomOut()
  zoomToCenter(FF)V = ZoomToCenter(float, float)
com/github/mikephil/charting/charts/BubbleChart = MikePhil.Charting.Charts.BubbleChart
  <init>(Landroid/content/Context;)V = .ctor(Android.Content.Context)
  <init>(Landroid/content/Context;Landroid/util/AttributeSet;)V = .ctor(Android.Content.Context, Android.Util.IAttributeSet)
  <init>(Landroid/content/Context;Landroid/util/AttributeSet;I)V = .ctor(Android.Content.Context, Android.Util.IAttributeSet, int)
  getBubbleData()Lcom/github/mikephil/charting/data/BubbleData; = BubbleData
com/github/mikephil/charting/charts/CandleStickChart = MikePhil.Charting.Charts.CandleStickChart
  <init>(Landroid/content/Context;)V = .ctor(Android.Content.Context)
  <init>(Landroid/content/Context;Landroid/util/AttributeSet;)V = .ctor(Android.Content.Context, Android.Util.IAttributeSet)
  <init>(Landroid/content/Context;Landroid/util/AttributeSet;I)V = .ctor(Android.Content.Context, Android.Util.IAttributeSet, int)
  getCandleData()Lcom/github/mikephil/charting/data/CandleData; = CandleData
com/github/mikephil/charting/charts/Chart = MikePhil.Charting.Charts.Chart
  <init>(Landroid/content/Context;)V = .ctor(Android.Content.Context)
  <init>(Landroid/content/Context;Landroid/util/AttributeSet;)V = .ctor(Android.Content.Context, Android.Util.IAttributeSet)
  <init>(Landroid/content/Context;Landroid/util/AttributeSet;I)V = .ctor(Android.Content.Context, Android.Util.IAttributeSet, int)
  LOG_TAG = LogTag
  mAnimator = MAnimator
  mChartTouchListener = MChartTouchListener
  mData = MData
  mDefaultValueFormatter = MDefaultValueFormatter
  mDescPaint = MDescPaint
  mDescription = MDescription
  mDrawMarkers = MDrawMarkers
  mHighlighter = MHighlighter
  mHighLightPerTapEnabled = MHighLightPerTapEnabled
  mIndicesToHighlight = MIndicesToHighlight
  mInfoPaint = MInfoPaint
  mJobs = MJobs
  mLegend = MLegend
  mLegendRenderer = MLegendRenderer
  mLogEnabled = MLogEnabled
  mMarker = MMarker
  mMaxHighlightDistance = MMaxHighlightDistance
  mRenderer = MRenderer
  mSelectionListener = MSelectionListener
  mTouchEnabled = MTouchEnabled
  mViewPortHandler = MViewPortHandler
  mXAxis = MXAxis
  PAINT_CENTER_TEXT = PaintCenterText
  PAINT_DESCRIPTION = PaintDescription
  PAINT_GRID_BACKGROUND = PaintGridBackground
  PAINT_HOLE = PaintHole
  PAINT_INFO = PaintInfo
  PAINT_LEGEND_LABEL = PaintLegendLabel
  getAnimator()Lcom/github/mikephil/charting/animation/ChartAnimator; = Animator
  getCenter()Lcom/github/mikephil/charting/utils/MPPointF; = Center
  getCenterOffsets()Lcom/github/mikephil/charting/utils/MPPointF; = CenterOffsets
  getCenterOfView()Lcom/github/mikephil/charting/utils/MPPointF; = CenterOfView
  getChartBitmap()Landroid/graphics/Bitmap; = ChartBitmap
  getContentRect()Landroid/graphics/RectF; = ContentRect
  getData()Lcom/github/mikephil/charting/data/ChartData; = Data
  setData(Lcom/github/mikephil/charting/data/ChartData;)V = Data
  getDefaultValueFormatter()Lcom/github/mikephil/charting/formatter/IValueFormatter; = DefaultValueFormatter
  getDescription()Lcom/github/mikephil/charting/components/Description; = Description
  setDescription(Lcom/github/mikephil/charting/components/Description;)V = Description
  isDragDecelerationEnabled()Z = DragDecelerationEnabled
  setDragDecelerationEnabled(Z)V = DragDecelerationEnabled
  getDragDecelerationFrictionCoef()F = DragDecelerationFrictionCoef
  setDragDecelerationFrictionCoef(F)V = DragDecelerationFrictionCoef
  getExtraBottomOffset()F = ExtraBottomOffset
  setExtraBottomOffset(F)V = ExtraBottomOffset
  getExtraLeftOffset()F = ExtraLeftOffset
  setExtraLeftOffset(F)V = ExtraLeftOffset
  getExtraRightOffset()F = ExtraRightOffset
  setExtraRightOffset(F)V = ExtraRightOffset
  getExtraTopOffset()F = ExtraTopOffset
  setExtraTopOffset(F)V = ExtraTopOffset
  getHighlighter()Lcom/github/mikephil/charting/highlight/IHighlighter; = Highlighter
  isHighlightPerTapEnabled()Z = HighlightPerTapEnabled
  setHighlightPerTapEnabled(Z)V = HighlightPerTapEnabled
  isDrawMarkersEnabled()Z = IsDrawMarkersEnabled
  isDrawMarkerViewsEnabled()Z = IsDrawMarkerViewsEnabled
  isEmpty()Z = IsEmpty
  getJobs()Ljava/util/ArrayList; = Jobs
  getLegend()Lcom/github/mikephil/charting/components/Legend; = Legend
  getLegendRenderer()Lcom/github/mikephil/charting/renderer/LegendRenderer; = LegendRenderer
  isLogEnabled()Z = LogEnabled
  setLogEnabled(Z)V = LogEnabled
  getMarker()Lcom/github/mikephil/charting/components/IMarker; = Marker
  setMarker(Lcom/github/mikephil/charting/components/IMarker;)V = Marker
  getMarkerView()Lcom/github/mikephil/charting/components/IMarker; = MarkerView
  setMarkerView(Lcom/github/mikephil/charting/components/IMarker;)V = MarkerView
  getMaxHighlightDistance()F = MaxHighlightDistance
  setMaxHighlightDistance(F)V = MaxHighlightDistance
  getOnChartGestureListener()Lcom/github/mikephil/charting/listener/OnChartGestureListener; = OnChartGestureListener
  setOnChartGestureListener(Lcom/github/mikephil/charting/listener/OnChartGestureListener;)V = OnChartGestureListener
  getOnTouchListener()Lcom/github/mikephil/charting/listener/ChartTouchListener; = OnTouchListener
  setOnTouchListener(Lcom/github/mikephil/charting/listener/ChartTouchListener;)V = OnTouchListener
  getRenderer()Lcom/github/mikephil/charting/renderer/DataRenderer; = Renderer
  setRenderer(Lcom/github/mikephil/charting/renderer/DataRenderer;)V = Renderer
  getViewPortHandler()Lcom/github/mikephil/charting/utils/ViewPortHandler; = ViewPortHandler
  getXAxis()Lcom/github/mikephil/charting/components/XAxis; = XAxis
  getXChartMax()F = XChartMax
  getXChartMin()F = XChartMin
  getXRange()F = XRange
  getYMax()F = YMax
  getYMin()F = YMin
  addViewportJob(Ljava/lang/Runnable;)V = AddViewportJob(Java.Lang.IRunnable)
  animateX(I)V = AnimateX(int)
  animateX(ILcom/github/mikephil/charting/animation/Easing$EasingFunction;)V = AnimateX(int, MikePhil.Charting.Animation.Easing.IEasingFunction)
  animateX(ILcom/github/mikephil/charting/animation/Easing$EasingOption;)V = AnimateX(int, MikePhil.Charting.Animation.Easing.EasingOption)
  animateXY(II)V = AnimateXY(int, int)
  animateXY(IILcom/github/mikephil/charting/animation/Easing$EasingFunction;)V = AnimateXY(int, int, MikePhil.Charting.Animation.Easing.IEasingFunction)
  animateXY(IILcom/github/mikephil/charting/animation/Easing$EasingFunction;Lcom/github/mikephil/charting/animation/Easing$EasingFunction;)V = AnimateXY(int, int, MikePhil.Charting.Animation.Easing.IEasingFunction, MikePhil.Charting.Animation.Easing.IEasingFunction)
  animateXY(IILcom/github/mikephil/charting/animation/Easing$EasingOption;Lcom/github/mikephil/charting/animation/Easing$EasingOption;)V = AnimateXY(int, int, MikePhil.Charting.Animation.Easing.EasingOption, MikePhil.Charting.Animation.Easing.EasingOption)
  animateY(I)V = AnimateY(int)
  animateY(ILcom/github/mikephil/charting/animation/Easing$EasingFunction;)V = AnimateY(int, MikePhil.Charting.Animation.Easing.IEasingFunction)
  animateY(ILcom/github/mikephil/charting/animation/Easing$EasingOption;)V = AnimateY(int, MikePhil.Charting.Animation.Easing.EasingOption)
  calcMinMax()V = CalcMinMax()
  calculateOffsets()V = CalculateOffsets()
  clear()V = Clear()
  clearAllViewportJobs()V = ClearAllViewportJobs()
  clearValues()V = ClearValues()
  disableScroll()V = DisableScroll()
  drawDescription(Landroid/graphics/Canvas;)V = DrawDescription(Android.Graphics.Canvas)
  drawMarkers(Landroid/graphics/Canvas;)V = DrawMarkers(Android.Graphics.Canvas)
  enableScroll()V = EnableScroll()
  getHighlightByTouchPoint(FF)Lcom/github/mikephil/charting/highlight/Highlight; = GetHighlightByTouchPoint(float, float)
  getHighlighted()[Lcom/github/mikephil/charting/highlight/Highlight; = GetHighlighted()
  getMarkerPosition(Lcom/github/mikephil/charting/highlight/Highlight;)[F = GetMarkerPosition(MikePhil.Charting.Highlight.Highlight)
  getPaint(I)Landroid/graphics/Paint; = GetPaint(int)
  highlightValue(Lcom/github/mikephil/charting/highlight/Highlight;)V = HighlightValue(MikePhil.Charting.Highlight.Highlight)
  highlightValue(Lcom/github/mikephil/charting/highlight/Highlight;Z)V = HighlightValue(MikePhil.Charting.Highlight.Highlight, bool)
  highlightValue(FFI)V = HighlightValue(float, float, int)
  highlightValue(FFIZ)V = HighlightValue(float, float, int, bool)
  highlightValue(FI)V = HighlightValue(float, int)
  highlightValue(FIZ)V = HighlightValue(float, int, bool)
  highlightValues([Lcom/github/mikephil/charting/highlight/Highlight;)V = HighlightValues(MikePhil.Charting.Highlight.Highlight[])
  init()V = Init()
  notifyDataSetChanged()V = NotifyDataSetChanged()
  onLayout(ZIIII)V = OnLayout(bool, int, int, int, int)
  removeViewportJob(Ljava/lang/Runnable;)V = RemoveViewportJob(Java.Lang.IRunnable)
  saveToGallery(Ljava/lang/String;)Z = SaveToGallery(string)
  saveToGallery(Ljava/lang/String;I)Z = SaveToGallery(string, int)
  saveToGallery(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/graphics/Bitmap$CompressFormat;I)Z = SaveToGallery(string, string, string, Android.Graphics.Bitmap.CompressFormat, int)
  saveToPath(Ljava/lang/String;Ljava/lang/String;)Z = SaveToPath(string, string)
  setDrawMarkers(Z)V = SetDrawMarkers(bool)
  setDrawMarkerViews(Z)V = SetDrawMarkerViews(bool)
  setExtraOffsets(FFFF)V = SetExtraOffsets(float, float, float, float)
  setHardwareAccelerationEnabled(Z)V = SetHardwareAccelerationEnabled(bool)
  setHighlighter(Lcom/github/mikephil/charting/highlight/ChartHighlighter;)V = SetHighlighter(MikePhil.Charting.Highlight.ChartHighlighter)
  setLastHighlighted([Lcom/github/mikephil/charting/highlight/Highlight;)V = SetLastHighlighted(MikePhil.Charting.Highlight.Highlight[])
  setNoDataText(Ljava/lang/String;)V = SetNoDataText(string)
  setNoDataTextColor(I)V = SetNoDataTextColor(int)
  setNoDataTextTypeface(Landroid/graphics/Typeface;)V = SetNoDataTextTypeface(Android.Graphics.Typeface)
  setOnChartValueSelectedListener(Lcom/github/mikephil/charting/listener/OnChartValueSelectedListener;)V = SetOnChartValueSelectedListener(MikePhil.Charting.Listener.IOnChartValueSelectedListenerSupport)
  setPaint(Landroid/graphics/Paint;I)V = SetPaint(Android.Graphics.Paint, int)
  setTouchEnabled(Z)V = SetTouchEnabled(bool)
  setUnbindEnabled(Z)V = SetUnbindEnabled(bool)
  setupDefaultFormatter(FF)V = SetupDefaultFormatter(float, float)
  valuesToHighlight()Z = ValuesToHighlight()
com/github/mikephil/charting/charts/CombinedChart = MikePhil.Charting.Charts.CombinedChart
  <init>(Landroid/content/Context;)V = .ctor(Android.Content.Context)
  <init>(Landroid/content/Context;Landroid/util/AttributeSet;)V = .ctor(Android.Content.Context, Android.Util.IAttributeSet)
  <init>(Landroid/content/Context;Landroid/util/AttributeSet;I)V = .ctor(Android.Content.Context, Android.Util.IAttributeSet, int)
  mDrawOrder = MDrawOrder
  mHighlightFullBarEnabled = MHighlightFullBarEnabled
  getBarData()Lcom/github/mikephil/charting/data/BarData; = BarData
  getBubbleData()Lcom/github/mikephil/charting/data/BubbleData; = BubbleData
  getCandleData()Lcom/github/mikephil/charting/data/CandleData; = CandleData
  getCombinedData()Lcom/github/mikephil/charting/data/CombinedData; = CombinedData
  isDrawBarShadowEnabled()Z = IsDrawBarShadowEnabled
  isDrawValueAboveBarEnabled()Z = IsDrawValueAboveBarEnabled
  isHighlightFullBarEnabled()Z = IsHighlightFullBarEnabled
  getLineData()Lcom/github/mikephil/charting/data/LineData; = LineData
  getScatterData()Lcom/github/mikephil/charting/data/ScatterData; = ScatterData
  getDrawOrder()[Lcom/github/mikephil/charting/charts/CombinedChart$DrawOrder; = GetDrawOrder()
  setData(Lcom/github/mikephil/charting/data/CombinedData;)V = SetData(MikePhil.Charting.Data.CombinedData)
  setDrawBarShadow(Z)V = SetDrawBarShadow(bool)
  setDrawOrder([Lcom/github/mikephil/charting/charts/CombinedChart$DrawOrder;)V = SetDrawOrder(MikePhil.Charting.Charts.CombinedChart.DrawOrder[])
  setDrawValueAboveBar(Z)V = SetDrawValueAboveBar(bool)
  setHighlightFullBarEnabled(Z)V = SetHighlightFullBarEnabled(bool)
com/github/mikephil/charting/charts/HorizontalBarChart = MikePhil.Charting.Charts.HorizontalBarChart
  <init>(Landroid/content/Context;)V = .ctor(Android.Content.Context)
  <init>(Landroid/content/Context;Landroid/util/AttributeSet;)V = .ctor(Android.Content.Context, Android.Util.IAttributeSet)
  <init>(Landroid/content/Context;Landroid/util/AttributeSet;I)V = .ctor(Android.Content.Context, Android.Util.IAttributeSet, int)
  mGetPositionBuffer = MGetPositionBuffer
com/github/mikephil/charting/charts/LineChart = MikePhil.Charting.Charts.LineChart
  <init>(Landroid/content/Context;)V = .ctor(Android.Content.Context)
  <init>(Landroid/content/Context;Landroid/util/AttributeSet;)V = .ctor(Android.Content.Context, Android.Util.IAttributeSet)
  <init>(Landroid/content/Context;Landroid/util/AttributeSet;I)V = .ctor(Android.Content.Context, Android.Util.IAttributeSet, int)
  getLineData()Lcom/github/mikephil/charting/data/LineData; = LineData
com/github/mikephil/charting/charts/PieChart = MikePhil.Charting.Charts.PieChart
  <init>(Landroid/content/Context;)V = .ctor(Android.Content.Context)
  <init>(Landroid/content/Context;Landroid/util/AttributeSet;)V = .ctor(Android.Content.Context, Android.Util.IAttributeSet)
  <init>(Landroid/content/Context;Landroid/util/AttributeSet;I)V = .ctor(Android.Content.Context, Android.Util.IAttributeSet, int)
  mMaxAngle = MMaxAngle
  mTransparentCircleRadiusPercent = MTransparentCircleRadiusPercent
  getCenterCircleBox()Lcom/github/mikephil/charting/utils/MPPointF; = CenterCircleBox
  getCenterText()Ljava/lang/CharSequence; = CenterText
  setCenterText(Ljava/lang/CharSequence;)V = CenterText
  getCenterTextOffset()Lcom/github/mikephil/charting/utils/MPPointF; = CenterTextOffset
  getCenterTextRadiusPercent()F = CenterTextRadiusPercent
  setCenterTextRadiusPercent(F)V = CenterTextRadiusPercent
  getCircleBox()Landroid/graphics/RectF; = CircleBox
  isDrawHoleEnabled()Z = DrawHoleEnabled
  setDrawHoleEnabled(Z)V = DrawHoleEnabled
  getHoleRadius()F = HoleRadius
  setHoleRadius(F)V = HoleRadius
  isDrawCenterTextEnabled()Z = IsDrawCenterTextEnabled
  isDrawEntryLabelsEnabled()Z = IsDrawEntryLabelsEnabled
  isDrawRoundedSlicesEnabled()Z = IsDrawRoundedSlicesEnabled
  isDrawSlicesUnderHoleEnabled()Z = IsDrawSlicesUnderHoleEnabled
  isUsePercentValuesEnabled()Z = IsUsePercentValuesEnabled
  getMaxAngle()F = MaxAngle
  setMaxAngle(F)V = MaxAngle
  getRadius()F = Radius
  getRequiredBaseOffset()F = RequiredBaseOffset
  getRequiredLegendOffset()F = RequiredLegendOffset
  getTransparentCircleRadius()F = TransparentCircleRadius
  setTransparentCircleRadius(F)V = TransparentCircleRadius
  getAbsoluteAngles()[F = GetAbsoluteAngles()
  getDataSetIndexForIndex(I)I = GetDataSetIndexForIndex(int)
  getDrawAngles()[F = GetDrawAngles()
  getIndexForAngle(F)I = GetIndexForAngle(float)
  needsHighlight(I)Z = NeedsHighlight(int)
  setCenterTextColor(I)V = SetCenterTextColor(int)
  setCenterTextOffset(FF)V = SetCenterTextOffset(float, float)
  setCenterTextSize(F)V = SetCenterTextSize(float)
  setCenterTextSizePixels(F)V = SetCenterTextSizePixels(float)
  setCenterTextTypeface(Landroid/graphics/Typeface;)V = SetCenterTextTypeface(Android.Graphics.Typeface)
  setDrawCenterText(Z)V = SetDrawCenterText(bool)
  setDrawEntryLabels(Z)V = SetDrawEntryLabels(bool)
  setDrawSlicesUnderHole(Z)V = SetDrawSlicesUnderHole(bool)
  setDrawSliceText(Z)V = SetDrawSliceText(bool)
  setEntryLabelColor(I)V = SetEntryLabelColor(int)
  setEntryLabelTextSize(F)V = SetEntryLabelTextSize(float)
  setEntryLabelTypeface(Landroid/graphics/Typeface;)V = SetEntryLabelTypeface(Android.Graphics.Typeface)
  setHoleColor(I)V = SetHoleColor(int)
  setTransparentCircleAlpha(I)V = SetTransparentCircleAlpha(int)
  setTransparentCircleColor(I)V = SetTransparentCircleColor(int)
  setUsePercentValues(Z)V = SetUsePercentValues(bool)
com/github/mikephil/charting/charts/PieRadarChartBase = MikePhil.Charting.Charts.PieRadarChartBase
  <init>(Landroid/content/Context;)V = .ctor(Android.Content.Context)
  <init>(Landroid/content/Context;Landroid/util/AttributeSet;)V = .ctor(Android.Content.Context, Android.Util.IAttributeSet)
  <init>(Landroid/content/Context;Landroid/util/AttributeSet;I)V = .ctor(Android.Content.Context, Android.Util.IAttributeSet, int)
  mMinOffset = MMinOffset
  mRotateEnabled = MRotateEnabled
  getDiameter()F = Diameter
  getMaxVisibleCount()I = MaxVisibleCount
  getMinOffset()F = MinOffset
  setMinOffset(F)V = MinOffset
  getRadius()F = Radius
  getRawRotationAngle()F = RawRotationAngle
  getRequiredBaseOffset()F = RequiredBaseOffset
  getRequiredLegendOffset()F = RequiredLegendOffset
  getRotationAngle()F = RotationAngle
  setRotationAngle(F)V = RotationAngle
  isRotationEnabled()Z = RotationEnabled
  setRotationEnabled(Z)V = RotationEnabled
  getYChartMax()F = YChartMax
  getYChartMin()F = YChartMin
  calcMinMax()V = CalcMinMax()
  calculateOffsets()V = CalculateOffsets()
  distanceToCenter(FF)F = DistanceToCenter(float, float)
  getAngleForPoint(FF)F = GetAngleForPoint(float, float)
  getIndexForAngle(F)I = GetIndexForAngle(float)
  getPosition(Lcom/github/mikephil/charting/utils/MPPointF;FF)Lcom/github/mikephil/charting/utils/MPPointF; = GetPosition(MikePhil.Charting.Util.MPPointF, float, float)
  getPosition(Lcom/github/mikephil/charting/utils/MPPointF;FFLcom/github/mikephil/charting/utils/MPPointF;)V = GetPosition(MikePhil.Charting.Util.MPPointF, float, float, MikePhil.Charting.Util.MPPointF)
  notifyDataSetChanged()V = NotifyDataSetChanged()
  spin(IFFLcom/github/mikephil/charting/animation/Easing$EasingFunction;)V = Spin(int, float, float, MikePhil.Charting.Animation.Easing.IEasingFunction)
com/github/mikephil/charting/charts/RadarChart = MikePhil.Charting.Charts.RadarChart
  <init>(Landroid/content/Context;)V = .ctor(Android.Content.Context)
  <init>(Landroid/content/Context;Landroid/util/AttributeSet;)V = .ctor(Android.Content.Context, Android.Util.IAttributeSet)
  <init>(Landroid/content/Context;Landroid/util/AttributeSet;I)V = .ctor(Android.Content.Context, Android.Util.IAttributeSet, int)
  mXAxisRenderer = MXAxisRenderer
  mYAxisRenderer = MYAxisRenderer
  getFactor()F = Factor
  getRadius()F = Radius
  getRequiredBaseOffset()F = RequiredBaseOffset
  getRequiredLegendOffset()F = RequiredLegendOffset
  getSkipWebLineCount()I = SkipWebLineCount
  setSkipWebLineCount(I)V = SkipWebLineCount
  getSliceAngle()F = SliceAngle
  getWebAlpha()I = WebAlpha
  setWebAlpha(I)V = WebAlpha
  getWebColor()I = WebColor
  setWebColor(I)V = WebColor
  getWebColorInner()I = WebColorInner
  setWebColorInner(I)V = WebColorInner
  getWebLineWidth()F = WebLineWidth
  setWebLineWidth(F)V = WebLineWidth
  getWebLineWidthInner()F = WebLineWidthInner
  setWebLineWidthInner(F)V = WebLineWidthInner
  getYAxis()Lcom/github/mikephil/charting/components/YAxis; = YAxis
  getYRange()F = YRange
  getIndexForAngle(F)I = GetIndexForAngle(float)
  setDrawWeb(Z)V = SetDrawWeb(bool)
com/github/mikephil/charting/charts/ScatterChart = MikePhil.Charting.Charts.ScatterChart
  <init>(Landroid/content/Context;)V = .ctor(Android.Content.Context)
  <init>(Landroid/content/Context;Landroid/util/AttributeSet;)V = .ctor(Android.Content.Context, Android.Util.IAttributeSet)
  <init>(Landroid/content/Context;Landroid/util/AttributeSet;I)V = .ctor(Android.Content.Context, Android.Util.IAttributeSet, int)
  getScatterData()Lcom/github/mikephil/charting/data/ScatterData; = ScatterData
com/github/mikephil/charting/components/AxisBase = MikePhil.Charting.Components.AxisBase
  <init>()V = .ctor()
  mAxisMaximum = MAxisMaximum
  mAxisMinimum = MAxisMinimum
  mAxisRange = MAxisRange
  mAxisValueFormatter = MAxisValueFormatter
  mCenterAxisLabels = MCenterAxisLabels
  mCenteredEntries = MCenteredEntries
  mCustomAxisMax = MCustomAxisMax
  mCustomAxisMin = MCustomAxisMin
  mDecimals = MDecimals
  mDrawAxisLine = MDrawAxisLine
  mDrawGridLines = MDrawGridLines
  mDrawGridLinesBehindData = MDrawGridLinesBehindData
  mDrawLabels = MDrawLabels
  mDrawLimitLineBehindData = MDrawLimitLineBehindData
  mEntries = MEntries
  mEntryCount = MEntryCount
  mForceLabels = MForceLabels
  mGranularity = MGranularity
  mGranularityEnabled = MGranularityEnabled
  mLimitLines = MLimitLines
  mSpaceMax = MSpaceMax
  mSpaceMin = MSpaceMin
  getAxisLineColor()I = AxisLineColor
  setAxisLineColor(I)V = AxisLineColor
  getAxisLineDashPathEffect()Landroid/graphics/DashPathEffect; = AxisLineDashPathEffect
  getAxisLineWidth()F = AxisLineWidth
  setAxisLineWidth(F)V = AxisLineWidth
  getAxisMaximum()F = AxisMaximum
  setAxisMaximum(F)V = AxisMaximum
  getAxisMinimum()F = AxisMinimum
  setAxisMinimum(F)V = AxisMinimum
  getGranularity()F = Granularity
  setGranularity(F)V = Granularity
  isGranularityEnabled()Z = GranularityEnabled
  setGranularityEnabled(Z)V = GranularityEnabled
  getGridColor()I = GridColor
  setGridColor(I)V = GridColor
  getGridDashPathEffect()Landroid/graphics/DashPathEffect; = GridDashPathEffect
  getGridLineWidth()F = GridLineWidth
  setGridLineWidth(F)V = GridLineWidth
  isAxisLineDashedLineEnabled()Z = IsAxisLineDashedLineEnabled
  isAxisMaxCustom()Z = IsAxisMaxCustom
  isAxisMinCustom()Z = IsAxisMinCustom
  isCenterAxisLabelsEnabled()Z = IsCenterAxisLabelsEnabled
  isDrawAxisLineEnabled()Z = IsDrawAxisLineEnabled
  isDrawGridLinesBehindDataEnabled()Z = IsDrawGridLinesBehindDataEnabled
  isDrawGridLinesEnabled()Z = IsDrawGridLinesEnabled
  isDrawLabelsEnabled()Z = IsDrawLabelsEnabled
  isDrawLimitLinesBehindDataEnabled()Z = IsDrawLimitLinesBehindDataEnabled
  isForceLabelsEnabled()Z = IsForceLabelsEnabled
  isGridDashedLineEnabled()Z = IsGridDashedLineEnabled
  getLabelCount()I = LabelCount
  setLabelCount(I)V = LabelCount
  getLimitLines()Ljava/util/List; = LimitLines
  getLongestLabel()Ljava/lang/String; = LongestLabel
  getSpaceMax()F = SpaceMax
  setSpaceMax(F)V = SpaceMax
  getSpaceMin()F = SpaceMin
  setSpaceMin(F)V = SpaceMin
  getValueFormatter()Lcom/github/mikephil/charting/formatter/IAxisValueFormatter; = ValueFormatter
  setValueFormatter(Lcom/github/mikephil/charting/formatter/IAxisValueFormatter;)V = ValueFormatter
  addLimitLine(Lcom/github/mikephil/charting/components/LimitLine;)V = AddLimitLine(MikePhil.Charting.Components.LimitLine)
  calculate(FF)V = Calculate(float, float)
  disableAxisLineDashedLine()V = DisableAxisLineDashedLine()
  disableGridDashedLine()V = DisableGridDashedLine()
  enableAxisLineDashedLine(FFF)V = EnableAxisLineDashedLine(float, float, float)
  enableGridDashedLine(FFF)V = EnableGridDashedLine(float, float, float)
  getFormattedLabel(I)Ljava/lang/String; = GetFormattedLabel(int)
  removeAllLimitLines()V = RemoveAllLimitLines()
  removeLimitLine(Lcom/github/mikephil/charting/components/LimitLine;)V = RemoveLimitLine(MikePhil.Charting.Components.LimitLine)
  resetAxisMaximum()V = ResetAxisMaximum()
  resetAxisMinimum()V = ResetAxisMinimum()
  setAxisLineDashedLine(Landroid/graphics/DashPathEffect;)V = SetAxisLineDashedLine(Android.Graphics.DashPathEffect)
  setAxisMaxValue(F)V = SetAxisMaxValue(float)
  setAxisMinValue(F)V = SetAxisMinValue(float)
  setCenterAxisLabels(Z)V = SetCenterAxisLabels(bool)
  setDrawAxisLine(Z)V = SetDrawAxisLine(bool)
  setDrawGridLines(Z)V = SetDrawGridLines(bool)
  setDrawGridLinesBehindData(Z)V = SetDrawGridLinesBehindData(bool)
  setDrawLabels(Z)V = SetDrawLabels(bool)
  setDrawLimitLinesBehindData(Z)V = SetDrawLimitLinesBehindData(bool)
  setGridDashedLine(Landroid/graphics/DashPathEffect;)V = SetGridDashedLine(Android.Graphics.DashPathEffect)
  setLabelCount(IZ)V = SetLabelCount(int, bool)
com/github/mikephil/charting/components/ComponentBase = MikePhil.Charting.Components.ComponentBase
  <init>()V = .ctor()
  mEnabled = MEnabled
  mTextColor = MTextColor
  mTextSize = MTextSize
  mTypeface = MTypeface
  mXOffset = MXOffset
  mYOffset = MYOffset
  isEnabled()Z = Enabled
  setEnabled(Z)V = Enabled
  getTextColor()I = TextColor
  setTextColor(I)V = TextColor
  getTextSize()F = TextSize
  setTextSize(F)V = TextSize
  getTypeface()Landroid/graphics/Typeface; = Typeface
  setTypeface(Landroid/graphics/Typeface;)V = Typeface
  getXOffset()F = XOffset
  setXOffset(F)V = XOffset
  getYOffset()F = YOffset
  setYOffset(F)V = YOffset
com/github/mikephil/charting/components/Description = MikePhil.Charting.Components.Description
  <init>()V = .ctor()
  getPosition()Lcom/github/mikephil/charting/utils/MPPointF; = Position
  getText()Ljava/lang/String; = Text
  setText(Ljava/lang/String;)V = Text
  getTextAlign()Landroid/graphics/Paint$Align; = TextAlign
  setTextAlign(Landroid/graphics/Paint$Align;)V = TextAlign
  setPosition(FF)V = SetPosition(float, float)
com/github/mikephil/charting/components/IMarker = MikePhil.Charting.Components.IMarker
  getOffset()Lcom/github/mikephil/charting/utils/MPPointF; = Offset
  draw(Landroid/graphics/Canvas;FF)V = Draw(Android.Graphics.Canvas, float, float)
  getOffsetForDrawingAtPoint(FF)Lcom/github/mikephil/charting/utils/MPPointF; = GetOffsetForDrawingAtPoint(float, float)
  refreshContent(Lcom/github/mikephil/charting/data/Entry;Lcom/github/mikephil/charting/highlight/Highlight;)V = RefreshContent(MikePhil.Charting.Data.Entry, MikePhil.Charting.Highlight.Highlight)
com/github/mikephil/charting/components/Legend = MikePhil.Charting.Components.Legend
  <init>()V = .ctor()
  <init>([I[Ljava/lang/String;)V = .ctor(int[], string[])
  <init>([Lcom/github/mikephil/charting/components/LegendEntry;)V = .ctor(MikePhil.Charting.Components.LegendEntry[])
  <init>(Ljava/util/List;Ljava/util/List;)V = .ctor(System.Collections.Generic.IList<Java.Lang.Integer>, System.Collections.Generic.IList<string>)
  mNeededHeight = MNeededHeight
  mNeededWidth = MNeededWidth
  mTextHeightMax = MTextHeightMax
  mTextWidthMax = MTextWidthMax
  getCalculatedLabelBreakPoints()Ljava/util/List; = CalculatedLabelBreakPoints
  getCalculatedLabelSizes()Ljava/util/List; = CalculatedLabelSizes
  getCalculatedLineSizes()Ljava/util/List; = CalculatedLineSizes
  getDirection()Lcom/github/mikephil/charting/components/Legend$LegendDirection; = Direction
  setDirection(Lcom/github/mikephil/charting/components/Legend$LegendDirection;)V = Direction
  getForm()Lcom/github/mikephil/charting/components/Legend$LegendForm; = Form
  setForm(Lcom/github/mikephil/charting/components/Legend$LegendForm;)V = Form
  getFormLineDashEffect()Landroid/graphics/DashPathEffect; = FormLineDashEffect
  setFormLineDashEffect(Landroid/graphics/DashPathEffect;)V = FormLineDashEffect
  getFormLineWidth()F = FormLineWidth
  setFormLineWidth(F)V = FormLineWidth
  getFormSize()F = FormSize
  setFormSize(F)V = FormSize
  getFormToTextSpace()F = FormToTextSpace
  setFormToTextSpace(F)V = FormToTextSpace
  getHorizontalAlignment()Lcom/github/mikephil/charting/components/Legend$LegendHorizontalAlignment; = HorizontalAlignment
  setHorizontalAlignment(Lcom/github/mikephil/charting/components/Legend$LegendHorizontalAlignment;)V = HorizontalAlignment
  isDrawInsideEnabled()Z = IsDrawInsideEnabled
  isLegendCustom()Z = IsLegendCustom
  getMaxSizePercent()F = MaxSizePercent
  setMaxSizePercent(F)V = MaxSizePercent
  getOrientation()Lcom/github/mikephil/charting/components/Legend$LegendOrientation; = Orientation
  setOrientation(Lcom/github/mikephil/charting/components/Legend$LegendOrientation;)V = Orientation
  getPosition()Lcom/github/mikephil/charting/components/Legend$LegendPosition; = Position
  setPosition(Lcom/github/mikephil/charting/components/Legend$LegendPosition;)V = Position
  getStackSpace()F = StackSpace
  setStackSpace(F)V = StackSpace
  getVerticalAlignment()Lcom/github/mikephil/charting/components/Legend$LegendVerticalAlignment; = VerticalAlignment
  setVerticalAlignment(Lcom/github/mikephil/charting/components/Legend$LegendVerticalAlignment;)V = VerticalAlignment
  isWordWrapEnabled()Z = WordWrapEnabled
  setWordWrapEnabled(Z)V = WordWrapEnabled
  getXEntrySpace()F = XEntrySpace
  setXEntrySpace(F)V = XEntrySpace
  getYEntrySpace()F = YEntrySpace
  setYEntrySpace(F)V = YEntrySpace
  calculateDimensions(Landroid/graphics/Paint;Lcom/github/mikephil/charting/utils/ViewPortHandler;)V = CalculateDimensions(Android.Graphics.Paint, MikePhil.Charting.Util.ViewPortHandler)
  getColors()[I = GetColors()
  getEntries()[Lcom/github/mikephil/charting/components/LegendEntry; = GetEntries()
  getExtraColors()[I = GetExtraColors()
  getExtraEntries()[Lcom/github/mikephil/charting/components/LegendEntry; = GetExtraEntries()
  getExtraLabels()[Ljava/lang/String; = GetExtraLabels()
  getLabels()[Ljava/lang/String; = GetLabels()
  getMaximumEntryHeight(Landroid/graphics/Paint;)F = GetMaximumEntryHeight(Android.Graphics.Paint)
  getMaximumEntryWidth(Landroid/graphics/Paint;)F = GetMaximumEntryWidth(Android.Graphics.Paint)
  resetCustom()V = ResetCustom()
  setCustom([Lcom/github/mikephil/charting/components/LegendEntry;)V = SetCustom(MikePhil.Charting.Components.LegendEntry[])
  setCustom(Ljava/util/List;)V = SetCustom(System.Collections.Generic.IList<MikePhil.Charting.Components.LegendEntry>)
  setDrawInside(Z)V = SetDrawInside(bool)
  setEntries(Ljava/util/List;)V = SetEntries(System.Collections.Generic.IList<MikePhil.Charting.Components.LegendEntry>)
  setExtra([Lcom/github/mikephil/charting/components/LegendEntry;)V = SetExtra(MikePhil.Charting.Components.LegendEntry[])
  setExtra([I[Ljava/lang/String;)V = SetExtra(int[], string[])
  setExtra(Ljava/util/List;)V = SetExtra(System.Collections.Generic.IList<MikePhil.Charting.Components.LegendEntry>)
  setExtra(Ljava/util/List;Ljava/util/List;)V = SetExtra(System.Collections.Generic.IList<Java.Lang.Integer>, System.Collections.Generic.IList<string>)
com/github/mikephil/charting/components/LegendEntry = MikePhil.Charting.Components.LegendEntry
  <init>()V = .ctor()
  <init>(Ljava/lang/String;Lcom/github/mikephil/charting/components/Legend$LegendForm;FFLandroid/graphics/DashPathEffect;I)V = .ctor(string, MikePhil.Charting.Components.Legend.LegendForm, float, float, Android.Graphics.DashPathEffect, int)
  form = Form
  formColor = FormColor
  formLineDashEffect = FormLineDashEffect
  formLineWidth = FormLineWidth
  formSize = FormSize
  label = Label
com/github/mikephil/charting/components/LimitLine = MikePhil.Charting.Components.LimitLine
  <init>(F)V = .ctor(float)
  <init>(FLjava/lang/String;)V = .ctor(float, string)
  getDashPathEffect()Landroid/graphics/DashPathEffect; = DashPathEffect
  isDashedLineEnabled()Z = IsDashedLineEnabled
  getLabel()Ljava/lang/String; = Label
  setLabel(Ljava/lang/String;)V = Label
  getLabelPosition()Lcom/github/mikephil/charting/components/LimitLine$LimitLabelPosition; = LabelPosition
  setLabelPosition(Lcom/github/mikephil/charting/components/LimitLine$LimitLabelPosition;)V = LabelPosition
  getLimit()F = Limit
  getLineColor()I = LineColor
  setLineColor(I)V = LineColor
  getLineWidth()F = LineWidth
  setLineWidth(F)V = LineWidth
  getTextStyle()Landroid/graphics/Paint$Style; = TextStyle
  setTextStyle(Landroid/graphics/Paint$Style;)V = TextStyle
  disableDashedLine()V = DisableDashedLine()
  enableDashedLine(FFF)V = EnableDashedLine(float, float, float)
com/github/mikephil/charting/components/MarkerImage = MikePhil.Charting.Components.MarkerImage
  <init>(Landroid/content/Context;I)V = .ctor(Android.Content.Context, int)
  getChartView()Lcom/github/mikephil/charting/charts/Chart; = ChartView
  setChartView(Lcom/github/mikephil/charting/charts/Chart;)V = ChartView
  getOffset()Lcom/github/mikephil/charting/utils/MPPointF; = Offset
  setOffset(Lcom/github/mikephil/charting/utils/MPPointF;)V = Offset
  getSize()Lcom/github/mikephil/charting/utils/FSize; = Size
  setSize(Lcom/github/mikephil/charting/utils/FSize;)V = Size
  draw(Landroid/graphics/Canvas;FF)V = Draw(Android.Graphics.Canvas, float, float)
  getOffsetForDrawingAtPoint(FF)Lcom/github/mikephil/charting/utils/MPPointF; = GetOffsetForDrawingAtPoint(float, float)
  refreshContent(Lcom/github/mikephil/charting/data/Entry;Lcom/github/mikephil/charting/highlight/Highlight;)V = RefreshContent(MikePhil.Charting.Data.Entry, MikePhil.Charting.Highlight.Highlight)
  setOffset(FF)V = SetOffset(float, float)
com/github/mikephil/charting/components/MarkerView = MikePhil.Charting.Components.MarkerView
  <init>(Landroid/content/Context;I)V = .ctor(Android.Content.Context, int)
  getChartView()Lcom/github/mikephil/charting/charts/Chart; = ChartView
  setChartView(Lcom/github/mikephil/charting/charts/Chart;)V = ChartView
  getOffset()Lcom/github/mikephil/charting/utils/MPPointF; = Offset
  setOffset(Lcom/github/mikephil/charting/utils/MPPointF;)V = Offset
  draw(Landroid/graphics/Canvas;FF)V = Draw(Android.Graphics.Canvas, float, float)
  getOffsetForDrawingAtPoint(FF)Lcom/github/mikephil/charting/utils/MPPointF; = GetOffsetForDrawingAtPoint(float, float)
  refreshContent(Lcom/github/mikephil/charting/data/Entry;Lcom/github/mikephil/charting/highlight/Highlight;)V = RefreshContent(MikePhil.Charting.Data.Entry, MikePhil.Charting.Highlight.Highlight)
  setOffset(FF)V = SetOffset(float, float)
com/github/mikephil/charting/components/XAxis = MikePhil.Charting.Components.XAxis
  <init>()V = .ctor()
  mLabelHeight = MLabelHeight
  mLabelRotatedHeight = MLabelRotatedHeight
  mLabelRotatedWidth = MLabelRotatedWidth
  mLabelRotationAngle = MLabelRotationAngle
  mLabelWidth = MLabelWidth
  isAvoidFirstLastClippingEnabled()Z = IsAvoidFirstLastClippingEnabled
  getLabelRotationAngle()F = LabelRotationAngle
  setLabelRotationAngle(F)V = LabelRotationAngle
  getPosition()Lcom/github/mikephil/charting/components/XAxis$XAxisPosition; = Position
  setPosition(Lcom/github/mikephil/charting/components/XAxis$XAxisPosition;)V = Position
  setAvoidFirstLastClipping(Z)V = SetAvoidFirstLastClipping(bool)
com/github/mikephil/charting/components/YAxis = MikePhil.Charting.Components.YAxis
  <init>()V = .ctor()
  <init>(Lcom/github/mikephil/charting/components/YAxis$AxisDependency;)V = .ctor(MikePhil.Charting.Components.YAxis.AxisDependency)
  mDrawZeroLine = MDrawZeroLine
  mInverted = MInverted
  mMaxWidth = MMaxWidth
  mMinWidth = MMinWidth
  mSpacePercentBottom = MSpacePercentBottom
  mSpacePercentTop = MSpacePercentTop
  mZeroLineColor = MZeroLineColor
  mZeroLineWidth = MZeroLineWidth
  isInverted()Z = Inverted
  setInverted(Z)V = Inverted
  isDrawBottomYLabelEntryEnabled()Z = IsDrawBottomYLabelEntryEnabled
  isDrawTopYLabelEntryEnabled()Z = IsDrawTopYLabelEntryEnabled
  isDrawZeroLineEnabled()Z = IsDrawZeroLineEnabled
  getLabelPosition()Lcom/github/mikephil/charting/components/YAxis$YAxisLabelPosition; = LabelPosition
  getMaxWidth()F = MaxWidth
  setMaxWidth(F)V = MaxWidth
  getMinWidth()F = MinWidth
  setMinWidth(F)V = MinWidth
  getSpaceBottom()F = SpaceBottom
  setSpaceBottom(F)V = SpaceBottom
  getSpaceTop()F = SpaceTop
  setSpaceTop(F)V = SpaceTop
  isUseAutoScaleMaxRestriction()Z = UseAutoScaleMaxRestriction
  setUseAutoScaleMaxRestriction(Z)V = UseAutoScaleMaxRestriction
  isUseAutoScaleMinRestriction()Z = UseAutoScaleMinRestriction
  setUseAutoScaleMinRestriction(Z)V = UseAutoScaleMinRestriction
  getZeroLineColor()I = ZeroLineColor
  setZeroLineColor(I)V = ZeroLineColor
  getZeroLineWidth()F = ZeroLineWidth
  setZeroLineWidth(F)V = ZeroLineWidth
  getAxisDependency()Lcom/github/mikephil/charting/components/YAxis$AxisDependency; = GetAxisDependency()
  getRequiredHeightSpace(Landroid/graphics/Paint;)F = GetRequiredHeightSpace(Android.Graphics.Paint)
  getRequiredWidthSpace(Landroid/graphics/Paint;)F = GetRequiredWidthSpace(Android.Graphics.Paint)
  needsOffset()Z = NeedsOffset()
  setDrawTopYLabelEntry(Z)V = SetDrawTopYLabelEntry(bool)
  setDrawZeroLine(Z)V = SetDrawZeroLine(bool)
  setPosition(Lcom/github/mikephil/charting/components/YAxis$YAxisLabelPosition;)V = SetPosition(MikePhil.Charting.Components.YAxis.YAxisLabelPosition)
  setStartAtZero(Z)V = SetStartAtZero(bool)
com/github/mikephil/charting/data/BarData = MikePhil.Charting.Data.BarData
  <init>()V = .ctor()
  <init>([Lcom/github/mikephil/charting/interfaces/datasets/IBarDataSet;)V = .ctor(params MikePhil.Charting.Interfaces.Datasets.IBarDataSet[])
  <init>(Ljava/util/List;)V = .ctor(System.Collections.Generic.IList<MikePhil.Charting.Interfaces.Datasets.IBarDataSet>)
  getBarWidth()F = BarWidth
  setBarWidth(F)V = BarWidth
  getGroupWidth(FF)F = GetGroupWidth(float, float)
  groupBars(FFF)V = GroupBars(float, float, float)
com/github/mikephil/charting/data/BarDataSet = MikePhil.Charting.Data.BarDataSet
  <init>(Ljava/util/List;Ljava/lang/String;)V = .ctor(System.Collections.Generic.IList<MikePhil.Charting.Data.BarEntry>, string)
  getBarBorderColor()I = BarBorderColor
  setBarBorderColor(I)V = BarBorderColor
  getBarBorderWidth()F = BarBorderWidth
  setBarBorderWidth(F)V = BarBorderWidth
  getBarShadowColor()I = BarShadowColor
  setBarShadowColor(I)V = BarShadowColor
  getEntryCountStacks()I = EntryCountStacks
  getHighLightAlpha()I = HighLightAlpha
  setHighLightAlpha(I)V = HighLightAlpha
  isStacked()Z = IsStacked
  getStackSize()I = StackSize
  calcMinMax(Lcom/github/mikephil/charting/data/BarEntry;)V = CalcMinMax(MikePhil.Charting.Data.BarEntry)
  copy()Lcom/github/mikephil/charting/data/DataSet; = Copy()
  copy(Lcom/github/mikephil/charting/data/BarDataSet;)V = Copy(MikePhil.Charting.Data.BarDataSet)
  getStackLabels()[Ljava/lang/String; = GetStackLabels()
  setStackLabels([Ljava/lang/String;)V = SetStackLabels(string[])
com/github/mikephil/charting/data/BarEntry = MikePhil.Charting.Data.BarEntry
  <init>(F[F)V = .ctor(float, float[])
  <init>(F[FLandroid/graphics/drawable/Drawable;)V = .ctor(float, float[], Android.Graphics.Drawables.Drawable)
  <init>(F[FLandroid/graphics/drawable/Drawable;Ljava/lang/Object;)V = .ctor(float, float[], Android.Graphics.Drawables.Drawable, Java.Lang.Object)
  <init>(F[FLjava/lang/Object;)V = .ctor(float, float[], Java.Lang.Object)
  <init>(FF)V = .ctor(float, float)
  <init>(FFLandroid/graphics/drawable/Drawable;)V = .ctor(float, float, Android.Graphics.Drawables.Drawable)
  <init>(FFLandroid/graphics/drawable/Drawable;Ljava/lang/Object;)V = .ctor(float, float, Android.Graphics.Drawables.Drawable, Java.Lang.Object)
  <init>(FFLjava/lang/Object;)V = .ctor(float, float, Java.Lang.Object)
  isStacked()Z = IsStacked
  getNegativeSum()F = NegativeSum
  getPositiveSum()F = PositiveSum
  calcRanges()V = CalcRanges()
  getBelowSum(I)F = GetBelowSum(int)
  getRanges()[Lcom/github/mikephil/charting/highlight/Range; = GetRanges()
  getSumBelow(I)F = GetSumBelow(int)
  getYVals()[F = GetYVals()
  setVals([F)V = SetVals(float[])
com/github/mikephil/charting/data/BarLineScatterCandleBubbleData = MikePhil.Charting.Data.BarLineScatterCandleBubbleData
  <init>()V = .ctor()
  <init>([Lcom/github/mikephil/charting/interfaces/datasets/IBarLineScatterCandleBubbleDataSet;)V = .ctor(params Java.Lang.Object[])
  <init>(Ljava/util/List;)V = .ctor(System.Collections.IList)
com/github/mikephil/charting/data/BarLineScatterCandleBubbleDataSet = MikePhil.Charting.Data.BarLineScatterCandleBubbleDataSet
  <init>(Ljava/util/List;Ljava/lang/String;)V = .ctor(System.Collections.IList, string)
  mHighLightColor = MHighLightColor
  getHighLightColor()I = HighLightColor
  setHighLightColor(I)V = HighLightColor
  copy(Lcom/github/mikephil/charting/data/BarLineScatterCandleBubbleDataSet;)V = Copy(MikePhil.Charting.Data.BarLineScatterCandleBubbleDataSet)
com/github/mikephil/charting/data/BaseDataSet = MikePhil.Charting.Data.BaseDataSet
  <init>()V = .ctor()
  <init>(Ljava/lang/String;)V = .ctor(string)
  mAxisDependency = MAxisDependency
  mColors = MColors
  mDrawIcons = MDrawIcons
  mDrawValues = MDrawValues
  mGradientColor = MGradientColor
  mGradientColors = MGradientColors
  mHighlightEnabled = MHighlightEnabled
  mIconsOffset = MIconsOffset
  mValueColors = MValueColors
  mValueFormatter = MValueFormatter
  mValueTextSize = MValueTextSize
  mValueTypeface = MValueTypeface
  mVisible = MVisible
  getAxisDependency()Lcom/github/mikephil/charting/components/YAxis$AxisDependency; = AxisDependency
  setAxisDependency(Lcom/github/mikephil/charting/components/YAxis$AxisDependency;)V = AxisDependency
  getColor()I = Color
  setColor(I)V = Color
  getColors()Ljava/util/List; = Colors
  setColors(Ljava/util/List;)V = Colors
  getForm()Lcom/github/mikephil/charting/components/Legend$LegendForm; = Form
  setForm(Lcom/github/mikephil/charting/components/Legend$LegendForm;)V = Form
  getFormLineDashEffect()Landroid/graphics/DashPathEffect; = FormLineDashEffect
  setFormLineDashEffect(Landroid/graphics/DashPathEffect;)V = FormLineDashEffect
  getFormLineWidth()F = FormLineWidth
  setFormLineWidth(F)V = FormLineWidth
  getFormSize()F = FormSize
  setFormSize(F)V = FormSize
  getGradientColor()Lcom/github/mikephil/charting/model/GradientColor; = GradientColor
  getGradientColors()Ljava/util/List; = GradientColors
  setGradientColors(Ljava/util/List;)V = GradientColors
  isHighlightEnabled()Z = HighlightEnabled
  setHighlightEnabled(Z)V = HighlightEnabled
  getIconsOffset()Lcom/github/mikephil/charting/utils/MPPointF; = IconsOffset
  setIconsOffset(Lcom/github/mikephil/charting/utils/MPPointF;)V = IconsOffset
  isDrawIconsEnabled()Z = IsDrawIconsEnabled
  isDrawValuesEnabled()Z = IsDrawValuesEnabled
  getLabel()Ljava/lang/String; = Label
  setLabel(Ljava/lang/String;)V = Label
  getValueColors()Ljava/util/List; = ValueColors
  getValueFormatter()Lcom/github/mikephil/charting/formatter/IValueFormatter; = ValueFormatter
  setValueFormatter(Lcom/github/mikephil/charting/formatter/IValueFormatter;)V = ValueFormatter
  getValueTextColor()I = ValueTextColor
  setValueTextColor(I)V = ValueTextColor
  getValueTextSize()F = ValueTextSize
  setValueTextSize(F)V = ValueTextSize
  getValueTypeface()Landroid/graphics/Typeface; = ValueTypeface
  setValueTypeface(Landroid/graphics/Typeface;)V = ValueTypeface
  isVisible()Z = Visible
  setVisible(Z)V = Visible
  addColor(I)V = AddColor(int)
  contains(Lcom/github/mikephil/charting/data/Entry;)Z = Contains(Java.Lang.Object)
  copy(Lcom/github/mikephil/charting/data/BaseDataSet;)V = Copy(MikePhil.Charting.Data.BaseDataSet)
  getColor(I)I = GetColor(int)
  getGradientColor(I)Lcom/github/mikephil/charting/model/GradientColor; = GetGradientColor(int)
  getIndexInEntries(I)I = GetIndexInEntries(int)
  getValueTextColor(I)I = GetValueTextColor(int)
  needsFormatter()Z = NeedsFormatter()
  notifyDataSetChanged()V = NotifyDataSetChanged()
  removeEntry(I)Z = RemoveEntry(int)
  removeEntryByXValue(F)Z = RemoveEntryByXValue(float)
  removeFirst()Z = RemoveFirst()
  removeLast()Z = RemoveLast()
  resetColors()V = ResetColors()
  setColor(II)V = SetColor(int, int)
  setColors([I)V = SetColors(params int[])
  setColors([ILandroid/content/Context;)V = SetColors(int[], Android.Content.Context)
  setColors([II)V = SetColors(int[], int)
  setDrawIcons(Z)V = SetDrawIcons(bool)
  setDrawValues(Z)V = SetDrawValues(bool)
  setGradientColor(II)V = SetGradientColor(int, int)
  setValueTextColors(Ljava/util/List;)V = SetValueTextColors(System.Collections.Generic.IList<Java.Lang.Integer>)
com/github/mikephil/charting/data/BaseEntry = MikePhil.Charting.Data.BaseEntry
  <init>()V = .ctor()
  <init>(F)V = .ctor(float)
  <init>(FLandroid/graphics/drawable/Drawable;)V = .ctor(float, Android.Graphics.Drawables.Drawable)
  <init>(FLandroid/graphics/drawable/Drawable;Ljava/lang/Object;)V = .ctor(float, Android.Graphics.Drawables.Drawable, Java.Lang.Object)
  <init>(FLjava/lang/Object;)V = .ctor(float, Java.Lang.Object)
  getData()Ljava/lang/Object; = Data
  setData(Ljava/lang/Object;)V = Data
  getIcon()Landroid/graphics/drawable/Drawable; = Icon
  setIcon(Landroid/graphics/drawable/Drawable;)V = Icon
  getY()F = GetY()
  setY(F)V = SetY(float)
com/github/mikephil/charting/data/BubbleData = MikePhil.Charting.Data.BubbleData
  <init>()V = .ctor()
  <init>([Lcom/github/mikephil/charting/interfaces/datasets/IBubbleDataSet;)V = .ctor(params MikePhil.Charting.Interfaces.Datasets.IBubbleDataSet[])
  <init>(Ljava/util/List;)V = .ctor(System.Collections.Generic.IList<MikePhil.Charting.Interfaces.Datasets.IBubbleDataSet>)
  setHighlightCircleWidth(F)V = SetHighlightCircleWidth(float)
com/github/mikephil/charting/data/BubbleDataSet = MikePhil.Charting.Data.BubbleDataSet
  <init>(Ljava/util/List;Ljava/lang/String;)V = .ctor(System.Collections.Generic.IList<MikePhil.Charting.Data.BubbleEntry>, string)
  mMaxSize = MMaxSize
  mNormalizeSize = MNormalizeSize
  getHighlightCircleWidth()F = HighlightCircleWidth
  setHighlightCircleWidth(F)V = HighlightCircleWidth
  isNormalizeSizeEnabled()Z = IsNormalizeSizeEnabled
  getMaxSize()F = MaxSize
  calcMinMax(Lcom/github/mikephil/charting/data/BubbleEntry;)V = CalcMinMax(MikePhil.Charting.Data.BubbleEntry)
  copy()Lcom/github/mikephil/charting/data/DataSet; = Copy()
  copy(Lcom/github/mikephil/charting/data/BubbleDataSet;)V = Copy(MikePhil.Charting.Data.BubbleDataSet)
  setNormalizeSizeEnabled(Z)V = SetNormalizeSizeEnabled(bool)
com/github/mikephil/charting/data/BubbleEntry = MikePhil.Charting.Data.BubbleEntry
  <init>(FFF)V = .ctor(float, float, float)
  <init>(FFFLandroid/graphics/drawable/Drawable;)V = .ctor(float, float, float, Android.Graphics.Drawables.Drawable)
  <init>(FFFLandroid/graphics/drawable/Drawable;Ljava/lang/Object;)V = .ctor(float, float, float, Android.Graphics.Drawables.Drawable, Java.Lang.Object)
  <init>(FFFLjava/lang/Object;)V = .ctor(float, float, float, Java.Lang.Object)
  getSize()F = Size
  setSize(F)V = Size
com/github/mikephil/charting/data/CandleData = MikePhil.Charting.Data.CandleData
  <init>()V = .ctor()
  <init>([Lcom/github/mikephil/charting/interfaces/datasets/ICandleDataSet;)V = .ctor(params MikePhil.Charting.Interfaces.Datasets.ICandleDataSet[])
  <init>(Ljava/util/List;)V = .ctor(System.Collections.Generic.IList<MikePhil.Charting.Interfaces.Datasets.ICandleDataSet>)
com/github/mikephil/charting/data/CandleDataSet = MikePhil.Charting.Data.CandleDataSet
  <init>(Ljava/util/List;Ljava/lang/String;)V = .ctor(System.Collections.Generic.IList<MikePhil.Charting.Data.CandleEntry>, string)
  mDecreasingColor = MDecreasingColor
  mDecreasingPaintStyle = MDecreasingPaintStyle
  mIncreasingColor = MIncreasingColor
  mIncreasingPaintStyle = MIncreasingPaintStyle
  mNeutralColor = MNeutralColor
  mShadowColor = MShadowColor
  getBarSpace()F = BarSpace
  setBarSpace(F)V = BarSpace
  getDecreasingColor()I = DecreasingColor
  setDecreasingColor(I)V = DecreasingColor
  getDecreasingPaintStyle()Landroid/graphics/Paint$Style; = DecreasingPaintStyle
  setDecreasingPaintStyle(Landroid/graphics/Paint$Style;)V = DecreasingPaintStyle
  getIncreasingColor()I = IncreasingColor
  setIncreasingColor(I)V = IncreasingColor
  getIncreasingPaintStyle()Landroid/graphics/Paint$Style; = IncreasingPaintStyle
  setIncreasingPaintStyle(Landroid/graphics/Paint$Style;)V = IncreasingPaintStyle
  getNeutralColor()I = NeutralColor
  setNeutralColor(I)V = NeutralColor
  getShadowColor()I = ShadowColor
  setShadowColor(I)V = ShadowColor
  getShadowColorSameAsCandle()Z = ShadowColorSameAsCandle
  setShadowColorSameAsCandle(Z)V = ShadowColorSameAsCandle
  getShadowWidth()F = ShadowWidth
  setShadowWidth(F)V = ShadowWidth
  getShowCandleBar()Z = ShowCandleBar
  setShowCandleBar(Z)V = ShowCandleBar
  calcMinMax(Lcom/github/mikephil/charting/data/CandleEntry;)V = CalcMinMax(MikePhil.Charting.Data.CandleEntry)
  calcMinMaxY(Lcom/github/mikephil/charting/data/CandleEntry;)V = CalcMinMaxY(MikePhil.Charting.Data.CandleEntry)
  copy()Lcom/github/mikephil/charting/data/DataSet; = Copy()
  copy(Lcom/github/mikephil/charting/data/CandleDataSet;)V = Copy(MikePhil.Charting.Data.CandleDataSet)
com/github/mikephil/charting/data/CandleEntry = MikePhil.Charting.Data.CandleEntry
  <init>(FFFFF)V = .ctor(float, float, float, float, float)
  <init>(FFFFFLandroid/graphics/drawable/Drawable;)V = .ctor(float, float, float, float, float, Android.Graphics.Drawables.Drawable)
  <init>(FFFFFLandroid/graphics/drawable/Drawable;Ljava/lang/Object;)V = .ctor(float, float, float, float, float, Android.Graphics.Drawables.Drawable, Java.Lang.Object)
  <init>(FFFFFLjava/lang/Object;)V = .ctor(float, float, float, float, float, Java.Lang.Object)
  getBodyRange()F = BodyRange
  getClose()F = Close
  setClose(F)V = Close
  getHigh()F = High
  setHigh(F)V = High
  getLow()F = Low
  setLow(F)V = Low
  getOpen()F = Open
  setOpen(F)V = Open
  getShadowRange()F = ShadowRange
com/github/mikephil/charting/data/ChartData = MikePhil.Charting.Data.ChartData
  <init>()V = .ctor()
  <init>([Lcom/github/mikephil/charting/interfaces/datasets/IDataSet;)V = .ctor(params Java.Lang.Object[])
  <init>(Ljava/util/List;)V = .ctor(System.Collections.IList)
  mDataSets = MDataSets
  mLeftAxisMax = MLeftAxisMax
  mLeftAxisMin = MLeftAxisMin
  mRightAxisMax = MRightAxisMax
  mRightAxisMin = MRightAxisMin
  mXMax = MXMax
  mXMin = MXMin
  mYMax = MYMax
  mYMin = MYMin
  getDataSetCount()I = DataSetCount
  getDataSets()Ljava/util/List; = DataSets
  getEntryCount()I = EntryCount
  isHighlightEnabled()Z = HighlightEnabled
  setHighlightEnabled(Z)V = HighlightEnabled
  getMaxEntryCountSet()Lcom/github/mikephil/charting/interfaces/datasets/IDataSet; = MaxEntryCountSet
  getXMax()F = XMax
  getXMin()F = XMin
  getYMax()F = YMax
  getYMin()F = YMin
  addDataSet(Lcom/github/mikephil/charting/interfaces/datasets/IDataSet;)V = AddDataSet(Java.Lang.Object)
  addEntry(Lcom/github/mikephil/charting/data/Entry;I)V = AddEntry(MikePhil.Charting.Data.Entry, int)
  calcMinMax()V = CalcMinMax()
  calcMinMax(Lcom/github/mikephil/charting/data/Entry;Lcom/github/mikephil/charting/components/YAxis$AxisDependency;)V = CalcMinMax(MikePhil.Charting.Data.Entry, MikePhil.Charting.Components.YAxis.AxisDependency)
  calcMinMax(Lcom/github/mikephil/charting/interfaces/datasets/IDataSet;)V = CalcMinMax(Java.Lang.Object)
  calcMinMaxY(FF)V = CalcMinMaxY(float, float)
  clearValues()V = ClearValues()
  contains(Lcom/github/mikephil/charting/interfaces/datasets/IDataSet;)Z = Contains(Java.Lang.Object)
  getColors()[I = GetColors()
  getDataSetByIndex(I)Lcom/github/mikephil/charting/interfaces/datasets/IDataSet; = GetDataSetByIndex(int)
  getDataSetByLabel(Ljava/lang/String;Z)Lcom/github/mikephil/charting/interfaces/datasets/IDataSet; = GetDataSetByLabel(string, bool)
  getDataSetForEntry(Lcom/github/mikephil/charting/data/Entry;)Lcom/github/mikephil/charting/interfaces/datasets/IDataSet; = GetDataSetForEntry(MikePhil.Charting.Data.Entry)
  getDataSetIndexByLabel(Ljava/util/List;Ljava/lang/String;Z)I = GetDataSetIndexByLabel(System.Collections.IList, string, bool)
  getDataSetLabels()[Ljava/lang/String; = GetDataSetLabels()
  getEntryForHighlight(Lcom/github/mikephil/charting/highlight/Highlight;)Lcom/github/mikephil/charting/data/Entry; = GetEntryForHighlight(MikePhil.Charting.Highlight.Highlight)
  getFirstLeft(Ljava/util/List;)Lcom/github/mikephil/charting/interfaces/datasets/IDataSet; = GetFirstLeft(System.Collections.IList)
  getFirstRight(Ljava/util/List;)Lcom/github/mikephil/charting/interfaces/datasets/IDataSet; = GetFirstRight(System.Collections.IList)
  getIndexOfDataSet(Lcom/github/mikephil/charting/interfaces/datasets/IDataSet;)I = GetIndexOfDataSet(Java.Lang.Object)
  getYMax(Lcom/github/mikephil/charting/components/YAxis$AxisDependency;)F = GetYMax(MikePhil.Charting.Components.YAxis.AxisDependency)
  getYMin(Lcom/github/mikephil/charting/components/YAxis$AxisDependency;)F = GetYMin(MikePhil.Charting.Components.YAxis.AxisDependency)
  notifyDataChanged()V = NotifyDataChanged()
  removeDataSet(I)Z = RemoveDataSet(int)
  removeDataSet(Lcom/github/mikephil/charting/interfaces/datasets/IDataSet;)Z = RemoveDataSet(Java.Lang.Object)
  removeEntry(Lcom/github/mikephil/charting/data/Entry;I)Z = RemoveEntry(MikePhil.Charting.Data.Entry, int)
  removeEntry(FI)Z = RemoveEntry(float, int)
  setDrawValues(Z)V = SetDrawValues(bool)
  setValueFormatter(Lcom/github/mikephil/charting/formatter/IValueFormatter;)V = SetValueFormatter(MikePhil.Charting.Formatter.IValueFormatter)
  setValueTextColor(I)V = SetValueTextColor(int)
  setValueTextColors(Ljava/util/List;)V = SetValueTextColors(System.Collections.Generic.IList<Java.Lang.Integer>)
  setValueTextSize(F)V = SetValueTextSize(float)
  setValueTypeface(Landroid/graphics/Typeface;)V = SetValueTypeface(Android.Graphics.Typeface)
com/github/mikephil/charting/data/CombinedData = MikePhil.Charting.Data.CombinedData
  <init>()V = .ctor()
  getAllData()Ljava/util/List; = AllData
  getBarData()Lcom/github/mikephil/charting/data/BarData; = BarData
  getBubbleData()Lcom/github/mikephil/charting/data/BubbleData; = BubbleData
  getCandleData()Lcom/github/mikephil/charting/data/CandleData; = CandleData
  getLineData()Lcom/github/mikephil/charting/data/LineData; = LineData
  getScatterData()Lcom/github/mikephil/charting/data/ScatterData; = ScatterData
  calcMinMax()V = CalcMinMax()
  getDataByIndex(I)Lcom/github/mikephil/charting/data/BarLineScatterCandleBubbleData; = GetDataByIndex(int)
  getDataIndex(Lcom/github/mikephil/charting/data/ChartData;)I = GetDataIndex(MikePhil.Charting.Data.ChartData)
  getDataSetByHighlight(Lcom/github/mikephil/charting/highlight/Highlight;)Lcom/github/mikephil/charting/interfaces/datasets/IBarLineScatterCandleBubbleDataSet; = GetDataSetByHighlight(MikePhil.Charting.Highlight.Highlight)
  removeDataSet(Lcom/github/mikephil/charting/interfaces/datasets/IBarLineScatterCandleBubbleDataSet;)Z = RemoveDataSet(MikePhil.Charting.Interfaces.Datasets.IBarLineScatterCandleBubbleDataSet)
  setData(Lcom/github/mikephil/charting/data/BarData;)V = SetData(MikePhil.Charting.Data.BarData)
  setData(Lcom/github/mikephil/charting/data/BubbleData;)V = SetData(MikePhil.Charting.Data.BubbleData)
  setData(Lcom/github/mikephil/charting/data/CandleData;)V = SetData(MikePhil.Charting.Data.CandleData)
  setData(Lcom/github/mikephil/charting/data/LineData;)V = SetData(MikePhil.Charting.Data.LineData)
  setData(Lcom/github/mikephil/charting/data/ScatterData;)V = SetData(MikePhil.Charting.Data.ScatterData)
com/github/mikephil/charting/data/DataSet = MikePhil.Charting.Data.DataSet
  <init>(Ljava/util/List;Ljava/lang/String;)V = .ctor(System.Collections.IList, string)
  mValues = MValues
  mXMax = MXMax
  mXMin = MXMin
  mYMax = MYMax
  mYMin = MYMin
  getEntryCount()I = EntryCount
  getValues()Ljava/util/List; = Values
  setValues(Ljava/util/List;)V = Values
  getXMax()F = XMax
  getXMin()F = XMin
  getYMax()F = YMax
  getYMin()F = YMin
  addEntry(Lcom/github/mikephil/charting/data/Entry;)Z = AddEntry(Java.Lang.Object)
  addEntryOrdered(Lcom/github/mikephil/charting/data/Entry;)V = AddEntryOrdered(Java.Lang.Object)
  calcMinMax()V = CalcMinMax()
  calcMinMax(Lcom/github/mikephil/charting/data/Entry;)V = CalcMinMax(Java.Lang.Object)
  calcMinMaxX(Lcom/github/mikephil/charting/data/Entry;)V = CalcMinMaxX(Java.Lang.Object)
  calcMinMaxY(FF)V = CalcMinMaxY(float, float)
  calcMinMaxY(Lcom/github/mikephil/charting/data/Entry;)V = CalcMinMaxY(Java.Lang.Object)
  clear()V = Clear()
  copy()Lcom/github/mikephil/charting/data/DataSet; = Copy()
  copy(Lcom/github/mikephil/charting/data/DataSet;)V = Copy(MikePhil.Charting.Data.DataSet)
  getEntriesForXValue(F)Ljava/util/List; = GetEntriesForXValue(float)
  getEntryForIndex(I)Lcom/github/mikephil/charting/data/Entry; = GetEntryForIndex(int)
  getEntryForXValue(FF)Lcom/github/mikephil/charting/data/Entry; = GetEntryForXValue(float, float)
  getEntryForXValue(FFLcom/github/mikephil/charting/data/DataSet$Rounding;)Lcom/github/mikephil/charting/data/Entry; = GetEntryForXValue(float, float, MikePhil.Charting.Data.DataSet.Rounding)
  getEntryIndex(Lcom/github/mikephil/charting/data/Entry;)I = GetEntryIndex(MikePhil.Charting.Data.Entry)
  getEntryIndex(FFLcom/github/mikephil/charting/data/DataSet$Rounding;)I = GetEntryIndex(float, float, MikePhil.Charting.Data.DataSet.Rounding)
  removeEntry(Lcom/github/mikephil/charting/data/Entry;)Z = RemoveEntry(Java.Lang.Object)
  toSimpleString()Ljava/lang/String; = ToSimpleString()
com/github/mikephil/charting/data/Entry = MikePhil.Charting.Data.Entry
  <init>()V = .ctor()
  <init>(FF)V = .ctor(float, float)
  <init>(FFLandroid/graphics/drawable/Drawable;)V = .ctor(float, float, Android.Graphics.Drawables.Drawable)
  <init>(FFLandroid/graphics/drawable/Drawable;Ljava/lang/Object;)V = .ctor(float, float, Android.Graphics.Drawables.Drawable, Java.Lang.Object)
  <init>(FFLjava/lang/Object;)V = .ctor(float, float, Java.Lang.Object)
  <init>(Landroid/os/Parcel;)V = .ctor(Android.OS.Parcel)
  CREATOR = Creator
  copy()Lcom/github/mikephil/charting/data/Entry; = Copy()
  describeContents()I = DescribeContents()
  equalTo(Lcom/github/mikephil/charting/data/Entry;)Z = EqualTo(MikePhil.Charting.Data.Entry)
  getX()F = GetX()
  setX(F)V = SetX(float)
  writeToParcel(Landroid/os/Parcel;I)V = WriteToParcel(Android.OS.Parcel, Android.OS.ParcelableWriteFlags)
com/github/mikephil/charting/data/filter/Approximator = MikePhil.Charting.Data.Filter.Approximator
  <init>()V = .ctor()
  reduceWithDouglasPeucker([FF)[F = ReduceWithDouglasPeucker(float[], float)
com/github/mikephil/charting/data/LineData = MikePhil.Charting.Data.LineData
  <init>()V = .ctor()
  <init>([Lcom/github/mikephil/charting/interfaces/datasets/ILineDataSet;)V = .ctor(params MikePhil.Charting.Interfaces.Datasets.ILineDataSet[])
  <init>(Ljava/util/List;)V = .ctor(System.Collections.Generic.IList<MikePhil.Charting.Interfaces.Datasets.ILineDataSet>)
com/github/mikephil/charting/data/LineDataSet = MikePhil.Charting.Data.LineDataSet
  <init>(Ljava/util/List;Ljava/lang/String;)V = .ctor(System.Collections.Generic.IList<MikePhil.Charting.Data.Entry>, string)
  getCircleColorCount()I = CircleColorCount
  getCircleColors()Ljava/util/List; = CircleColors
  setCircleColors(Ljava/util/List;)V = CircleColors
  getCircleHoleColor()I = CircleHoleColor
  setCircleHoleColor(I)V = CircleHoleColor
  getCircleHoleRadius()F = CircleHoleRadius
  setCircleHoleRadius(F)V = CircleHoleRadius
  getCircleRadius()F = CircleRadius
  setCircleRadius(F)V = CircleRadius
  getCircleSize()F = CircleSize
  setCircleSize(F)V = CircleSize
  getCubicIntensity()F = CubicIntensity
  setCubicIntensity(F)V = CubicIntensity
  getDashPathEffect()Landroid/graphics/DashPathEffect; = DashPathEffect
  getFillFormatter()Lcom/github/mikephil/charting/formatter/IFillFormatter; = FillFormatter
  setFillFormatter(Lcom/github/mikephil/charting/formatter/IFillFormatter;)V = FillFormatter
  isDashedLineEnabled()Z = IsDashedLineEnabled
  isDrawCircleHoleEnabled()Z = IsDrawCircleHoleEnabled
  isDrawCirclesEnabled()Z = IsDrawCirclesEnabled
  isDrawCubicEnabled()Z = IsDrawCubicEnabled
  isDrawSteppedEnabled()Z = IsDrawSteppedEnabled
  copy()Lcom/github/mikephil/charting/data/DataSet; = Copy()
  copy(Lcom/github/mikephil/charting/data/LineDataSet;)V = Copy(MikePhil.Charting.Data.LineDataSet)
  disableDashedLine()V = DisableDashedLine()
  enableDashedLine(FFF)V = EnableDashedLine(float, float, float)
  getCircleColor(I)I = GetCircleColor(int)
  getMode()Lcom/github/mikephil/charting/data/LineDataSet$Mode; = GetMode()
  resetCircleColors()V = ResetCircleColors()
  setCircleColor(I)V = SetCircleColor(int)
  setCircleColors([I)V = SetCircleColors(params int[])
  setCircleColors([ILandroid/content/Context;)V = SetCircleColors(int[], Android.Content.Context)
  setDrawCircleHole(Z)V = SetDrawCircleHole(bool)
  setDrawCircles(Z)V = SetDrawCircles(bool)
  setMode(Lcom/github/mikephil/charting/data/LineDataSet$Mode;)V = SetMode(MikePhil.Charting.Data.LineDataSet.Mode)
com/github/mikephil/charting/data/LineRadarDataSet = MikePhil.Charting.Data.LineRadarDataSet
  <init>(Ljava/util/List;Ljava/lang/String;)V = .ctor(System.Collections.IList, string)
  mFillDrawable = MFillDrawable
  getFillAlpha()I = FillAlpha
  setFillAlpha(I)V = FillAlpha
  getFillColor()I = FillColor
  setFillColor(I)V = FillColor
  getFillDrawable()Landroid/graphics/drawable/Drawable; = FillDrawable
  setFillDrawable(Landroid/graphics/drawable/Drawable;)V = FillDrawable
  isDrawFilledEnabled()Z = IsDrawFilledEnabled
  getLineWidth()F = LineWidth
  setLineWidth(F)V = LineWidth
  copy(Lcom/github/mikephil/charting/data/LineRadarDataSet;)V = Copy(MikePhil.Charting.Data.LineRadarDataSet)
  setDrawFilled(Z)V = SetDrawFilled(bool)
com/github/mikephil/charting/data/LineScatterCandleRadarDataSet = MikePhil.Charting.Data.LineScatterCandleRadarDataSet
  <init>(Ljava/util/List;Ljava/lang/String;)V = .ctor(System.Collections.IList, string)
  mDrawHorizontalHighlightIndicator = MDrawHorizontalHighlightIndicator
  mDrawVerticalHighlightIndicator = MDrawVerticalHighlightIndicator
  mHighlightDashPathEffect = MHighlightDashPathEffect
  mHighlightLineWidth = MHighlightLineWidth
  getDashPathEffectHighlight()Landroid/graphics/DashPathEffect; = DashPathEffectHighlight
  getHighlightLineWidth()F = HighlightLineWidth
  setHighlightLineWidth(F)V = HighlightLineWidth
  isDashedHighlightLineEnabled()Z = IsDashedHighlightLineEnabled
  isHorizontalHighlightIndicatorEnabled()Z = IsHorizontalHighlightIndicatorEnabled
  isVerticalHighlightIndicatorEnabled()Z = IsVerticalHighlightIndicatorEnabled
  copy(Lcom/github/mikephil/charting/data/LineScatterCandleRadarDataSet;)V = Copy(MikePhil.Charting.Data.LineScatterCandleRadarDataSet)
  disableDashedHighlightLine()V = DisableDashedHighlightLine()
  enableDashedHighlightLine(FFF)V = EnableDashedHighlightLine(float, float, float)
  setDrawHighlightIndicators(Z)V = SetDrawHighlightIndicators(bool)
  setDrawHorizontalHighlightIndicator(Z)V = SetDrawHorizontalHighlightIndicator(bool)
  setDrawVerticalHighlightIndicator(Z)V = SetDrawVerticalHighlightIndicator(bool)
com/github/mikephil/charting/data/PieData = MikePhil.Charting.Data.PieData
  <init>()V = .ctor()
  <init>(Lcom/github/mikephil/charting/interfaces/datasets/IPieDataSet;)V = .ctor(MikePhil.Charting.Interfaces.Datasets.IPieDataSet)
  getDataSet()Lcom/github/mikephil/charting/interfaces/datasets/IPieDataSet; = DataSet
  setDataSet(Lcom/github/mikephil/charting/interfaces/datasets/IPieDataSet;)V = DataSet
  getYValueSum()F = YValueSum
com/github/mikephil/charting/data/PieDataSet = MikePhil.Charting.Data.PieDataSet
  <init>(Ljava/util/List;Ljava/lang/String;)V = .ctor(System.Collections.Generic.IList<MikePhil.Charting.Data.PieEntry>, string)
  isAutomaticallyDisableSliceSpacingEnabled()Z = IsAutomaticallyDisableSliceSpacingEnabled
  isUsingSliceColorAsValueLineColor()Z = IsUsingSliceColorAsValueLineColor
  isValueLineVariableLength()Z = IsValueLineVariableLength
  getSelectionShift()F = SelectionShift
  setSelectionShift(F)V = SelectionShift
  getSliceSpace()F = SliceSpace
  setSliceSpace(F)V = SliceSpace
  getValueLineColor()I = ValueLineColor
  setValueLineColor(I)V = ValueLineColor
  getValueLinePart1Length()F = ValueLinePart1Length
  setValueLinePart1Length(F)V = ValueLinePart1Length
  getValueLinePart1OffsetPercentage()F = ValueLinePart1OffsetPercentage
  setValueLinePart1OffsetPercentage(F)V = ValueLinePart1OffsetPercentage
  getValueLinePart2Length()F = ValueLinePart2Length
  setValueLinePart2Length(F)V = ValueLinePart2Length
  getValueLineWidth()F = ValueLineWidth
  setValueLineWidth(F)V = ValueLineWidth
  getXValuePosition()Lcom/github/mikephil/charting/data/PieDataSet$ValuePosition; = XValuePosition
  setXValuePosition(Lcom/github/mikephil/charting/data/PieDataSet$ValuePosition;)V = XValuePosition
  getYValuePosition()Lcom/github/mikephil/charting/data/PieDataSet$ValuePosition; = YValuePosition
  setYValuePosition(Lcom/github/mikephil/charting/data/PieDataSet$ValuePosition;)V = YValuePosition
  calcMinMax(Lcom/github/mikephil/charting/data/PieEntry;)V = CalcMinMax(MikePhil.Charting.Data.PieEntry)
  copy()Lcom/github/mikephil/charting/data/DataSet; = Copy()
  copy(Lcom/github/mikephil/charting/data/PieDataSet;)V = Copy(MikePhil.Charting.Data.PieDataSet)
  setAutomaticallyDisableSliceSpacing(Z)V = SetAutomaticallyDisableSliceSpacing(bool)
  setUsingSliceColorAsValueLineColor(Z)V = SetUsingSliceColorAsValueLineColor(bool)
  setValueLineVariableLength(Z)V = SetValueLineVariableLength(bool)
com/github/mikephil/charting/data/PieEntry = MikePhil.Charting.Data.PieEntry
  <init>(F)V = .ctor(float)
  <init>(FLandroid/graphics/drawable/Drawable;)V = .ctor(float, Android.Graphics.Drawables.Drawable)
  <init>(FLandroid/graphics/drawable/Drawable;Ljava/lang/Object;)V = .ctor(float, Android.Graphics.Drawables.Drawable, Java.Lang.Object)
  <init>(FLjava/lang/Object;)V = .ctor(float, Java.Lang.Object)
  <init>(FLjava/lang/String;)V = .ctor(float, string)
  <init>(FLjava/lang/String;Landroid/graphics/drawable/Drawable;)V = .ctor(float, string, Android.Graphics.Drawables.Drawable)
  <init>(FLjava/lang/String;Landroid/graphics/drawable/Drawable;Ljava/lang/Object;)V = .ctor(float, string, Android.Graphics.Drawables.Drawable, Java.Lang.Object)
  <init>(FLjava/lang/String;Ljava/lang/Object;)V = .ctor(float, string, Java.Lang.Object)
  getLabel()Ljava/lang/String; = Label
  setLabel(Ljava/lang/String;)V = Label
  getValue()F = Value
com/github/mikephil/charting/data/RadarData = MikePhil.Charting.Data.RadarData
  <init>()V = .ctor()
  <init>([Lcom/github/mikephil/charting/interfaces/datasets/IRadarDataSet;)V = .ctor(params MikePhil.Charting.Interfaces.Datasets.IRadarDataSet[])
  <init>(Ljava/util/List;)V = .ctor(System.Collections.Generic.IList<MikePhil.Charting.Interfaces.Datasets.IRadarDataSet>)
  getLabels()Ljava/util/List; = Labels
  setLabels(Ljava/util/List;)V = Labels
  setLabels([Ljava/lang/String;)V = SetLabels(params string[])
com/github/mikephil/charting/data/RadarDataSet = MikePhil.Charting.Data.RadarDataSet
  <init>(Ljava/util/List;Ljava/lang/String;)V = .ctor(System.Collections.Generic.IList<MikePhil.Charting.Data.RadarEntry>, string)
  mDrawHighlightCircleEnabled = MDrawHighlightCircleEnabled
  mHighlightCircleFillColor = MHighlightCircleFillColor
  mHighlightCircleInnerRadius = MHighlightCircleInnerRadius
  mHighlightCircleOuterRadius = MHighlightCircleOuterRadius
  mHighlightCircleStrokeAlpha = MHighlightCircleStrokeAlpha
  mHighlightCircleStrokeColor = MHighlightCircleStrokeColor
  mHighlightCircleStrokeWidth = MHighlightCircleStrokeWidth
  isDrawHighlightCircleEnabled()Z = DrawHighlightCircleEnabled
  setDrawHighlightCircleEnabled(Z)V = DrawHighlightCircleEnabled
  getHighlightCircleFillColor()I = HighlightCircleFillColor
  setHighlightCircleFillColor(I)V = HighlightCircleFillColor
  getHighlightCircleInnerRadius()F = HighlightCircleInnerRadius
  setHighlightCircleInnerRadius(F)V = HighlightCircleInnerRadius
  getHighlightCircleOuterRadius()F = HighlightCircleOuterRadius
  setHighlightCircleOuterRadius(F)V = HighlightCircleOuterRadius
  getHighlightCircleStrokeAlpha()I = HighlightCircleStrokeAlpha
  setHighlightCircleStrokeAlpha(I)V = HighlightCircleStrokeAlpha
  getHighlightCircleStrokeColor()I = HighlightCircleStrokeColor
  setHighlightCircleStrokeColor(I)V = HighlightCircleStrokeColor
  getHighlightCircleStrokeWidth()F = HighlightCircleStrokeWidth
  setHighlightCircleStrokeWidth(F)V = HighlightCircleStrokeWidth
  copy()Lcom/github/mikephil/charting/data/DataSet; = Copy()
  copy(Lcom/github/mikephil/charting/data/RadarDataSet;)V = Copy(MikePhil.Charting.Data.RadarDataSet)
com/github/mikephil/charting/data/RadarEntry = MikePhil.Charting.Data.RadarEntry
  <init>(F)V = .ctor(float)
  <init>(FLjava/lang/Object;)V = .ctor(float, Java.Lang.Object)
  getValue()F = Value
com/github/mikephil/charting/data/ScatterData = MikePhil.Charting.Data.ScatterData
  <init>()V = .ctor()
  <init>([Lcom/github/mikephil/charting/interfaces/datasets/IScatterDataSet;)V = .ctor(params MikePhil.Charting.Interfaces.Datasets.IScatterDataSet[])
  <init>(Ljava/util/List;)V = .ctor(System.Collections.Generic.IList<MikePhil.Charting.Interfaces.Datasets.IScatterDataSet>)
  getGreatestShapeSize()F = GreatestShapeSize
com/github/mikephil/charting/data/ScatterDataSet = MikePhil.Charting.Data.ScatterDataSet
  <init>(Ljava/util/List;Ljava/lang/String;)V = .ctor(System.Collections.Generic.IList<MikePhil.Charting.Data.Entry>, string)
  mShapeRenderer = MShapeRenderer
  getScatterShapeHoleColor()I = ScatterShapeHoleColor
  setScatterShapeHoleColor(I)V = ScatterShapeHoleColor
  getScatterShapeHoleRadius()F = ScatterShapeHoleRadius
  setScatterShapeHoleRadius(F)V = ScatterShapeHoleRadius
  getScatterShapeSize()F = ScatterShapeSize
  setScatterShapeSize(F)V = ScatterShapeSize
  getShapeRenderer()Lcom/github/mikephil/charting/renderer/scatter/IShapeRenderer; = ShapeRenderer
  setShapeRenderer(Lcom/github/mikephil/charting/renderer/scatter/IShapeRenderer;)V = ShapeRenderer
  copy()Lcom/github/mikephil/charting/data/DataSet; = Copy()
  copy(Lcom/github/mikephil/charting/data/ScatterDataSet;)V = Copy(MikePhil.Charting.Data.ScatterDataSet)
  getRendererForShape(Lcom/github/mikephil/charting/charts/ScatterChart$ScatterShape;)Lcom/github/mikephil/charting/renderer/scatter/IShapeRenderer; = GetRendererForShape(MikePhil.Charting.Charts.ScatterChart.ScatterShape)
  setScatterShape(Lcom/github/mikephil/charting/charts/ScatterChart$ScatterShape;)V = SetScatterShape(MikePhil.Charting.Charts.ScatterChart.ScatterShape)
com/github/mikephil/charting/exception/DrawingDataSetNotCreatedException = MikePhil.Charting.Exception.DrawingDataSetNotCreatedException
  <init>()V = .ctor()
com/github/mikephil/charting/formatter/ColorFormatter = MikePhil.Charting.Formatter.IColorFormatter
  getColor(ILcom/github/mikephil/charting/data/Entry;Lcom/github/mikephil/charting/interfaces/datasets/IDataSet;)I = GetColor(int, MikePhil.Charting.Data.Entry, MikePhil.Charting.Interfaces.Datasets.IDataSet)
com/github/mikephil/charting/formatter/DefaultAxisValueFormatter = MikePhil.Charting.Formatter.DefaultAxisValueFormatter
  <init>(I)V = .ctor(int)
  digits = Digits
  mFormat = MFormat
  getDecimalDigits()I = DecimalDigits
  getFormattedValue(FLcom/github/mikephil/charting/components/AxisBase;)Ljava/lang/String; = GetFormattedValue(float, MikePhil.Charting.Components.AxisBase)
com/github/mikephil/charting/formatter/DefaultFillFormatter = MikePhil.Charting.Formatter.DefaultFillFormatter
  <init>()V = .ctor()
  getFillLinePosition(Lcom/github/mikephil/charting/interfaces/datasets/ILineDataSet;Lcom/github/mikephil/charting/interfaces/dataprovider/LineDataProvider;)F = GetFillLinePosition(MikePhil.Charting.Interfaces.Datasets.ILineDataSet, MikePhil.Charting.Interfaces.Dataprovider.ILineDataProvider)
com/github/mikephil/charting/formatter/DefaultValueFormatter = MikePhil.Charting.Formatter.DefaultValueFormatter
  <init>(I)V = .ctor(int)
  mDecimalDigits = MDecimalDigits
  mFormat = MFormat
  getDecimalDigits()I = DecimalDigits
  getFormattedValue(FLcom/github/mikephil/charting/data/Entry;ILcom/github/mikephil/charting/utils/ViewPortHandler;)Ljava/lang/String; = GetFormattedValue(float, MikePhil.Charting.Data.Entry, int, MikePhil.Charting.Util.ViewPortHandler)
  setup(I)V = Setup(int)
com/github/mikephil/charting/formatter/IAxisValueFormatter = MikePhil.Charting.Formatter.IAxisValueFormatter
  getFormattedValue(FLcom/github/mikephil/charting/components/AxisBase;)Ljava/lang/String; = GetFormattedValue(float, MikePhil.Charting.Components.AxisBase)
com/github/mikephil/charting/formatter/IFillFormatter = MikePhil.Charting.Formatter.IFillFormatter
  getFillLinePosition(Lcom/github/mikephil/charting/interfaces/datasets/ILineDataSet;Lcom/github/mikephil/charting/interfaces/dataprovider/LineDataProvider;)F = GetFillLinePosition(MikePhil.Charting.Interfaces.Datasets.ILineDataSet, MikePhil.Charting.Interfaces.Dataprovider.ILineDataProvider)
com/github/mikephil/charting/formatter/IndexAxisValueFormatter = MikePhil.Charting.Formatter.IndexAxisValueFormatter
  <init>()V = .ctor()
  <init>([Ljava/lang/String;)V = .ctor(string[])
  <init>(Ljava/util/Collection;)V = .ctor(System.Collections.Generic.ICollection<string>)
  getFormattedValue(FLcom/github/mikephil/charting/components/AxisBase;)Ljava/lang/String; = GetFormattedValue(float, MikePhil.Charting.Components.AxisBase)
  getValues()[Ljava/lang/String; = GetValues()
  setValues([Ljava/lang/String;)V = SetValues(string[])
com/github/mikephil/charting/formatter/IValueFormatter = MikePhil.Charting.Formatter.IValueFormatter
  getFormattedValue(FLcom/github/mikephil/charting/data/Entry;ILcom/github/mikephil/charting/utils/ViewPortHandler;)Ljava/lang/String; = GetFormattedValue(float, MikePhil.Charting.Data.Entry, int, MikePhil.Charting.Util.ViewPortHandler)
com/github/mikephil/charting/formatter/LargeValueFormatter = MikePhil.Charting.Formatter.LargeValueFormatter
  <init>()V = .ctor()
  <init>(Ljava/lang/String;)V = .ctor(string)
  getDecimalDigits()I = DecimalDigits
  getFormattedValue(FLcom/github/mikephil/charting/components/AxisBase;)Ljava/lang/String; = GetFormattedValue(float, MikePhil.Charting.Components.AxisBase)
  getFormattedValue(FLcom/github/mikephil/charting/data/Entry;ILcom/github/mikephil/charting/utils/ViewPortHandler;)Ljava/lang/String; = GetFormattedValue(float, MikePhil.Charting.Data.Entry, int, MikePhil.Charting.Util.ViewPortHandler)
  setAppendix(Ljava/lang/String;)V = SetAppendix(string)
  setMaxLength(I)V = SetMaxLength(int)
  setSuffix([Ljava/lang/String;)V = SetSuffix(string[])
com/github/mikephil/charting/formatter/PercentFormatter = MikePhil.Charting.Formatter.PercentFormatter
  <init>()V = .ctor()
  <init>(Ljava/text/DecimalFormat;)V = .ctor(Java.Text.DecimalFormat)
  mFormat = MFormat
  getDecimalDigits()I = DecimalDigits
  getFormattedValue(FLcom/github/mikephil/charting/components/AxisBase;)Ljava/lang/String; = GetFormattedValue(float, MikePhil.Charting.Components.AxisBase)
  getFormattedValue(FLcom/github/mikephil/charting/data/Entry;ILcom/github/mikephil/charting/utils/ViewPortHandler;)Ljava/lang/String; = GetFormattedValue(float, MikePhil.Charting.Data.Entry, int, MikePhil.Charting.Util.ViewPortHandler)
com/github/mikephil/charting/formatter/StackedValueFormatter = MikePhil.Charting.Formatter.StackedValueFormatter
  <init>(ZLjava/lang/String;I)V = .ctor(bool, string, int)
  getFormattedValue(FLcom/github/mikephil/charting/data/Entry;ILcom/github/mikephil/charting/utils/ViewPortHandler;)Ljava/lang/String; = GetFormattedValue(float, MikePhil.Charting.Data.Entry, int, MikePhil.Charting.Util.ViewPortHandler)
com/github/mikephil/charting/highlight/BarHighlighter = MikePhil.Charting.Highlight.BarHighlighter
  <init>(Lcom/github/mikephil/charting/interfaces/dataprovider/BarDataProvider;)V = .ctor(MikePhil.Charting.Interfaces.Dataprovider.IBarDataProvider)
  getClosestStackIndex([Lcom/github/mikephil/charting/highlight/Range;F)I = GetClosestStackIndex(MikePhil.Charting.Highlight.Range[], float)
  getStackedHighlight(Lcom/github/mikephil/charting/highlight/Highlight;Lcom/github/mikephil/charting/interfaces/datasets/IBarDataSet;FF)Lcom/github/mikephil/charting/highlight/Highlight; = GetStackedHighlight(MikePhil.Charting.Highlight.Highlight, MikePhil.Charting.Interfaces.Datasets.IBarDataSet, float, float)
com/github/mikephil/charting/highlight/ChartHighlighter = MikePhil.Charting.Highlight.ChartHighlighter
  <init>(Lcom/github/mikephil/charting/interfaces/dataprovider/BarLineScatterCandleBubbleDataProvider;)V = .ctor(Java.Lang.Object)
  mChart = MChart
  mHighlightBuffer = MHighlightBuffer
  getData()Lcom/github/mikephil/charting/data/BarLineScatterCandleBubbleData; = Data
  buildHighlights(Lcom/github/mikephil/charting/interfaces/datasets/IDataSet;IFLcom/github/mikephil/charting/data/DataSet$Rounding;)Ljava/util/List; = BuildHighlights(MikePhil.Charting.Interfaces.Datasets.IDataSet, int, float, MikePhil.Charting.Data.DataSet.Rounding)
  getClosestHighlightByPixel(Ljava/util/List;FFLcom/github/mikephil/charting/components/YAxis$AxisDependency;F)Lcom/github/mikephil/charting/highlight/Highlight; = GetClosestHighlightByPixel(System.Collections.Generic.IList<MikePhil.Charting.Highlight.Highlight>, float, float, MikePhil.Charting.Components.YAxis.AxisDependency, float)
  getDistance(FFFF)F = GetDistance(float, float, float, float)
  getHighlight(FF)Lcom/github/mikephil/charting/highlight/Highlight; = GetHighlight(float, float)
  getHighlightForX(FFF)Lcom/github/mikephil/charting/highlight/Highlight; = GetHighlightForX(float, float, float)
  getHighlightPos(Lcom/github/mikephil/charting/highlight/Highlight;)F = GetHighlightPos(MikePhil.Charting.Highlight.Highlight)
  getHighlightsAtXValue(FFF)Ljava/util/List; = GetHighlightsAtXValue(float, float, float)
  getMinimumDistance(Ljava/util/List;FLcom/github/mikephil/charting/components/YAxis$AxisDependency;)F = GetMinimumDistance(System.Collections.Generic.IList<MikePhil.Charting.Highlight.Highlight>, float, MikePhil.Charting.Components.YAxis.AxisDependency)
  getValsForTouch(FF)Lcom/github/mikephil/charting/utils/MPPointD; = GetValsForTouch(float, float)
com/github/mikephil/charting/highlight/CombinedHighlighter = MikePhil.Charting.Highlight.CombinedHighlighter
  <init>(Lcom/github/mikephil/charting/interfaces/dataprovider/CombinedDataProvider;Lcom/github/mikephil/charting/interfaces/dataprovider/BarDataProvider;)V = .ctor(MikePhil.Charting.Interfaces.Dataprovider.ICombinedDataProvider, MikePhil.Charting.Interfaces.Dataprovider.IBarDataProvider)
  barHighlighter = BarHighlighter
com/github/mikephil/charting/highlight/Highlight = MikePhil.Charting.Highlight.Highlight
  <init>(FFFFIILcom/github/mikephil/charting/components/YAxis$AxisDependency;)V = .ctor(float, float, float, float, int, int, MikePhil.Charting.Components.YAxis.AxisDependency)
  <init>(FFFFILcom/github/mikephil/charting/components/YAxis$AxisDependency;)V = .ctor(float, float, float, float, int, MikePhil.Charting.Components.YAxis.AxisDependency)
  <init>(FFI)V = .ctor(float, float, int)
  <init>(FII)V = .ctor(float, int, int)
  getAxis()Lcom/github/mikephil/charting/components/YAxis$AxisDependency; = Axis
  getDataIndex()I = DataIndex
  setDataIndex(I)V = DataIndex
  getDataSetIndex()I = DataSetIndex
  getDrawX()F = DrawX
  getDrawY()F = DrawY
  isStacked()Z = IsStacked
  getStackIndex()I = StackIndex
  getXPx()F = XPx
  getYPx()F = YPx
  equalTo(Lcom/github/mikephil/charting/highlight/Highlight;)Z = EqualTo(MikePhil.Charting.Highlight.Highlight)
  getX()F = GetX()
  getY()F = GetY()
  setDraw(FF)V = SetDraw(float, float)
com/github/mikephil/charting/highlight/HorizontalBarHighlighter = MikePhil.Charting.Highlight.HorizontalBarHighlighter
  <init>(Lcom/github/mikephil/charting/interfaces/dataprovider/BarDataProvider;)V = .ctor(MikePhil.Charting.Interfaces.Dataprovider.IBarDataProvider)
com/github/mikephil/charting/highlight/IHighlighter = MikePhil.Charting.Highlight.IHighlighter
  getHighlight(FF)Lcom/github/mikephil/charting/highlight/Highlight; = GetHighlight(float, float)
com/github/mikephil/charting/highlight/PieHighlighter = MikePhil.Charting.Highlight.PieHighlighter
  <init>(Lcom/github/mikephil/charting/charts/PieChart;)V = .ctor(MikePhil.Charting.Charts.PieChart)
  getClosestHighlight(IFF)Lcom/github/mikephil/charting/highlight/Highlight; = GetClosestHighlight(int, float, float)
com/github/mikephil/charting/highlight/PieRadarHighlighter = MikePhil.Charting.Highlight.PieRadarHighlighter
  <init>(Lcom/github/mikephil/charting/charts/PieRadarChartBase;)V = .ctor(Java.Lang.Object)
  mChart = MChart
  mHighlightBuffer = MHighlightBuffer
  getClosestHighlight(IFF)Lcom/github/mikephil/charting/highlight/Highlight; = GetClosestHighlight(int, float, float)
  getHighlight(FF)Lcom/github/mikephil/charting/highlight/Highlight; = GetHighlight(float, float)
com/github/mikephil/charting/highlight/RadarHighlighter = MikePhil.Charting.Highlight.RadarHighlighter
  <init>(Lcom/github/mikephil/charting/charts/RadarChart;)V = .ctor(MikePhil.Charting.Charts.RadarChart)
  getClosestHighlight(IFF)Lcom/github/mikephil/charting/highlight/Highlight; = GetClosestHighlight(int, float, float)
  getHighlightsAtIndex(I)Ljava/util/List; = GetHighlightsAtIndex(int)
com/github/mikephil/charting/highlight/Range = MikePhil.Charting.Highlight.Range
  <init>(FF)V = .ctor(float, float)
  from = From
  to = To
  contains(F)Z = Contains(float)
  isLarger(F)Z = IsLarger(float)
  isSmaller(F)Z = IsSmaller(float)
com/github/mikephil/charting/interfaces/dataprovider/BarDataProvider = MikePhil.Charting.Interfaces.Dataprovider.IBarDataProvider
  getBarData()Lcom/github/mikephil/charting/data/BarData; = BarData
  isDrawBarShadowEnabled()Z = IsDrawBarShadowEnabled
  isDrawValueAboveBarEnabled()Z = IsDrawValueAboveBarEnabled
  isHighlightFullBarEnabled()Z = IsHighlightFullBarEnabled
com/github/mikephil/charting/interfaces/dataprovider/BarLineScatterCandleBubbleDataProvider = MikePhil.Charting.Interfaces.Dataprovider.IBarLineScatterCandleBubbleDataProvider
  getHighestVisibleX()F = HighestVisibleX
  getLowestVisibleX()F = LowestVisibleX
  getTransformer(Lcom/github/mikephil/charting/components/YAxis$AxisDependency;)Lcom/github/mikephil/charting/utils/Transformer; = GetTransformer(MikePhil.Charting.Components.YAxis.AxisDependency)
  isInverted(Lcom/github/mikephil/charting/components/YAxis$AxisDependency;)Z = IsInverted(MikePhil.Charting.Components.YAxis.AxisDependency)
com/github/mikephil/charting/interfaces/dataprovider/BubbleDataProvider = MikePhil.Charting.Interfaces.Dataprovider.IBubbleDataProvider
  getBubbleData()Lcom/github/mikephil/charting/data/BubbleData; = BubbleData
com/github/mikephil/charting/interfaces/dataprovider/CandleDataProvider = MikePhil.Charting.Interfaces.Dataprovider.ICandleDataProvider
  getCandleData()Lcom/github/mikephil/charting/data/CandleData; = CandleData
com/github/mikephil/charting/interfaces/dataprovider/ChartInterface = MikePhil.Charting.Interfaces.Dataprovider.IChartInterface
  getCenterOffsets()Lcom/github/mikephil/charting/utils/MPPointF; = CenterOffsets
  getCenterOfView()Lcom/github/mikephil/charting/utils/MPPointF; = CenterOfView
  getContentRect()Landroid/graphics/RectF; = ContentRect
  getDefaultValueFormatter()Lcom/github/mikephil/charting/formatter/IValueFormatter; = DefaultValueFormatter
  getHeight()I = Height
  getMaxHighlightDistance()F = MaxHighlightDistance
  getMaxVisibleCount()I = MaxVisibleCount
  getWidth()I = Width
  getXChartMax()F = XChartMax
  getXChartMin()F = XChartMin
  getXRange()F = XRange
  getYChartMax()F = YChartMax
  getYChartMin()F = YChartMin
com/github/mikephil/charting/interfaces/dataprovider/CombinedDataProvider = MikePhil.Charting.Interfaces.Dataprovider.ICombinedDataProvider
  getCombinedData()Lcom/github/mikephil/charting/data/CombinedData; = CombinedData
com/github/mikephil/charting/interfaces/dataprovider/LineDataProvider = MikePhil.Charting.Interfaces.Dataprovider.ILineDataProvider
  getLineData()Lcom/github/mikephil/charting/data/LineData; = LineData
  getAxis(Lcom/github/mikephil/charting/components/YAxis$AxisDependency;)Lcom/github/mikephil/charting/components/YAxis; = GetAxis(MikePhil.Charting.Components.YAxis.AxisDependency)
com/github/mikephil/charting/interfaces/dataprovider/ScatterDataProvider = MikePhil.Charting.Interfaces.Dataprovider.IScatterDataProvider
  getScatterData()Lcom/github/mikephil/charting/data/ScatterData; = ScatterData
com/github/mikephil/charting/interfaces/datasets/IBarDataSet = MikePhil.Charting.Interfaces.Datasets.IBarDataSet
  getBarBorderColor()I = BarBorderColor
  getBarBorderWidth()F = BarBorderWidth
  getBarShadowColor()I = BarShadowColor
  getHighLightAlpha()I = HighLightAlpha
  isStacked()Z = IsStacked
  getStackSize()I = StackSize
  getStackLabels()[Ljava/lang/String; = GetStackLabels()
com/github/mikephil/charting/interfaces/datasets/IBarLineScatterCandleBubbleDataSet = MikePhil.Charting.Interfaces.Datasets.IBarLineScatterCandleBubbleDataSet
  getHighLightColor()I = HighLightColor
com/github/mikephil/charting/interfaces/datasets/IBubbleDataSet = MikePhil.Charting.Interfaces.Datasets.IBubbleDataSet
  getHighlightCircleWidth()F = HighlightCircleWidth
  setHighlightCircleWidth(F)V = HighlightCircleWidth
  isNormalizeSizeEnabled()Z = IsNormalizeSizeEnabled
  getMaxSize()F = MaxSize
com/github/mikephil/charting/interfaces/datasets/ICandleDataSet = MikePhil.Charting.Interfaces.Datasets.ICandleDataSet
  getBarSpace()F = BarSpace
  getDecreasingColor()I = DecreasingColor
  getDecreasingPaintStyle()Landroid/graphics/Paint$Style; = DecreasingPaintStyle
  getIncreasingColor()I = IncreasingColor
  getIncreasingPaintStyle()Landroid/graphics/Paint$Style; = IncreasingPaintStyle
  getNeutralColor()I = NeutralColor
  getShadowColor()I = ShadowColor
  getShadowColorSameAsCandle()Z = ShadowColorSameAsCandle
  getShadowWidth()F = ShadowWidth
  getShowCandleBar()Z = ShowCandleBar
com/github/mikephil/charting/interfaces/datasets/IDataSet = MikePhil.Charting.Interfaces.Datasets.IDataSet
  getAxisDependency()Lcom/github/mikephil/charting/components/YAxis$AxisDependency; = AxisDependency
  setAxisDependency(Lcom/github/mikephil/charting/components/YAxis$AxisDependency;)V = AxisDependency
  getColor()I = Color
  getColors()Ljava/util/List; = Colors
  getEntryCount()I = EntryCount
  getForm()Lcom/github/mikephil/charting/components/Legend$LegendForm; = Form
  getFormLineDashEffect()Landroid/graphics/DashPathEffect; = FormLineDashEffect
  getFormLineWidth()F = FormLineWidth
  getFormSize()F = FormSize
  getGradientColor()Lcom/github/mikephil/charting/model/GradientColor; = GradientColor
  getGradientColors()Ljava/util/List; = GradientColors
  isHighlightEnabled()Z = HighlightEnabled
  setHighlightEnabled(Z)V = HighlightEnabled
  getIconsOffset()Lcom/github/mikephil/charting/utils/MPPointF; = IconsOffset
  setIconsOffset(Lcom/github/mikephil/charting/utils/MPPointF;)V = IconsOffset
  isDrawIconsEnabled()Z = IsDrawIconsEnabled
  isDrawValuesEnabled()Z = IsDrawValuesEnabled
  getLabel()Ljava/lang/String; = Label
  setLabel(Ljava/lang/String;)V = Label
  getValueFormatter()Lcom/github/mikephil/charting/formatter/IValueFormatter; = ValueFormatter
  setValueFormatter(Lcom/github/mikephil/charting/formatter/IValueFormatter;)V = ValueFormatter
  getValueTextColor()I = ValueTextColor
  setValueTextColor(I)V = ValueTextColor
  getValueTextSize()F = ValueTextSize
  setValueTextSize(F)V = ValueTextSize
  getValueTypeface()Landroid/graphics/Typeface; = ValueTypeface
  setValueTypeface(Landroid/graphics/Typeface;)V = ValueTypeface
  isVisible()Z = Visible
  setVisible(Z)V = Visible
  getXMax()F = XMax
  getXMin()F = XMin
  getYMax()F = YMax
  getYMin()F = YMin
  calcMinMax()V = CalcMinMax()
  calcMinMaxY(FF)V = CalcMinMaxY(float, float)
  clear()V = Clear()
  contains(Lcom/github/mikephil/charting/data/Entry;)Z = Contains(Java.Lang.Object)
  getColor(I)I = GetColor(int)
  getEntriesForXValue(F)Ljava/util/List; = GetEntriesForXValue(float)
  getEntryIndex(FFLcom/github/mikephil/charting/data/DataSet$Rounding;)I = GetEntryIndex(float, float, MikePhil.Charting.Data.DataSet.Rounding)
  getGradientColor(I)Lcom/github/mikephil/charting/model/GradientColor; = GetGradientColor(int)
  getIndexInEntries(I)I = GetIndexInEntries(int)
  getValueTextColor(I)I = GetValueTextColor(int)
  needsFormatter()Z = NeedsFormatter()
  removeEntry(I)Z = RemoveEntry(int)
  removeEntryByXValue(F)Z = RemoveEntryByXValue(float)
  removeFirst()Z = RemoveFirst()
  removeLast()Z = RemoveLast()
  setDrawIcons(Z)V = SetDrawIcons(bool)
  setDrawValues(Z)V = SetDrawValues(bool)
  setValueTextColors(Ljava/util/List;)V = SetValueTextColors(System.Collections.Generic.IList<Java.Lang.Integer>)
com/github/mikephil/charting/interfaces/datasets/ILineDataSet = MikePhil.Charting.Interfaces.Datasets.ILineDataSet
  getCircleColorCount()I = CircleColorCount
  getCircleHoleColor()I = CircleHoleColor
  getCircleHoleRadius()F = CircleHoleRadius
  getCircleRadius()F = CircleRadius
  getCubicIntensity()F = CubicIntensity
  getDashPathEffect()Landroid/graphics/DashPathEffect; = DashPathEffect
  getFillFormatter()Lcom/github/mikephil/charting/formatter/IFillFormatter; = FillFormatter
  isDashedLineEnabled()Z = IsDashedLineEnabled
  isDrawCircleHoleEnabled()Z = IsDrawCircleHoleEnabled
  isDrawCirclesEnabled()Z = IsDrawCirclesEnabled
  isDrawCubicEnabled()Z = IsDrawCubicEnabled
  isDrawSteppedEnabled()Z = IsDrawSteppedEnabled
  getCircleColor(I)I = GetCircleColor(int)
  getMode()Lcom/github/mikephil/charting/data/LineDataSet$Mode; = GetMode()
com/github/mikephil/charting/interfaces/datasets/ILineRadarDataSet = MikePhil.Charting.Interfaces.Datasets.ILineRadarDataSet
  getFillAlpha()I = FillAlpha
  getFillColor()I = FillColor
  getFillDrawable()Landroid/graphics/drawable/Drawable; = FillDrawable
  isDrawFilledEnabled()Z = IsDrawFilledEnabled
  getLineWidth()F = LineWidth
  setDrawFilled(Z)V = SetDrawFilled(bool)
com/github/mikephil/charting/interfaces/datasets/ILineScatterCandleRadarDataSet = MikePhil.Charting.Interfaces.Datasets.ILineScatterCandleRadarDataSet
  getDashPathEffectHighlight()Landroid/graphics/DashPathEffect; = DashPathEffectHighlight
  getHighlightLineWidth()F = HighlightLineWidth
  isHorizontalHighlightIndicatorEnabled()Z = IsHorizontalHighlightIndicatorEnabled
  isVerticalHighlightIndicatorEnabled()Z = IsVerticalHighlightIndicatorEnabled
com/github/mikephil/charting/interfaces/datasets/IPieDataSet = MikePhil.Charting.Interfaces.Datasets.IPieDataSet
  isAutomaticallyDisableSliceSpacingEnabled()Z = IsAutomaticallyDisableSliceSpacingEnabled
  isUsingSliceColorAsValueLineColor()Z = IsUsingSliceColorAsValueLineColor
  isValueLineVariableLength()Z = IsValueLineVariableLength
  getSelectionShift()F = SelectionShift
  getSliceSpace()F = SliceSpace
  getValueLineColor()I = ValueLineColor
  getValueLinePart1Length()F = ValueLinePart1Length
  getValueLinePart1OffsetPercentage()F = ValueLinePart1OffsetPercentage
  getValueLinePart2Length()F = ValueLinePart2Length
  getValueLineWidth()F = ValueLineWidth
  getXValuePosition()Lcom/github/mikephil/charting/data/PieDataSet$ValuePosition; = XValuePosition
  getYValuePosition()Lcom/github/mikephil/charting/data/PieDataSet$ValuePosition; = YValuePosition
com/github/mikephil/charting/interfaces/datasets/IRadarDataSet = MikePhil.Charting.Interfaces.Datasets.IRadarDataSet
  isDrawHighlightCircleEnabled()Z = DrawHighlightCircleEnabled
  setDrawHighlightCircleEnabled(Z)V = DrawHighlightCircleEnabled
  getHighlightCircleFillColor()I = HighlightCircleFillColor
  getHighlightCircleInnerRadius()F = HighlightCircleInnerRadius
  getHighlightCircleOuterRadius()F = HighlightCircleOuterRadius
  getHighlightCircleStrokeAlpha()I = HighlightCircleStrokeAlpha
  getHighlightCircleStrokeColor()I = HighlightCircleStrokeColor
  getHighlightCircleStrokeWidth()F = HighlightCircleStrokeWidth
com/github/mikephil/charting/interfaces/datasets/IScatterDataSet = MikePhil.Charting.Interfaces.Datasets.IScatterDataSet
  getScatterShapeHoleColor()I = ScatterShapeHoleColor
  getScatterShapeHoleRadius()F = ScatterShapeHoleRadius
  getScatterShapeSize()F = ScatterShapeSize
  getShapeRenderer()Lcom/github/mikephil/charting/renderer/scatter/IShapeRenderer; = ShapeRenderer
com/github/mikephil/charting/jobs/AnimatedMoveViewJob = MikePhil.Charting.Jobs.AnimatedMoveViewJob
  <init>(Lcom/github/mikephil/charting/utils/ViewPortHandler;FFLcom/github/mikephil/charting/utils/Transformer;Landroid/view/View;FFJ)V = .ctor(MikePhil.Charting.Util.ViewPortHandler, float, float, MikePhil.Charting.Util.Transformer, Android.Views.View, float, float, long)
  getInstance(Lcom/github/mikephil/charting/utils/ViewPortHandler;FFLcom/github/mikephil/charting/utils/Transformer;Landroid/view/View;FFJ)Lcom/github/mikephil/charting/jobs/AnimatedMoveViewJob; = GetInstance(MikePhil.Charting.Util.ViewPortHandler, float, float, MikePhil.Charting.Util.Transformer, Android.Views.View, float, float, long)
  instantiate()Lcom/github/mikephil/charting/utils/ObjectPool$Poolable; = Instantiate()
  recycleInstance(Lcom/github/mikephil/charting/jobs/AnimatedMoveViewJob;)V = RecycleInstance(MikePhil.Charting.Jobs.AnimatedMoveViewJob)
  recycleSelf()V = RecycleSelf()
com/github/mikephil/charting/jobs/AnimatedViewPortJob = MikePhil.Charting.Jobs.AnimatedViewPortJob
  <init>(Lcom/github/mikephil/charting/utils/ViewPortHandler;FFLcom/github/mikephil/charting/utils/Transformer;Landroid/view/View;FFJ)V = .ctor(MikePhil.Charting.Util.ViewPortHandler, float, float, MikePhil.Charting.Util.Transformer, Android.Views.View, float, float, long)
  animator = Animator
  phase = Phase
  xOrigin = XOrigin
  yOrigin = YOrigin
  getPhase()F = Phase
  setPhase(F)V = Phase
  getXOrigin()F = XOrigin
  getYOrigin()F = YOrigin
  onAnimationCancel(Landroid/animation/Animator;)V = OnAnimationCancel(Android.Animation.Animator)
  onAnimationEnd(Landroid/animation/Animator;)V = OnAnimationEnd(Android.Animation.Animator)
  onAnimationRepeat(Landroid/animation/Animator;)V = OnAnimationRepeat(Android.Animation.Animator)
  onAnimationStart(Landroid/animation/Animator;)V = OnAnimationStart(Android.Animation.Animator)
  onAnimationUpdate(Landroid/animation/ValueAnimator;)V = OnAnimationUpdate(Android.Animation.ValueAnimator)
  recycleSelf()V = RecycleSelf()
  resetAnimator()V = ResetAnimator()
  run()V = Run()
com/github/mikephil/charting/jobs/AnimatedZoomJob = MikePhil.Charting.Jobs.AnimatedZoomJob
  <init>(Lcom/github/mikephil/charting/utils/ViewPortHandler;Landroid/view/View;Lcom/github/mikephil/charting/utils/Transformer;Lcom/github/mikephil/charting/components/YAxis;FFFFFFFFFJ)V = .ctor(MikePhil.Charting.Util.ViewPortHandler, Android.Views.View, MikePhil.Charting.Util.Transformer, MikePhil.Charting.Components.YAxis, float, float, float, float, float, float, float, float, float, long)
  mOnAnimationUpdateMatrixBuffer = MOnAnimationUpdateMatrixBuffer
  xAxisRange = XAxisRange
  yAxis = YAxis
  zoomCenterX = ZoomCenterX
  zoomCenterY = ZoomCenterY
  zoomOriginX = ZoomOriginX
  zoomOriginY = ZoomOriginY
  getInstance(Lcom/github/mikephil/charting/utils/ViewPortHandler;Landroid/view/View;Lcom/github/mikephil/charting/utils/Transformer;Lcom/github/mikephil/charting/components/YAxis;FFFFFFFFFJ)Lcom/github/mikephil/charting/jobs/AnimatedZoomJob; = GetInstance(MikePhil.Charting.Util.ViewPortHandler, Android.Views.View, MikePhil.Charting.Util.Transformer, MikePhil.Charting.Components.YAxis, float, float, float, float, float, float, float, float, float, long)
  instantiate()Lcom/github/mikephil/charting/utils/ObjectPool$Poolable; = Instantiate()
  recycleSelf()V = RecycleSelf()
com/github/mikephil/charting/jobs/MoveViewJob = MikePhil.Charting.Jobs.MoveViewJob
  <init>(Lcom/github/mikephil/charting/utils/ViewPortHandler;FFLcom/github/mikephil/charting/utils/Transformer;Landroid/view/View;)V = .ctor(MikePhil.Charting.Util.ViewPortHandler, float, float, MikePhil.Charting.Util.Transformer, Android.Views.View)
  getInstance(Lcom/github/mikephil/charting/utils/ViewPortHandler;FFLcom/github/mikephil/charting/utils/Transformer;Landroid/view/View;)Lcom/github/mikephil/charting/jobs/MoveViewJob; = GetInstance(MikePhil.Charting.Util.ViewPortHandler, float, float, MikePhil.Charting.Util.Transformer, Android.Views.View)
  instantiate()Lcom/github/mikephil/charting/utils/ObjectPool$Poolable; = Instantiate()
  recycleInstance(Lcom/github/mikephil/charting/jobs/MoveViewJob;)V = RecycleInstance(MikePhil.Charting.Jobs.MoveViewJob)
  run()V = Run()
com/github/mikephil/charting/jobs/ViewPortJob = MikePhil.Charting.Jobs.ViewPortJob
  <init>(Lcom/github/mikephil/charting/utils/ViewPortHandler;FFLcom/github/mikephil/charting/utils/Transformer;Landroid/view/View;)V = .ctor(MikePhil.Charting.Util.ViewPortHandler, float, float, MikePhil.Charting.Util.Transformer, Android.Views.View)
  mTrans = MTrans
  mViewPortHandler = MViewPortHandler
  pts = Pts
  view = View
  xValue = XValue
  yValue = YValue
  getXValue()F = XValue
  getYValue()F = YValue
com/github/mikephil/charting/jobs/ZoomJob = MikePhil.Charting.Jobs.ZoomJob
  <init>(Lcom/github/mikephil/charting/utils/ViewPortHandler;FFFFLcom/github/mikephil/charting/utils/Transformer;Lcom/github/mikephil/charting/components/YAxis$AxisDependency;Landroid/view/View;)V = .ctor(MikePhil.Charting.Util.ViewPortHandler, float, float, float, float, MikePhil.Charting.Util.Transformer, MikePhil.Charting.Components.YAxis.AxisDependency, Android.Views.View)
  axisDependency = AxisDependency
  mRunMatrixBuffer = MRunMatrixBuffer
  scaleX = ScaleX
  scaleY = ScaleY
  getInstance(Lcom/github/mikephil/charting/utils/ViewPortHandler;FFFFLcom/github/mikephil/charting/utils/Transformer;Lcom/github/mikephil/charting/components/YAxis$AxisDependency;Landroid/view/View;)Lcom/github/mikephil/charting/jobs/ZoomJob; = GetInstance(MikePhil.Charting.Util.ViewPortHandler, float, float, float, float, MikePhil.Charting.Util.Transformer, MikePhil.Charting.Components.YAxis.AxisDependency, Android.Views.View)
  instantiate()Lcom/github/mikephil/charting/utils/ObjectPool$Poolable; = Instantiate()
  recycleInstance(Lcom/github/mikephil/charting/jobs/ZoomJob;)V = RecycleInstance(MikePhil.Charting.Jobs.ZoomJob)
  run()V = Run()
com/github/mikephil/charting/listener/BarLineChartTouchListener = MikePhil.Charting.Listener.BarLineChartTouchListener
  <init>(Lcom/github/mikephil/charting/charts/BarLineChartBase;Landroid/graphics/Matrix;F)V = .ctor(MikePhil.Charting.Charts.BarLineChartBase, Android.Graphics.Matrix, float)
  getMatrix()Landroid/graphics/Matrix; = Matrix
  computeScroll()V = ComputeScroll()
  getTrans(FF)Lcom/github/mikephil/charting/utils/MPPointF; = GetTrans(float, float)
  onTouch(Landroid/view/View;Landroid/view/MotionEvent;)Z = OnTouch(Android.Views.View, Android.Views.MotionEvent)
  setDragTriggerDist(F)V = SetDragTriggerDist(float)
  stopDeceleration()V = StopDeceleration()
com/github/mikephil/charting/listener/ChartTouchListener = MikePhil.Charting.Listener.ChartTouchListener
  <init>(Lcom/github/mikephil/charting/charts/Chart;)V = .ctor(Java.Lang.Object)
  DRAG = Drag
  mChart = MChart
  mGestureDetector = MGestureDetector
  mLastGesture = MLastGesture
  mLastHighlighted = MLastHighlighted
  mTouchMode = MTouchMode
  NONE = None
  PINCH_ZOOM = PinchZoom
  POST_ZOOM = PostZoom
  ROTATE = Rotate
  X_ZOOM = XZoom
  Y_ZOOM = YZoom
  getLastGesture()Lcom/github/mikephil/charting/listener/ChartTouchListener$ChartGesture; = LastGesture
  getTouchMode()I = TouchMode
  distance(FFFF)F = Distance(float, float, float, float)
  endAction(Landroid/view/MotionEvent;)V = EndAction(Android.Views.MotionEvent)
  performHighlight(Lcom/github/mikephil/charting/highlight/Highlight;Landroid/view/MotionEvent;)V = PerformHighlight(MikePhil.Charting.Highlight.Highlight, Android.Views.MotionEvent)
  setLastHighlighted(Lcom/github/mikephil/charting/highlight/Highlight;)V = SetLastHighlighted(MikePhil.Charting.Highlight.Highlight)
  startAction(Landroid/view/MotionEvent;)V = StartAction(Android.Views.MotionEvent)
com/github/mikephil/charting/listener/OnChartGestureListener = MikePhil.Charting.Listener.IOnChartGestureListenerSupport
  onChartDoubleTapped(Landroid/view/MotionEvent;)V = OnChartDoubleTapped(Android.Views.MotionEvent)
  onChartFling(Landroid/view/MotionEvent;Landroid/view/MotionEvent;FF)V = OnChartFling(Android.Views.MotionEvent, Android.Views.MotionEvent, float, float)
  onChartGestureEnd(Landroid/view/MotionEvent;Lcom/github/mikephil/charting/listener/ChartTouchListener$ChartGesture;)V = OnChartGestureEnd(Android.Views.MotionEvent, MikePhil.Charting.Listener.ChartTouchListener.ChartGesture)
  onChartGestureStart(Landroid/view/MotionEvent;Lcom/github/mikephil/charting/listener/ChartTouchListener$ChartGesture;)V = OnChartGestureStart(Android.Views.MotionEvent, MikePhil.Charting.Listener.ChartTouchListener.ChartGesture)
  onChartLongPressed(Landroid/view/MotionEvent;)V = OnChartLongPressed(Android.Views.MotionEvent)
  onChartScale(Landroid/view/MotionEvent;FF)V = OnChartScale(Android.Views.MotionEvent, float, float)
  onChartSingleTapped(Landroid/view/MotionEvent;)V = OnChartSingleTapped(Android.Views.MotionEvent)
  onChartTranslate(Landroid/view/MotionEvent;FF)V = OnChartTranslate(Android.Views.MotionEvent, float, float)
com/github/mikephil/charting/listener/OnChartValueSelectedListener = MikePhil.Charting.Listener.IOnChartValueSelectedListenerSupport
  onNothingSelected()V = OnNothingSelected()
  onValueSelected(Lcom/github/mikephil/charting/data/Entry;Lcom/github/mikephil/charting/highlight/Highlight;)V = OnValueSelected(MikePhil.Charting.Data.Entry, MikePhil.Charting.Highlight.Highlight)
com/github/mikephil/charting/listener/OnDrawLineChartTouchListener = MikePhil.Charting.Listener.OnDrawLineChartTouchListener
  <init>()V = .ctor()
  onTouch(Landroid/view/View;Landroid/view/MotionEvent;)Z = OnTouch(Android.Views.View, Android.Views.MotionEvent)
com/github/mikephil/charting/listener/OnDrawListener = MikePhil.Charting.Listener.IOnDrawListenerSupport
  onDrawFinished(Lcom/github/mikephil/charting/data/DataSet;)V = OnDrawFinished(MikePhil.Charting.Data.DataSet)
  onEntryAdded(Lcom/github/mikephil/charting/data/Entry;)V = OnEntryAdded(MikePhil.Charting.Data.Entry)
  onEntryMoved(Lcom/github/mikephil/charting/data/Entry;)V = OnEntryMoved(MikePhil.Charting.Data.Entry)
com/github/mikephil/charting/listener/PieRadarChartTouchListener = MikePhil.Charting.Listener.PieRadarChartTouchListener
  <init>(Lcom/github/mikephil/charting/charts/PieRadarChartBase;)V = .ctor(MikePhil.Charting.Charts.PieRadarChartBase)
  computeScroll()V = ComputeScroll()
  onTouch(Landroid/view/View;Landroid/view/MotionEvent;)Z = OnTouch(Android.Views.View, Android.Views.MotionEvent)
  setGestureStartAngle(FF)V = SetGestureStartAngle(float, float)
  stopDeceleration()V = StopDeceleration()
  updateGestureRotation(FF)V = UpdateGestureRotation(float, float)
com/github/mikephil/charting/matrix/Vector3 = MikePhil.Charting.Matrix.Vector3
  <init>()V = .ctor()
  <init>([F)V = .ctor(float[])
  <init>(FFF)V = .ctor(float, float, float)
  <init>(Lcom/github/mikephil/charting/matrix/Vector3;)V = .ctor(MikePhil.Charting.Matrix.Vector3)
  UNIT_X = UnitX
  UNIT_Y = UnitY
  UNIT_Z = UnitZ
  x = X
  y = Y
  z = Z
  ZERO = Zero
  add(Lcom/github/mikephil/charting/matrix/Vector3;)V = Add(MikePhil.Charting.Matrix.Vector3)
  add(FFF)V = Add(float, float, float)
  cross(Lcom/github/mikephil/charting/matrix/Vector3;)Lcom/github/mikephil/charting/matrix/Vector3; = Cross(MikePhil.Charting.Matrix.Vector3)
  distance2(Lcom/github/mikephil/charting/matrix/Vector3;)F = Distance2(MikePhil.Charting.Matrix.Vector3)
  divide(F)V = Divide(float)
  dot(Lcom/github/mikephil/charting/matrix/Vector3;)F = Dot(MikePhil.Charting.Matrix.Vector3)
  length()F = Length()
  length2()F = Length2()
  multiply(Lcom/github/mikephil/charting/matrix/Vector3;)V = Multiply(MikePhil.Charting.Matrix.Vector3)
  multiply(F)V = Multiply(float)
  normalize()F = Normalize()
  pointsInSameDirection(Lcom/github/mikephil/charting/matrix/Vector3;)Z = PointsInSameDirection(MikePhil.Charting.Matrix.Vector3)
  set(Lcom/github/mikephil/charting/matrix/Vector3;)V = Set(MikePhil.Charting.Matrix.Vector3)
  set(FFF)V = Set(float, float, float)
  subtract(Lcom/github/mikephil/charting/matrix/Vector3;)V = Subtract(MikePhil.Charting.Matrix.Vector3)
  subtractMultiple(Lcom/github/mikephil/charting/matrix/Vector3;F)V = SubtractMultiple(MikePhil.Charting.Matrix.Vector3, float)
  zero()V = Zero()
com/github/mikephil/charting/model/GradientColor = MikePhil.Charting.Model.GradientColor
  <init>(II)V = .ctor(int, int)
  getEndColor()I = EndColor
  setEndColor(I)V = EndColor
  getStartColor()I = StartColor
  setStartColor(I)V = StartColor
com/github/mikephil/charting/renderer/AxisRenderer = MikePhil.Charting.Renderer.AxisRenderer
  <init>(Lcom/github/mikephil/charting/utils/ViewPortHandler;Lcom/github/mikephil/charting/utils/Transformer;Lcom/github/mikephil/charting/components/AxisBase;)V = .ctor(MikePhil.Charting.Util.ViewPortHandler, MikePhil.Charting.Util.Transformer, MikePhil.Charting.Components.AxisBase)
  mAxis = MAxis
  mAxisLabelPaint = MAxisLabelPaint
  mAxisLinePaint = MAxisLinePaint
  mGridPaint = MGridPaint
  mLimitLinePaint = MLimitLinePaint
  mTrans = MTrans
  getPaintAxisLabels()Landroid/graphics/Paint; = PaintAxisLabels
  getPaintAxisLine()Landroid/graphics/Paint; = PaintAxisLine
  getPaintGrid()Landroid/graphics/Paint; = PaintGrid
  getTransformer()Lcom/github/mikephil/charting/utils/Transformer; = Transformer
  computeAxis(FFZ)V = ComputeAxis(float, float, bool)
  computeAxisValues(FF)V = ComputeAxisValues(float, float)
  renderAxisLabels(Landroid/graphics/Canvas;)V = RenderAxisLabels(Android.Graphics.Canvas)
  renderAxisLine(Landroid/graphics/Canvas;)V = RenderAxisLine(Android.Graphics.Canvas)
  renderGridLines(Landroid/graphics/Canvas;)V = RenderGridLines(Android.Graphics.Canvas)
  renderLimitLines(Landroid/graphics/Canvas;)V = RenderLimitLines(Android.Graphics.Canvas)
com/github/mikephil/charting/renderer/BarChartRenderer = MikePhil.Charting.Renderer.BarChartRenderer
  <init>(Lcom/github/mikephil/charting/interfaces/dataprovider/BarDataProvider;Lcom/github/mikephil/charting/animation/ChartAnimator;Lcom/github/mikephil/charting/utils/ViewPortHandler;)V = .ctor(MikePhil.Charting.Interfaces.Dataprovider.IBarDataProvider, MikePhil.Charting.Animation.ChartAnimator, MikePhil.Charting.Util.ViewPortHandler)
  mBarBorderPaint = MBarBorderPaint
  mBarBuffers = MBarBuffers
  mBarRect = MBarRect
  mChart = MChart
  mShadowPaint = MShadowPaint
  drawData(Landroid/graphics/Canvas;)V = DrawData(Android.Graphics.Canvas)
  drawDataSet(Landroid/graphics/Canvas;Lcom/github/mikephil/charting/interfaces/datasets/IBarDataSet;I)V = DrawDataSet(Android.Graphics.Canvas, MikePhil.Charting.Interfaces.Datasets.IBarDataSet, int)
  drawExtras(Landroid/graphics/Canvas;)V = DrawExtras(Android.Graphics.Canvas)
  drawHighlighted(Landroid/graphics/Canvas;[Lcom/github/mikephil/charting/highlight/Highlight;)V = DrawHighlighted(Android.Graphics.Canvas, MikePhil.Charting.Highlight.Highlight[])
  drawValues(Landroid/graphics/Canvas;)V = DrawValues(Android.Graphics.Canvas)
  initBuffers()V = InitBuffers()
  prepareBarHighlight(FFFFLcom/github/mikephil/charting/utils/Transformer;)V = PrepareBarHighlight(float, float, float, float, MikePhil.Charting.Util.Transformer)
  setHighlightDrawPos(Lcom/github/mikephil/charting/highlight/Highlight;Landroid/graphics/RectF;)V = SetHighlightDrawPos(MikePhil.Charting.Highlight.Highlight, Android.Graphics.RectF)
com/github/mikephil/charting/renderer/BarLineScatterCandleBubbleRenderer = MikePhil.Charting.Renderer.BarLineScatterCandleBubbleRenderer
  <init>(Lcom/github/mikephil/charting/animation/ChartAnimator;Lcom/github/mikephil/charting/utils/ViewPortHandler;)V = .ctor(MikePhil.Charting.Animation.ChartAnimator, MikePhil.Charting.Util.ViewPortHandler)
  mXBounds = MXBounds
  isInBoundsX(Lcom/github/mikephil/charting/data/Entry;Lcom/github/mikephil/charting/interfaces/datasets/IBarLineScatterCandleBubbleDataSet;)Z = IsInBoundsX(MikePhil.Charting.Data.Entry, MikePhil.Charting.Interfaces.Datasets.IBarLineScatterCandleBubbleDataSet)
  shouldDrawValues(Lcom/github/mikephil/charting/interfaces/datasets/IDataSet;)Z = ShouldDrawValues(MikePhil.Charting.Interfaces.Datasets.IDataSet)
com/github/mikephil/charting/renderer/BubbleChartRenderer = MikePhil.Charting.Renderer.BubbleChartRenderer
  <init>(Lcom/github/mikephil/charting/interfaces/dataprovider/BubbleDataProvider;Lcom/github/mikephil/charting/animation/ChartAnimator;Lcom/github/mikephil/charting/utils/ViewPortHandler;)V = .ctor(MikePhil.Charting.Interfaces.Dataprovider.IBubbleDataProvider, MikePhil.Charting.Animation.ChartAnimator, MikePhil.Charting.Util.ViewPortHandler)
  mChart = MChart
  drawData(Landroid/graphics/Canvas;)V = DrawData(Android.Graphics.Canvas)
  drawDataSet(Landroid/graphics/Canvas;Lcom/github/mikephil/charting/interfaces/datasets/IBubbleDataSet;)V = DrawDataSet(Android.Graphics.Canvas, MikePhil.Charting.Interfaces.Datasets.IBubbleDataSet)
  drawExtras(Landroid/graphics/Canvas;)V = DrawExtras(Android.Graphics.Canvas)
  drawHighlighted(Landroid/graphics/Canvas;[Lcom/github/mikephil/charting/highlight/Highlight;)V = DrawHighlighted(Android.Graphics.Canvas, MikePhil.Charting.Highlight.Highlight[])
  drawValues(Landroid/graphics/Canvas;)V = DrawValues(Android.Graphics.Canvas)
  getShapeSize(FFFZ)F = GetShapeSize(float, float, float, bool)
  initBuffers()V = InitBuffers()
com/github/mikephil/charting/renderer/CandleStickChartRenderer = MikePhil.Charting.Renderer.CandleStickChartRenderer
  <init>(Lcom/github/mikephil/charting/interfaces/dataprovider/CandleDataProvider;Lcom/github/mikephil/charting/animation/ChartAnimator;Lcom/github/mikephil/charting/utils/ViewPortHandler;)V = .ctor(MikePhil.Charting.Interfaces.Dataprovider.ICandleDataProvider, MikePhil.Charting.Animation.ChartAnimator, MikePhil.Charting.Util.ViewPortHandler)
  mChart = MChart
  drawData(Landroid/graphics/Canvas;)V = DrawData(Android.Graphics.Canvas)
  drawDataSet(Landroid/graphics/Canvas;Lcom/github/mikephil/charting/interfaces/datasets/ICandleDataSet;)V = DrawDataSet(Android.Graphics.Canvas, MikePhil.Charting.Interfaces.Datasets.ICandleDataSet)
  drawExtras(Landroid/graphics/Canvas;)V = DrawExtras(Android.Graphics.Canvas)
  drawHighlighted(Landroid/graphics/Canvas;[Lcom/github/mikephil/charting/highlight/Highlight;)V = DrawHighlighted(Android.Graphics.Canvas, MikePhil.Charting.Highlight.Highlight[])
  drawValues(Landroid/graphics/Canvas;)V = DrawValues(Android.Graphics.Canvas)
  initBuffers()V = InitBuffers()
com/github/mikephil/charting/renderer/CombinedChartRenderer = MikePhil.Charting.Renderer.CombinedChartRenderer
  <init>(Lcom/github/mikephil/charting/charts/CombinedChart;Lcom/github/mikephil/charting/animation/ChartAnimator;Lcom/github/mikephil/charting/utils/ViewPortHandler;)V = .ctor(MikePhil.Charting.Charts.CombinedChart, MikePhil.Charting.Animation.ChartAnimator, MikePhil.Charting.Util.ViewPortHandler)
  mChart = MChart
  mHighlightBuffer = MHighlightBuffer
  mRenderers = MRenderers
  getSubRenderers()Ljava/util/List; = SubRenderers
  setSubRenderers(Ljava/util/List;)V = SubRenderers
  createRenderers()V = CreateRenderers()
  drawData(Landroid/graphics/Canvas;)V = DrawData(Android.Graphics.Canvas)
  drawExtras(Landroid/graphics/Canvas;)V = DrawExtras(Android.Graphics.Canvas)
  drawHighlighted(Landroid/graphics/Canvas;[Lcom/github/mikephil/charting/highlight/Highlight;)V = DrawHighlighted(Android.Graphics.Canvas, MikePhil.Charting.Highlight.Highlight[])
  drawValues(Landroid/graphics/Canvas;)V = DrawValues(Android.Graphics.Canvas)
  getSubRenderer(I)Lcom/github/mikephil/charting/renderer/DataRenderer; = GetSubRenderer(int)
  initBuffers()V = InitBuffers()
com/github/mikephil/charting/renderer/DataRenderer = MikePhil.Charting.Renderer.DataRenderer
  <init>(Lcom/github/mikephil/charting/animation/ChartAnimator;Lcom/github/mikephil/charting/utils/ViewPortHandler;)V = .ctor(MikePhil.Charting.Animation.ChartAnimator, MikePhil.Charting.Util.ViewPortHandler)
  mAnimator = MAnimator
  mDrawPaint = MDrawPaint
  mHighlightPaint = MHighlightPaint
  mRenderPaint = MRenderPaint
  mValuePaint = MValuePaint
  getPaintHighlight()Landroid/graphics/Paint; = PaintHighlight
  getPaintRender()Landroid/graphics/Paint; = PaintRender
  getPaintValues()Landroid/graphics/Paint; = PaintValues
  applyValueTextStyle(Lcom/github/mikephil/charting/interfaces/datasets/IDataSet;)V = ApplyValueTextStyle(MikePhil.Charting.Interfaces.Datasets.IDataSet)
  drawData(Landroid/graphics/Canvas;)V = DrawData(Android.Graphics.Canvas)
  drawExtras(Landroid/graphics/Canvas;)V = DrawExtras(Android.Graphics.Canvas)
  drawHighlighted(Landroid/graphics/Canvas;[Lcom/github/mikephil/charting/highlight/Highlight;)V = DrawHighlighted(Android.Graphics.Canvas, MikePhil.Charting.Highlight.Highlight[])
  drawValue(Landroid/graphics/Canvas;Lcom/github/mikephil/charting/formatter/IValueFormatter;FLcom/github/mikephil/charting/data/Entry;IFFI)V = DrawValue(Android.Graphics.Canvas, MikePhil.Charting.Formatter.IValueFormatter, float, MikePhil.Charting.Data.Entry, int, float, float, int)
  drawValues(Landroid/graphics/Canvas;)V = DrawValues(Android.Graphics.Canvas)
  initBuffers()V = InitBuffers()
  isDrawingValuesAllowed(Lcom/github/mikephil/charting/interfaces/dataprovider/ChartInterface;)Z = IsDrawingValuesAllowed(MikePhil.Charting.Interfaces.Dataprovider.IChartInterface)
com/github/mikephil/charting/renderer/HorizontalBarChartRenderer = MikePhil.Charting.Renderer.HorizontalBarChartRenderer
  <init>(Lcom/github/mikephil/charting/interfaces/dataprovider/BarDataProvider;Lcom/github/mikephil/charting/animation/ChartAnimator;Lcom/github/mikephil/charting/utils/ViewPortHandler;)V = .ctor(MikePhil.Charting.Interfaces.Dataprovider.IBarDataProvider, MikePhil.Charting.Animation.ChartAnimator, MikePhil.Charting.Util.ViewPortHandler)
  drawValue(Landroid/graphics/Canvas;Ljava/lang/String;FFI)V = DrawValue(Android.Graphics.Canvas, string, float, float, int)
com/github/mikephil/charting/renderer/LegendRenderer = MikePhil.Charting.Renderer.LegendRenderer
  <init>(Lcom/github/mikephil/charting/utils/ViewPortHandler;Lcom/github/mikephil/charting/components/Legend;)V = .ctor(MikePhil.Charting.Util.ViewPortHandler, MikePhil.Charting.Components.Legend)
  computedEntries = ComputedEntries
  legendFontMetrics = LegendFontMetrics
  mLegend = MLegend
  mLegendFormPaint = MLegendFormPaint
  mLegendLabelPaint = MLegendLabelPaint
  getFormPaint()Landroid/graphics/Paint; = FormPaint
  getLabelPaint()Landroid/graphics/Paint; = LabelPaint
  computeLegend(Lcom/github/mikephil/charting/data/ChartData;)V = ComputeLegend(MikePhil.Charting.Data.ChartData)
  drawForm(Landroid/graphics/Canvas;FFLcom/github/mikephil/charting/components/LegendEntry;Lcom/github/mikephil/charting/components/Legend;)V = DrawForm(Android.Graphics.Canvas, float, float, MikePhil.Charting.Components.LegendEntry, MikePhil.Charting.Components.Legend)
  drawLabel(Landroid/graphics/Canvas;FFLjava/lang/String;)V = DrawLabel(Android.Graphics.Canvas, float, float, string)
  renderLegend(Landroid/graphics/Canvas;)V = RenderLegend(Android.Graphics.Canvas)
com/github/mikephil/charting/renderer/LineChartRenderer = MikePhil.Charting.Renderer.LineChartRenderer
  <init>(Lcom/github/mikephil/charting/interfaces/dataprovider/LineDataProvider;Lcom/github/mikephil/charting/animation/ChartAnimator;Lcom/github/mikephil/charting/utils/ViewPortHandler;)V = .ctor(MikePhil.Charting.Interfaces.Dataprovider.ILineDataProvider, MikePhil.Charting.Animation.ChartAnimator, MikePhil.Charting.Util.ViewPortHandler)
  cubicFillPath = CubicFillPath
  cubicPath = CubicPath
  mBitmapCanvas = MBitmapCanvas
  mBitmapConfig = MBitmapConfig
  mChart = MChart
  mCirclePaintInner = MCirclePaintInner
  mDrawBitmap = MDrawBitmap
  mGenerateFilledPathBuffer = MGenerateFilledPathBuffer
  getBitmapConfig()Landroid/graphics/Bitmap$Config; = BitmapConfig
  setBitmapConfig(Landroid/graphics/Bitmap$Config;)V = BitmapConfig
  drawCircles(Landroid/graphics/Canvas;)V = DrawCircles(Android.Graphics.Canvas)
  drawCubicBezier(Lcom/github/mikephil/charting/interfaces/datasets/ILineDataSet;)V = DrawCubicBezier(MikePhil.Charting.Interfaces.Datasets.ILineDataSet)
  drawCubicFill(Landroid/graphics/Canvas;Lcom/github/mikephil/charting/interfaces/datasets/ILineDataSet;Landroid/graphics/Path;Lcom/github/mikephil/charting/utils/Transformer;Lcom/github/mikephil/charting/renderer/BarLineScatterCandleBubbleRenderer$XBounds;)V = DrawCubicFill(Android.Graphics.Canvas, MikePhil.Charting.Interfaces.Datasets.ILineDataSet, Android.Graphics.Path, MikePhil.Charting.Util.Transformer, MikePhil.Charting.Renderer.BarLineScatterCandleBubbleRenderer.XBounds)
  drawData(Landroid/graphics/Canvas;)V = DrawData(Android.Graphics.Canvas)
  drawDataSet(Landroid/graphics/Canvas;Lcom/github/mikephil/charting/interfaces/datasets/ILineDataSet;)V = DrawDataSet(Android.Graphics.Canvas, MikePhil.Charting.Interfaces.Datasets.ILineDataSet)
  drawExtras(Landroid/graphics/Canvas;)V = DrawExtras(Android.Graphics.Canvas)
  drawHighlighted(Landroid/graphics/Canvas;[Lcom/github/mikephil/charting/highlight/Highlight;)V = DrawHighlighted(Android.Graphics.Canvas, MikePhil.Charting.Highlight.Highlight[])
  drawHorizontalBezier(Lcom/github/mikephil/charting/interfaces/datasets/ILineDataSet;)V = DrawHorizontalBezier(MikePhil.Charting.Interfaces.Datasets.ILineDataSet)
  drawLinear(Landroid/graphics/Canvas;Lcom/github/mikephil/charting/interfaces/datasets/ILineDataSet;)V = DrawLinear(Android.Graphics.Canvas, MikePhil.Charting.Interfaces.Datasets.ILineDataSet)
  drawLinearFill(Landroid/graphics/Canvas;Lcom/github/mikephil/charting/interfaces/datasets/ILineDataSet;Lcom/github/mikephil/charting/utils/Transformer;Lcom/github/mikephil/charting/renderer/BarLineScatterCandleBubbleRenderer$XBounds;)V = DrawLinearFill(Android.Graphics.Canvas, MikePhil.Charting.Interfaces.Datasets.ILineDataSet, MikePhil.Charting.Util.Transformer, MikePhil.Charting.Renderer.BarLineScatterCandleBubbleRenderer.XBounds)
  drawValues(Landroid/graphics/Canvas;)V = DrawValues(Android.Graphics.Canvas)
  initBuffers()V = InitBuffers()
  releaseBitmap()V = ReleaseBitmap()
com/github/mikephil/charting/renderer/LineRadarRenderer = MikePhil.Charting.Renderer.LineRadarRenderer
  <init>(Lcom/github/mikephil/charting/animation/ChartAnimator;Lcom/github/mikephil/charting/utils/ViewPortHandler;)V = .ctor(MikePhil.Charting.Animation.ChartAnimator, MikePhil.Charting.Util.ViewPortHandler)
  drawFilledPath(Landroid/graphics/Canvas;Landroid/graphics/Path;Landroid/graphics/drawable/Drawable;)V = DrawFilledPath(Android.Graphics.Canvas, Android.Graphics.Path, Android.Graphics.Drawables.Drawable)
  drawFilledPath(Landroid/graphics/Canvas;Landroid/graphics/Path;II)V = DrawFilledPath(Android.Graphics.Canvas, Android.Graphics.Path, int, int)
com/github/mikephil/charting/renderer/LineScatterCandleRadarRenderer = MikePhil.Charting.Renderer.LineScatterCandleRadarRenderer
  <init>(Lcom/github/mikephil/charting/animation/ChartAnimator;Lcom/github/mikephil/charting/utils/ViewPortHandler;)V = .ctor(MikePhil.Charting.Animation.ChartAnimator, MikePhil.Charting.Util.ViewPortHandler)
  drawHighlightLines(Landroid/graphics/Canvas;FFLcom/github/mikephil/charting/interfaces/datasets/ILineScatterCandleRadarDataSet;)V = DrawHighlightLines(Android.Graphics.Canvas, float, float, MikePhil.Charting.Interfaces.Datasets.ILineScatterCandleRadarDataSet)
com/github/mikephil/charting/renderer/PieChartRenderer = MikePhil.Charting.Renderer.PieChartRenderer
  <init>(Lcom/github/mikephil/charting/charts/PieChart;Lcom/github/mikephil/charting/animation/ChartAnimator;Lcom/github/mikephil/charting/utils/ViewPortHandler;)V = .ctor(MikePhil.Charting.Charts.PieChart, MikePhil.Charting.Animation.ChartAnimator, MikePhil.Charting.Util.ViewPortHandler)
  mBitmapCanvas = MBitmapCanvas
  mChart = MChart
  mDrawBitmap = MDrawBitmap
  mDrawCenterTextPathBuffer = MDrawCenterTextPathBuffer
  mDrawHighlightedRectF = MDrawHighlightedRectF
  mHolePaint = MHolePaint
  mTransparentCirclePaint = MTransparentCirclePaint
  mValueLinePaint = MValueLinePaint
  getPaintCenterText()Landroid/text/TextPaint; = PaintCenterText
  getPaintEntryLabels()Landroid/graphics/Paint; = PaintEntryLabels
  getPaintHole()Landroid/graphics/Paint; = PaintHole
  getPaintTransparentCircle()Landroid/graphics/Paint; = PaintTransparentCircle
  calculateMinimumRadiusForSpacedSlice(Lcom/github/mikephil/charting/utils/MPPointF;FFFFFF)F = CalculateMinimumRadiusForSpacedSlice(MikePhil.Charting.Util.MPPointF, float, float, float, float, float, float)
  drawCenterText(Landroid/graphics/Canvas;)V = DrawCenterText(Android.Graphics.Canvas)
  drawData(Landroid/graphics/Canvas;)V = DrawData(Android.Graphics.Canvas)
  drawDataSet(Landroid/graphics/Canvas;Lcom/github/mikephil/charting/interfaces/datasets/IPieDataSet;)V = DrawDataSet(Android.Graphics.Canvas, MikePhil.Charting.Interfaces.Datasets.IPieDataSet)
  drawEntryLabel(Landroid/graphics/Canvas;Ljava/lang/String;FF)V = DrawEntryLabel(Android.Graphics.Canvas, string, float, float)
  drawExtras(Landroid/graphics/Canvas;)V = DrawExtras(Android.Graphics.Canvas)
  drawHighlighted(Landroid/graphics/Canvas;[Lcom/github/mikephil/charting/highlight/Highlight;)V = DrawHighlighted(Android.Graphics.Canvas, MikePhil.Charting.Highlight.Highlight[])
  drawHole(Landroid/graphics/Canvas;)V = DrawHole(Android.Graphics.Canvas)
  drawRoundedSlices(Landroid/graphics/Canvas;)V = DrawRoundedSlices(Android.Graphics.Canvas)
  drawValues(Landroid/graphics/Canvas;)V = DrawValues(Android.Graphics.Canvas)
  getSliceSpace(Lcom/github/mikephil/charting/interfaces/datasets/IPieDataSet;)F = GetSliceSpace(MikePhil.Charting.Interfaces.Datasets.IPieDataSet)
  initBuffers()V = InitBuffers()
  releaseBitmap()V = ReleaseBitmap()
com/github/mikephil/charting/renderer/RadarChartRenderer = MikePhil.Charting.Renderer.RadarChartRenderer
  <init>(Lcom/github/mikephil/charting/charts/RadarChart;Lcom/github/mikephil/charting/animation/ChartAnimator;Lcom/github/mikephil/charting/utils/ViewPortHandler;)V = .ctor(MikePhil.Charting.Charts.RadarChart, MikePhil.Charting.Animation.ChartAnimator, MikePhil.Charting.Util.ViewPortHandler)
  mChart = MChart
  mDrawDataSetSurfacePathBuffer = MDrawDataSetSurfacePathBuffer
  mDrawHighlightCirclePathBuffer = MDrawHighlightCirclePathBuffer
  mHighlightCirclePaint = MHighlightCirclePaint
  mWebPaint = MWebPaint
  getWebPaint()Landroid/graphics/Paint; = WebPaint
  drawData(Landroid/graphics/Canvas;)V = DrawData(Android.Graphics.Canvas)
  drawDataSet(Landroid/graphics/Canvas;Lcom/github/mikephil/charting/interfaces/datasets/IRadarDataSet;I)V = DrawDataSet(Android.Graphics.Canvas, MikePhil.Charting.Interfaces.Datasets.IRadarDataSet, int)
  drawExtras(Landroid/graphics/Canvas;)V = DrawExtras(Android.Graphics.Canvas)
  drawHighlightCircle(Landroid/graphics/Canvas;Lcom/github/mikephil/charting/utils/MPPointF;FFIIF)V = DrawHighlightCircle(Android.Graphics.Canvas, MikePhil.Charting.Util.MPPointF, float, float, int, int, float)
  drawHighlighted(Landroid/graphics/Canvas;[Lcom/github/mikephil/charting/highlight/Highlight;)V = DrawHighlighted(Android.Graphics.Canvas, MikePhil.Charting.Highlight.Highlight[])
  drawValues(Landroid/graphics/Canvas;)V = DrawValues(Android.Graphics.Canvas)
  drawWeb(Landroid/graphics/Canvas;)V = DrawWeb(Android.Graphics.Canvas)
  initBuffers()V = InitBuffers()
com/github/mikephil/charting/renderer/Renderer = MikePhil.Charting.Renderer.Renderer
  <init>(Lcom/github/mikephil/charting/utils/ViewPortHandler;)V = .ctor(MikePhil.Charting.Util.ViewPortHandler)
  mViewPortHandler = MViewPortHandler
com/github/mikephil/charting/renderer/scatter/ChevronDownShapeRenderer = MikePhil.Charting.Renderer.Scatter.ChevronDownShapeRenderer
  <init>()V = .ctor()
  renderShape(Landroid/graphics/Canvas;Lcom/github/mikephil/charting/interfaces/datasets/IScatterDataSet;Lcom/github/mikephil/charting/utils/ViewPortHandler;FFLandroid/graphics/Paint;)V = RenderShape(Android.Graphics.Canvas, MikePhil.Charting.Interfaces.Datasets.IScatterDataSet, MikePhil.Charting.Util.ViewPortHandler, float, float, Android.Graphics.Paint)
com/github/mikephil/charting/renderer/scatter/ChevronUpShapeRenderer = MikePhil.Charting.Renderer.Scatter.ChevronUpShapeRenderer
  <init>()V = .ctor()
  renderShape(Landroid/graphics/Canvas;Lcom/github/mikephil/charting/interfaces/datasets/IScatterDataSet;Lcom/github/mikephil/charting/utils/ViewPortHandler;FFLandroid/graphics/Paint;)V = RenderShape(Android.Graphics.Canvas, MikePhil.Charting.Interfaces.Datasets.IScatterDataSet, MikePhil.Charting.Util.ViewPortHandler, float, float, Android.Graphics.Paint)
com/github/mikephil/charting/renderer/scatter/CircleShapeRenderer = MikePhil.Charting.Renderer.Scatter.CircleShapeRenderer
  <init>()V = .ctor()
  renderShape(Landroid/graphics/Canvas;Lcom/github/mikephil/charting/interfaces/datasets/IScatterDataSet;Lcom/github/mikephil/charting/utils/ViewPortHandler;FFLandroid/graphics/Paint;)V = RenderShape(Android.Graphics.Canvas, MikePhil.Charting.Interfaces.Datasets.IScatterDataSet, MikePhil.Charting.Util.ViewPortHandler, float, float, Android.Graphics.Paint)
com/github/mikephil/charting/renderer/scatter/CrossShapeRenderer = MikePhil.Charting.Renderer.Scatter.CrossShapeRenderer
  <init>()V = .ctor()
  renderShape(Landroid/graphics/Canvas;Lcom/github/mikephil/charting/interfaces/datasets/IScatterDataSet;Lcom/github/mikephil/charting/utils/ViewPortHandler;FFLandroid/graphics/Paint;)V = RenderShape(Android.Graphics.Canvas, MikePhil.Charting.Interfaces.Datasets.IScatterDataSet, MikePhil.Charting.Util.ViewPortHandler, float, float, Android.Graphics.Paint)
com/github/mikephil/charting/renderer/scatter/IShapeRenderer = MikePhil.Charting.Renderer.Scatter.IShapeRenderer
  renderShape(Landroid/graphics/Canvas;Lcom/github/mikephil/charting/interfaces/datasets/IScatterDataSet;Lcom/github/mikephil/charting/utils/ViewPortHandler;FFLandroid/graphics/Paint;)V = RenderShape(Android.Graphics.Canvas, MikePhil.Charting.Interfaces.Datasets.IScatterDataSet, MikePhil.Charting.Util.ViewPortHandler, float, float, Android.Graphics.Paint)
com/github/mikephil/charting/renderer/scatter/SquareShapeRenderer = MikePhil.Charting.Renderer.Scatter.SquareShapeRenderer
  <init>()V = .ctor()
  renderShape(Landroid/graphics/Canvas;Lcom/github/mikephil/charting/interfaces/datasets/IScatterDataSet;Lcom/github/mikephil/charting/utils/ViewPortHandler;FFLandroid/graphics/Paint;)V = RenderShape(Android.Graphics.Canvas, MikePhil.Charting.Interfaces.Datasets.IScatterDataSet, MikePhil.Charting.Util.ViewPortHandler, float, float, Android.Graphics.Paint)
com/github/mikephil/charting/renderer/scatter/TriangleShapeRenderer = MikePhil.Charting.Renderer.Scatter.TriangleShapeRenderer
  <init>()V = .ctor()
  mTrianglePathBuffer = MTrianglePathBuffer
  renderShape(Landroid/graphics/Canvas;Lcom/github/mikephil/charting/interfaces/datasets/IScatterDataSet;Lcom/github/mikephil/charting/utils/ViewPortHandler;FFLandroid/graphics/Paint;)V = RenderShape(Android.Graphics.Canvas, MikePhil.Charting.Interfaces.Datasets.IScatterDataSet, MikePhil.Charting.Util.ViewPortHandler, float, float, Android.Graphics.Paint)
com/github/mikephil/charting/renderer/scatter/XShapeRenderer = MikePhil.Charting.Renderer.Scatter.XShapeRenderer
  <init>()V = .ctor()
  renderShape(Landroid/graphics/Canvas;Lcom/github/mikephil/charting/interfaces/datasets/IScatterDataSet;Lcom/github/mikephil/charting/utils/ViewPortHandler;FFLandroid/graphics/Paint;)V = RenderShape(Android.Graphics.Canvas, MikePhil.Charting.Interfaces.Datasets.IScatterDataSet, MikePhil.Charting.Util.ViewPortHandler, float, float, Android.Graphics.Paint)
com/github/mikephil/charting/renderer/ScatterChartRenderer = MikePhil.Charting.Renderer.ScatterChartRenderer
  <init>(Lcom/github/mikephil/charting/interfaces/dataprovider/ScatterDataProvider;Lcom/github/mikephil/charting/animation/ChartAnimator;Lcom/github/mikephil/charting/utils/ViewPortHandler;)V = .ctor(MikePhil.Charting.Interfaces.Dataprovider.IScatterDataProvider, MikePhil.Charting.Animation.ChartAnimator, MikePhil.Charting.Util.ViewPortHandler)
  mChart = MChart
  drawData(Landroid/graphics/Canvas;)V = DrawData(Android.Graphics.Canvas)
  drawDataSet(Landroid/graphics/Canvas;Lcom/github/mikephil/charting/interfaces/datasets/IScatterDataSet;)V = DrawDataSet(Android.Graphics.Canvas, MikePhil.Charting.Interfaces.Datasets.IScatterDataSet)
  drawExtras(Landroid/graphics/Canvas;)V = DrawExtras(Android.Graphics.Canvas)
  drawHighlighted(Landroid/graphics/Canvas;[Lcom/github/mikephil/charting/highlight/Highlight;)V = DrawHighlighted(Android.Graphics.Canvas, MikePhil.Charting.Highlight.Highlight[])
  drawValues(Landroid/graphics/Canvas;)V = DrawValues(Android.Graphics.Canvas)
  initBuffers()V = InitBuffers()
com/github/mikephil/charting/renderer/XAxisRenderer = MikePhil.Charting.Renderer.XAxisRenderer
  <init>(Lcom/github/mikephil/charting/utils/ViewPortHandler;Lcom/github/mikephil/charting/components/XAxis;Lcom/github/mikephil/charting/utils/Transformer;)V = .ctor(MikePhil.Charting.Util.ViewPortHandler, MikePhil.Charting.Components.XAxis, MikePhil.Charting.Util.Transformer)
  mGridClippingRect = MGridClippingRect
  mLimitLineClippingRect = MLimitLineClippingRect
  mRenderGridLinesBuffer = MRenderGridLinesBuffer
  mRenderGridLinesPath = MRenderGridLinesPath
  mRenderLimitLinesBuffer = MRenderLimitLinesBuffer
  mXAxis = MXAxis
  getGridClippingRect()Landroid/graphics/RectF; = GridClippingRect
  computeSize()V = ComputeSize()
  drawGridLine(Landroid/graphics/Canvas;FFLandroid/graphics/Path;)V = DrawGridLine(Android.Graphics.Canvas, float, float, Android.Graphics.Path)
  drawLabel(Landroid/graphics/Canvas;Ljava/lang/String;FFLcom/github/mikephil/charting/utils/MPPointF;F)V = DrawLabel(Android.Graphics.Canvas, string, float, float, MikePhil.Charting.Util.MPPointF, float)
  drawLabels(Landroid/graphics/Canvas;FLcom/github/mikephil/charting/utils/MPPointF;)V = DrawLabels(Android.Graphics.Canvas, float, MikePhil.Charting.Util.MPPointF)
  renderAxisLabels(Landroid/graphics/Canvas;)V = RenderAxisLabels(Android.Graphics.Canvas)
  renderAxisLine(Landroid/graphics/Canvas;)V = RenderAxisLine(Android.Graphics.Canvas)
  renderGridLines(Landroid/graphics/Canvas;)V = RenderGridLines(Android.Graphics.Canvas)
  renderLimitLineLabel(Landroid/graphics/Canvas;Lcom/github/mikephil/charting/components/LimitLine;[FF)V = RenderLimitLineLabel(Android.Graphics.Canvas, MikePhil.Charting.Components.LimitLine, float[], float)
  renderLimitLineLine(Landroid/graphics/Canvas;Lcom/github/mikephil/charting/components/LimitLine;[F)V = RenderLimitLineLine(Android.Graphics.Canvas, MikePhil.Charting.Components.LimitLine, float[])
  renderLimitLines(Landroid/graphics/Canvas;)V = RenderLimitLines(Android.Graphics.Canvas)
  setupGridPaint()V = SetupGridPaint()
com/github/mikephil/charting/renderer/XAxisRendererHorizontalBarChart = MikePhil.Charting.Renderer.XAxisRendererHorizontalBarChart
  <init>(Lcom/github/mikephil/charting/utils/ViewPortHandler;Lcom/github/mikephil/charting/components/XAxis;Lcom/github/mikephil/charting/utils/Transformer;Lcom/github/mikephil/charting/charts/BarChart;)V = .ctor(MikePhil.Charting.Util.ViewPortHandler, MikePhil.Charting.Components.XAxis, MikePhil.Charting.Util.Transformer, MikePhil.Charting.Charts.BarChart)
  mChart = MChart
  mRenderLimitLinesPathBuffer = MRenderLimitLinesPathBuffer
com/github/mikephil/charting/renderer/XAxisRendererRadarChart = MikePhil.Charting.Renderer.XAxisRendererRadarChart
  <init>(Lcom/github/mikephil/charting/utils/ViewPortHandler;Lcom/github/mikephil/charting/components/XAxis;Lcom/github/mikephil/charting/charts/RadarChart;)V = .ctor(MikePhil.Charting.Util.ViewPortHandler, MikePhil.Charting.Components.XAxis, MikePhil.Charting.Charts.RadarChart)
com/github/mikephil/charting/renderer/YAxisRenderer = MikePhil.Charting.Renderer.YAxisRenderer
  <init>(Lcom/github/mikephil/charting/utils/ViewPortHandler;Lcom/github/mikephil/charting/components/YAxis;Lcom/github/mikephil/charting/utils/Transformer;)V = .ctor(MikePhil.Charting.Util.ViewPortHandler, MikePhil.Charting.Components.YAxis, MikePhil.Charting.Util.Transformer)
  mDrawZeroLinePath = MDrawZeroLinePath
  mGetTransformedPositionsBuffer = MGetTransformedPositionsBuffer
  mGridClippingRect = MGridClippingRect
  mLimitLineClippingRect = MLimitLineClippingRect
  mRenderGridLinesPath = MRenderGridLinesPath
  mRenderLimitLines = MRenderLimitLines
  mRenderLimitLinesBuffer = MRenderLimitLinesBuffer
  mYAxis = MYAxis
  mZeroLineClippingRect = MZeroLineClippingRect
  mZeroLinePaint = MZeroLinePaint
  getGridClippingRect()Landroid/graphics/RectF; = GridClippingRect
  drawYLabels(Landroid/graphics/Canvas;F[FF)V = DrawYLabels(Android.Graphics.Canvas, float, float[], float)
  drawZeroLine(Landroid/graphics/Canvas;)V = DrawZeroLine(Android.Graphics.Canvas)
  getTransformedPositions()[F = GetTransformedPositions()
  linePath(Landroid/graphics/Path;I[F)Landroid/graphics/Path; = LinePath(Android.Graphics.Path, int, float[])
  renderAxisLabels(Landroid/graphics/Canvas;)V = RenderAxisLabels(Android.Graphics.Canvas)
  renderAxisLine(Landroid/graphics/Canvas;)V = RenderAxisLine(Android.Graphics.Canvas)
  renderGridLines(Landroid/graphics/Canvas;)V = RenderGridLines(Android.Graphics.Canvas)
  renderLimitLines(Landroid/graphics/Canvas;)V = RenderLimitLines(Android.Graphics.Canvas)
com/github/mikephil/charting/renderer/YAxisRendererHorizontalBarChart = MikePhil.Charting.Renderer.YAxisRendererHorizontalBarChart
  <init>(Lcom/github/mikephil/charting/utils/ViewPortHandler;Lcom/github/mikephil/charting/components/YAxis;Lcom/github/mikephil/charting/utils/Transformer;)V = .ctor(MikePhil.Charting.Util.ViewPortHandler, MikePhil.Charting.Components.YAxis, MikePhil.Charting.Util.Transformer)
  mDrawZeroLinePathBuffer = MDrawZeroLinePathBuffer
  mRenderLimitLinesBuffer = MRenderLimitLinesBuffer
  mRenderLimitLinesPathBuffer = MRenderLimitLinesPathBuffer
com/github/mikephil/charting/renderer/YAxisRendererRadarChart = MikePhil.Charting.Renderer.YAxisRendererRadarChart
  <init>(Lcom/github/mikephil/charting/utils/ViewPortHandler;Lcom/github/mikephil/charting/components/YAxis;Lcom/github/mikephil/charting/charts/RadarChart;)V = .ctor(MikePhil.Charting.Util.ViewPortHandler, MikePhil.Charting.Components.YAxis, MikePhil.Charting.Charts.RadarChart)
com/github/mikephil/charting/utils/ColorTemplate = MikePhil.Charting.Util.ColorTemplate
  <init>()V = .ctor()
  COLORFUL_COLORS = ColorfulColors
  COLOR_NONE = ColorNone
  COLOR_SKIP = ColorSkip
  JOYFUL_COLORS = JoyfulColors
  LIBERTY_COLORS = LibertyColors
  MATERIAL_COLORS = MaterialColors
  PASTEL_COLORS = PastelColors
  VORDIPLOM_COLORS = VordiplomColors
  getHoloBlue()I = HoloBlue
  colorWithAlpha(II)I = ColorWithAlpha(int, int)
  createColors(Landroid/content/res/Resources;[I)Ljava/util/List; = CreateColors(Android.Content.Res.Resources, int[])
  createColors([I)Ljava/util/List; = CreateColors(int[])
  rgb(Ljava/lang/String;)I = Rgb(string)
com/github/mikephil/charting/utils/EntryXComparator = MikePhil.Charting.Util.EntryXComparator
  <init>()V = .ctor()
  compare(Lcom/github/mikephil/charting/data/Entry;Lcom/github/mikephil/charting/data/Entry;)I = Compare(MikePhil.Charting.Data.Entry, MikePhil.Charting.Data.Entry)
com/github/mikephil/charting/utils/FileUtils = MikePhil.Charting.Util.FileUtils
  <init>()V = .ctor()
  loadBarEntriesFromAssets(Landroid/content/res/AssetManager;Ljava/lang/String;)Ljava/util/List; = LoadBarEntriesFromAssets(Android.Content.Res.AssetManager, string)
  loadEntriesFromAssets(Landroid/content/res/AssetManager;Ljava/lang/String;)Ljava/util/List; = LoadEntriesFromAssets(Android.Content.Res.AssetManager, string)
  loadEntriesFromFile(Ljava/lang/String;)Ljava/util/List; = LoadEntriesFromFile(string)
  saveToSdCard(Ljava/util/List;Ljava/lang/String;)V = SaveToSdCard(System.Collections.Generic.IList<MikePhil.Charting.Data.Entry>, string)
com/github/mikephil/charting/utils/FSize = MikePhil.Charting.Util.FSize
  <init>()V = .ctor()
  <init>(FF)V = .ctor(float, float)
  height = Height
  width = Width
  getInstance(FF)Lcom/github/mikephil/charting/utils/FSize; = GetInstance(float, float)
  instantiate()Lcom/github/mikephil/charting/utils/ObjectPool$Poolable; = Instantiate()
  recycleInstance(Lcom/github/mikephil/charting/utils/FSize;)V = RecycleInstance(MikePhil.Charting.Util.FSize)
  recycleInstances(Ljava/util/List;)V = RecycleInstances(System.Collections.Generic.IList<MikePhil.Charting.Util.FSize>)
com/github/mikephil/charting/utils/HorizontalViewPortHandler = MikePhil.Charting.Util.HorizontalViewPortHandler
  <init>()V = .ctor()
com/github/mikephil/charting/utils/MPPointD = MikePhil.Charting.Util.MPPointD
  x = X
  y = Y
  getInstance(DD)Lcom/github/mikephil/charting/utils/MPPointD; = GetInstance(double, double)
  instantiate()Lcom/github/mikephil/charting/utils/ObjectPool$Poolable; = Instantiate()
  recycleInstance(Lcom/github/mikephil/charting/utils/MPPointD;)V = RecycleInstance(MikePhil.Charting.Util.MPPointD)
  recycleInstances(Ljava/util/List;)V = RecycleInstances(System.Collections.Generic.IList<MikePhil.Charting.Util.MPPointD>)
com/github/mikephil/charting/utils/MPPointF = MikePhil.Charting.Util.MPPointF
  <init>()V = .ctor()
  <init>(FF)V = .ctor(float, float)
  CREATOR = Creator
  x = X
  y = Y
  getInstance()Lcom/github/mikephil/charting/utils/MPPointF; = Instance
  getInstance(Lcom/github/mikephil/charting/utils/MPPointF;)Lcom/github/mikephil/charting/utils/MPPointF; = GetInstance(MikePhil.Charting.Util.MPPointF)
  getInstance(FF)Lcom/github/mikephil/charting/utils/MPPointF; = GetInstance(float, float)
  getX()F = GetX()
  getY()F = GetY()
  instantiate()Lcom/github/mikephil/charting/utils/ObjectPool$Poolable; = Instantiate()
  my_readFromParcel(Landroid/os/Parcel;)V = My_readFromParcel(Android.OS.Parcel)
  recycleInstance(Lcom/github/mikephil/charting/utils/MPPointF;)V = RecycleInstance(MikePhil.Charting.Util.MPPointF)
  recycleInstances(Ljava/util/List;)V = RecycleInstances(System.Collections.Generic.IList<MikePhil.Charting.Util.MPPointF>)
com/github/mikephil/charting/utils/ObjectPool = MikePhil.Charting.Util.ObjectPool
  getPoolCapacity()I = PoolCapacity
  getPoolCount()I = PoolCount
  getPoolId()I = PoolId
  getReplenishPercentage()F = ReplenishPercentage
  setReplenishPercentage(F)V = ReplenishPercentage
  create(ILcom/github/mikephil/charting/utils/ObjectPool$Poolable;)Lcom/github/mikephil/charting/utils/ObjectPool; = Create(int, MikePhil.Charting.Util.ObjectPool.Poolable)
  get()Lcom/github/mikephil/charting/utils/ObjectPool$Poolable; = Get()
  recycle(Ljava/util/List;)V = Recycle(System.Collections.IList)
  recycle(Lcom/github/mikephil/charting/utils/ObjectPool$Poolable;)V = Recycle(Java.Lang.Object)
com/github/mikephil/charting/utils/Transformer = MikePhil.Charting.Util.Transformer
  <init>(Lcom/github/mikephil/charting/utils/ViewPortHandler;)V = .ctor(MikePhil.Charting.Util.ViewPortHandler)
  mMatrixOffset = MMatrixOffset
  mMatrixValueToPx = MMatrixValueToPx
  mPixelToValueMatrixBuffer = MPixelToValueMatrixBuffer
  mViewPortHandler = MViewPortHandler
  valuePointsForGenerateTransformedValuesBubble = ValuePointsForGenerateTransformedValuesBubble
  valuePointsForGenerateTransformedValuesCandle = ValuePointsForGenerateTransformedValuesCandle
  valuePointsForGenerateTransformedValuesLine = ValuePointsForGenerateTransformedValuesLine
  valuePointsForGenerateTransformedValuesScatter = ValuePointsForGenerateTransformedValuesScatter
  getOffsetMatrix()Landroid/graphics/Matrix; = OffsetMatrix
  getPixelToValueMatrix()Landroid/graphics/Matrix; = PixelToValueMatrix
  getValueMatrix()Landroid/graphics/Matrix; = ValueMatrix
  getValueToPixelMatrix()Landroid/graphics/Matrix; = ValueToPixelMatrix
  generateTransformedValuesBubble(Lcom/github/mikephil/charting/interfaces/datasets/IBubbleDataSet;FII)[F = GenerateTransformedValuesBubble(MikePhil.Charting.Interfaces.Datasets.IBubbleDataSet, float, int, int)
  generateTransformedValuesCandle(Lcom/github/mikephil/charting/interfaces/datasets/ICandleDataSet;FFII)[F = GenerateTransformedValuesCandle(MikePhil.Charting.Interfaces.Datasets.ICandleDataSet, float, float, int, int)
  generateTransformedValuesLine(Lcom/github/mikephil/charting/interfaces/datasets/ILineDataSet;FFII)[F = GenerateTransformedValuesLine(MikePhil.Charting.Interfaces.Datasets.ILineDataSet, float, float, int, int)
  generateTransformedValuesScatter(Lcom/github/mikephil/charting/interfaces/datasets/IScatterDataSet;FFII)[F = GenerateTransformedValuesScatter(MikePhil.Charting.Interfaces.Datasets.IScatterDataSet, float, float, int, int)
  getPixelForValues(FF)Lcom/github/mikephil/charting/utils/MPPointD; = GetPixelForValues(float, float)
  getValuesByTouchPoint(FF)Lcom/github/mikephil/charting/utils/MPPointD; = GetValuesByTouchPoint(float, float)
  getValuesByTouchPoint(FFLcom/github/mikephil/charting/utils/MPPointD;)V = GetValuesByTouchPoint(float, float, MikePhil.Charting.Util.MPPointD)
  pathValuesToPixel(Ljava/util/List;)V = PathValuesToPixel(System.Collections.Generic.IList<Android.Graphics.Path>)
  pathValueToPixel(Landroid/graphics/Path;)V = PathValueToPixel(Android.Graphics.Path)
  pixelsToValue([F)V = PixelsToValue(float[])
  pointValuesToPixel([F)V = PointValuesToPixel(float[])
  prepareMatrixOffset(Z)V = PrepareMatrixOffset(bool)
  prepareMatrixValuePx(FFFF)V = PrepareMatrixValuePx(float, float, float, float)
  rectToPixelPhase(Landroid/graphics/RectF;F)V = RectToPixelPhase(Android.Graphics.RectF, float)
  rectToPixelPhaseHorizontal(Landroid/graphics/RectF;F)V = RectToPixelPhaseHorizontal(Android.Graphics.RectF, float)
  rectValuesToPixel(Ljava/util/List;)V = RectValuesToPixel(System.Collections.Generic.IList<Android.Graphics.RectF>)
  rectValueToPixel(Landroid/graphics/RectF;)V = RectValueToPixel(Android.Graphics.RectF)
  rectValueToPixelHorizontal(Landroid/graphics/RectF;)V = RectValueToPixelHorizontal(Android.Graphics.RectF)
  rectValueToPixelHorizontal(Landroid/graphics/RectF;F)V = RectValueToPixelHorizontal(Android.Graphics.RectF, float)
com/github/mikephil/charting/utils/TransformerHorizontalBarChart = MikePhil.Charting.Util.TransformerHorizontalBarChart
  <init>(Lcom/github/mikephil/charting/utils/ViewPortHandler;)V = .ctor(MikePhil.Charting.Util.ViewPortHandler)
com/github/mikephil/charting/utils/Utils = MikePhil.Charting.Util.Utils
  <init>()V = .ctor()
  DEG2RAD = Deg2rad
  DOUBLE_EPSILON = DoubleEpsilon
  FDEG2RAD = Fdeg2rad
  FLOAT_EPSILON = FloatEpsilon
  getDefaultValueFormatter()Lcom/github/mikephil/charting/formatter/IValueFormatter; = DefaultValueFormatter
  getMaximumFlingVelocity()I = MaximumFlingVelocity
  getMinimumFlingVelocity()I = MinimumFlingVelocity
  getSDKInt()I = SDKInt
  calcTextHeight(Landroid/graphics/Paint;Ljava/lang/String;)I = CalcTextHeight(Android.Graphics.Paint, string)
  calcTextSize(Landroid/graphics/Paint;Ljava/lang/String;)Lcom/github/mikephil/charting/utils/FSize; = CalcTextSize(Android.Graphics.Paint, string)
  calcTextSize(Landroid/graphics/Paint;Ljava/lang/String;Lcom/github/mikephil/charting/utils/FSize;)V = CalcTextSize(Android.Graphics.Paint, string, MikePhil.Charting.Util.FSize)
  calcTextWidth(Landroid/graphics/Paint;Ljava/lang/String;)I = CalcTextWidth(Android.Graphics.Paint, string)
  convertDpToPixel(F)F = ConvertDpToPixel(float)
  convertIntegers(Ljava/util/List;)[I = ConvertIntegers(System.Collections.Generic.IList<Java.Lang.Integer>)
  convertPixelsToDp(F)F = ConvertPixelsToDp(float)
  convertStrings(Ljava/util/List;)[Ljava/lang/String; = ConvertStrings(System.Collections.Generic.IList<string>)
  copyIntegers(Ljava/util/List;[I)V = CopyIntegers(System.Collections.Generic.IList<Java.Lang.Integer>, int[])
  copyStrings(Ljava/util/List;[Ljava/lang/String;)V = CopyStrings(System.Collections.Generic.IList<string>, string[])
  drawImage(Landroid/graphics/Canvas;Landroid/graphics/drawable/Drawable;IIII)V = DrawImage(Android.Graphics.Canvas, Android.Graphics.Drawables.Drawable, int, int, int, int)
  drawMultilineText(Landroid/graphics/Canvas;Landroid/text/StaticLayout;FFLandroid/text/TextPaint;Lcom/github/mikephil/charting/utils/MPPointF;F)V = DrawMultilineText(Android.Graphics.Canvas, Android.Text.StaticLayout, float, float, Android.Text.TextPaint, MikePhil.Charting.Util.MPPointF, float)
  drawMultilineText(Landroid/graphics/Canvas;Ljava/lang/String;FFLandroid/text/TextPaint;Lcom/github/mikephil/charting/utils/FSize;Lcom/github/mikephil/charting/utils/MPPointF;F)V = DrawMultilineText(Android.Graphics.Canvas, string, float, float, Android.Text.TextPaint, MikePhil.Charting.Util.FSize, MikePhil.Charting.Util.MPPointF, float)
  drawXAxisValue(Landroid/graphics/Canvas;Ljava/lang/String;FFLandroid/graphics/Paint;Lcom/github/mikephil/charting/utils/MPPointF;F)V = DrawXAxisValue(Android.Graphics.Canvas, string, float, float, Android.Graphics.Paint, MikePhil.Charting.Util.MPPointF, float)
  formatNumber(FIZ)Ljava/lang/String; = FormatNumber(float, int, bool)
  formatNumber(FIZC)Ljava/lang/String; = FormatNumber(float, int, bool, char)
  getDecimals(F)I = GetDecimals(float)
  getLineHeight(Landroid/graphics/Paint;)F = GetLineHeight(Android.Graphics.Paint)
  getLineHeight(Landroid/graphics/Paint;Landroid/graphics/Paint$FontMetrics;)F = GetLineHeight(Android.Graphics.Paint, Android.Graphics.Paint.FontMetrics)
  getLineSpacing(Landroid/graphics/Paint;)F = GetLineSpacing(Android.Graphics.Paint)
  getLineSpacing(Landroid/graphics/Paint;Landroid/graphics/Paint$FontMetrics;)F = GetLineSpacing(Android.Graphics.Paint, Android.Graphics.Paint.FontMetrics)
  getNormalizedAngle(F)F = GetNormalizedAngle(float)
  getPosition(Lcom/github/mikephil/charting/utils/MPPointF;FF)Lcom/github/mikephil/charting/utils/MPPointF; = GetPosition(MikePhil.Charting.Util.MPPointF, float, float)
  getPosition(Lcom/github/mikephil/charting/utils/MPPointF;FFLcom/github/mikephil/charting/utils/MPPointF;)V = GetPosition(MikePhil.Charting.Util.MPPointF, float, float, MikePhil.Charting.Util.MPPointF)
  getSizeOfRotatedRectangleByDegrees(Lcom/github/mikephil/charting/utils/FSize;F)Lcom/github/mikephil/charting/utils/FSize; = GetSizeOfRotatedRectangleByDegrees(MikePhil.Charting.Util.FSize, float)
  getSizeOfRotatedRectangleByDegrees(FFF)Lcom/github/mikephil/charting/utils/FSize; = GetSizeOfRotatedRectangleByDegrees(float, float, float)
  getSizeOfRotatedRectangleByRadians(Lcom/github/mikephil/charting/utils/FSize;F)Lcom/github/mikephil/charting/utils/FSize; = GetSizeOfRotatedRectangleByRadians(MikePhil.Charting.Util.FSize, float)
  getSizeOfRotatedRectangleByRadians(FFF)Lcom/github/mikephil/charting/utils/FSize; = GetSizeOfRotatedRectangleByRadians(float, float, float)
  init(Landroid/content/Context;)V = Init(Android.Content.Context)
  init(Landroid/content/res/Resources;)V = Init(Android.Content.Res.Resources)
  nextUp(D)D = NextUp(double)
  postInvalidateOnAnimation(Landroid/view/View;)V = PostInvalidateOnAnimation(Android.Views.View)
  roundToNextSignificant(D)F = RoundToNextSignificant(double)
  velocityTrackerPointerUpCleanUpIfNecessary(Landroid/view/MotionEvent;Landroid/view/VelocityTracker;)V = VelocityTrackerPointerUpCleanUpIfNecessary(Android.Views.MotionEvent, Android.Views.VelocityTracker)
com/github/mikephil/charting/utils/ViewPortHandler = MikePhil.Charting.Util.ViewPortHandler
  <init>()V = .ctor()
  matrixBuffer = MatrixBuffer
  mCenterViewPortMatrixBuffer = MCenterViewPortMatrixBuffer
  mChartHeight = MChartHeight
  mChartWidth = MChartWidth
  mContentRect = MContentRect
  mMatrixTouch = MMatrixTouch
  valsBufferForFitScreen = ValsBufferForFitScreen
  getChartHeight()F = ChartHeight
  getChartWidth()F = ChartWidth
  getContentCenter()Lcom/github/mikephil/charting/utils/MPPointF; = ContentCenter
  getContentRect()Landroid/graphics/RectF; = ContentRect
  hasChartDimens()Z = HasChartDimens
  hasNoDragOffset()Z = HasNoDragOffset
  isFullyZoomedOut()Z = IsFullyZoomedOut
  isFullyZoomedOutX()Z = IsFullyZoomedOutX
  isFullyZoomedOutY()Z = IsFullyZoomedOutY
  getMatrixTouch()Landroid/graphics/Matrix; = MatrixTouch
  getMaxScaleX()F = MaxScaleX
  getMaxScaleY()F = MaxScaleY
  getMinScaleX()F = MinScaleX
  getMinScaleY()F = MinScaleY
  getScaleX()F = ScaleX
  getScaleY()F = ScaleY
  getSmallestContentExtension()F = SmallestContentExtension
  getTransX()F = TransX
  getTransY()F = TransY
  canZoomInMoreX()Z = CanZoomInMoreX()
  canZoomInMoreY()Z = CanZoomInMoreY()
  canZoomOutMoreX()Z = CanZoomOutMoreX()
  canZoomOutMoreY()Z = CanZoomOutMoreY()
  centerViewPort([FLandroid/view/View;)V = CenterViewPort(float[], Android.Views.View)
  contentBottom()F = ContentBottom()
  contentHeight()F = ContentHeight()
  contentLeft()F = ContentLeft()
  contentRight()F = ContentRight()
  contentTop()F = ContentTop()
  contentWidth()F = ContentWidth()
  fitScreen()Landroid/graphics/Matrix; = FitScreen()
  fitScreen(Landroid/graphics/Matrix;)V = FitScreen(Android.Graphics.Matrix)
  isInBounds(FF)Z = IsInBounds(float, float)
  isInBoundsBottom(F)Z = IsInBoundsBottom(float)
  isInBoundsLeft(F)Z = IsInBoundsLeft(float)
  isInBoundsRight(F)Z = IsInBoundsRight(float)
  isInBoundsTop(F)Z = IsInBoundsTop(float)
  isInBoundsX(F)Z = IsInBoundsX(float)
  isInBoundsY(F)Z = IsInBoundsY(float)
  limitTransAndScale(Landroid/graphics/Matrix;Landroid/graphics/RectF;)V = LimitTransAndScale(Android.Graphics.Matrix, Android.Graphics.RectF)
  offsetBottom()F = OffsetBottom()
  offsetLeft()F = OffsetLeft()
  offsetRight()F = OffsetRight()
  offsetTop()F = OffsetTop()
  refresh(Landroid/graphics/Matrix;Landroid/view/View;Z)Landroid/graphics/Matrix; = Refresh(Android.Graphics.Matrix, Android.Views.View, bool)
  resetZoom(Landroid/graphics/Matrix;)V = ResetZoom(Android.Graphics.Matrix)
  restrainViewPort(FFFF)V = RestrainViewPort(float, float, float, float)
  setChartDimens(FF)V = SetChartDimens(float, float)
  setDragOffsetX(F)V = SetDragOffsetX(float)
  setDragOffsetY(F)V = SetDragOffsetY(float)
  setMaximumScaleX(F)V = SetMaximumScaleX(float)
  setMaximumScaleY(F)V = SetMaximumScaleY(float)
  setMinimumScaleX(F)V = SetMinimumScaleX(float)
  setMinimumScaleY(F)V = SetMinimumScaleY(float)
  setMinMaxScaleX(FF)V = SetMinMaxScaleX(float, float)
  setMinMaxScaleY(FF)V = SetMinMaxScaleY(float, float)
  setZoom(FF)Landroid/graphics/Matrix; = SetZoom(float, float)
  setZoom(FFLandroid/graphics/Matrix;)V = SetZoom(float, float, Android.Graphics.Matrix)
  setZoom(FFFF)Landroid/graphics/Matrix; = SetZoom(float, float, float, float)
  translate([F)Landroid/graphics/Matrix; = Translate(float[])
  translate([FLandroid/graphics/Matrix;)V = Translate(float[], Android.Graphics.Matrix)
  zoom(FF)Landroid/graphics/Matrix; = Zoom(float, float)
  zoom(FFLandroid/graphics/Matrix;)V = Zoom(float, float, Android.Graphics.Matrix)
  zoom(FFFF)Landroid/graphics/Matrix; = Zoom(float, float, float, float)
  zoom(FFFFLandroid/graphics/Matrix;)V = Zoom(float, float, float, float, Android.Graphics.Matrix)
  zoomIn(FF)Landroid/graphics/Matrix; = ZoomIn(float, float)
  zoomIn(FFLandroid/graphics/Matrix;)V = ZoomIn(float, float, Android.Graphics.Matrix)
  zoomOut(FF)Landroid/graphics/Matrix; = ZoomOut(float, float)
  zoomOut(FFLandroid/graphics/Matrix;)V = ZoomOut(float, float, Android.Graphics.Matrix)
